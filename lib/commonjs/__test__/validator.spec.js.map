{"version":3,"sources":["validator.spec.js"],"names":["JES","require","describe","it","obj","key1","key2","key3","key4","key5","key6","match","should","be","eql","result","not","ok","key11","key12","key13","key21","key22","key23","$gt","$gte","$lt","$lte","$eq","$neq","$in","$nin","$exists","jeso","$is","throws","key99","$exist","$any","$eval","a"],"mappings":"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","sourcesContent":["const JES = require('../index');\n\ndescribe('jes:validator', function () {\n    it('equal', function () {\n        let obj = {\n            key1: 2000,\n            key2: 'ok',\n            key3: {\n                key1: 20,\n                key2: 'ok',\n            },\n            key4: null,\n            key5: false,\n            key6: true,\n        };\n\n        JES.match(obj, {\n            key1: 2000,\n            key2: 'ok',\n            key3: {\n                key1: 20,\n                key2: 'ok',\n            },\n            key4: null,\n            key5: false,\n            key6: true,\n        }).should.be.eql([true]);\n\n        let result = JES.match(obj, {\n            key1: 2001,\n        });\n        result[0].should.not.be.ok();\n        result[1].should.be.match(/ should be 2001/);\n\n        result = JES.match(obj, {\n            key2: 'ng',\n        });\n        result[0].should.not.be.ok();\n        result[1].should.be.match(/ should be \"ng\"/);\n    });\n\n    it('equal2', function () {\n        let obj = {\n            key1: [1, 2, 3],\n            key2: [1],\n        };\n\n        JES.match(obj, {\n            key1: [1, 2, 3],\n            key2: [1],\n        })[0].should.be.ok();\n\n        JES.match(obj, {\n            key1: [1, 2],\n            key2: [1, 3],\n        })[0].should.be.not.ok();\n\n        JES.match(obj, {\n            key1: [1, 2],\n            key2: [1],\n        })[0].should.be.not.ok();\n    });\n\n    it('mixed', function () {\n        let obj = {\n            key1: 2000,\n            key11: 2000,\n            key12: 2000,\n            key13: 2000,\n\n            key2: 'ok',\n            key21: 'ok',\n            key22: 'ok',\n            key23: 'ok',\n\n            key3: {\n                key1: 20,\n                key2: 'ok',\n            },\n            key4: null,\n            key5: false,\n            key6: true,\n        };\n\n        JES.match(obj, {\n            key1: { $gt: 1000 },\n            key11: { $gte: 2000 },\n            key12: { $lt: 3000 },\n            key13: { $lte: 2000 },\n\n            key2: { $eq: 'ok' },\n            key21: { $neq: 'ng' },\n\n            key22: { $in: ['ok', 'ng'] },\n            key23: { $nin: ['ng1', 'ng2'] },\n\n            key4: { $exists: false },\n        }).should.be.eql([true]);\n    });\n\n    it('jes', function () {\n        let obj = {\n            key1: 2000,\n            key11: 2000,\n            key12: 2000,\n            key13: 2000,\n\n            key2: 'ok',\n            key21: 'ok',\n            key22: 'ok',\n            key23: 'ok',\n\n            key3: {\n                key1: 20,\n                key2: 'ok',\n            },\n            key4: null,\n            key5: false,\n            key6: true,\n        };\n\n        const jeso = new JES(obj);\n        jeso.match({\n            key1: { $gt: 1000 },\n            key11: { $gte: 2000 },\n            key12: { $lt: 3000 },\n            key13: { $lte: 2000 },\n        })\n            .match({\n                key2: { $eq: 'ok' },\n                key21: { $neq: 'ng' },\n\n                key22: { $in: ['ok', 'ng'] },\n                key23: { $nin: ['ng1', 'ng2'] },\n\n                key4: { $exists: false },\n                key2: { $is: 'string' },\n            })\n            .match({\n                key3: {\n                    key1: 20,\n                    key2: {\n                        $neq: 'ng',\n                    },\n                },\n            });\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $gt: 3000 },\n            });\n        }, /\"key1\" should be greater than 3000/);\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $lt: 1000 },\n            });\n        }, /\"key1\" should be less than 1000/);\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $in: [100, 200] },\n            });\n        }, 'ValidationError: \"key1\" should be one of [100,200].');\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $nin: [1000, 2000] },\n            });\n        }, 'ValidationError: \"key1\" should not be any one of [1000,2000].');\n\n        should.throws(() => {\n            jeso.match({\n                key99: { $exist: true },\n            });\n        }, 'ValidationError: \"key99\" should not be NULL.');\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $exist: false },\n            });\n        }, 'ValidationError: \"key1\" should be NULL.');\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $is: 'string' },\n            });\n        }, 'ValidationError: The type of \"key1\" should be \"string\".');\n\n        should.throws(() => {\n            jeso.match({\n                key3: { key2: 'ng' },\n            });\n        }, 'ValidationError: \"key3.key2\" should be \"ng\".');\n    });\n\n    it('any', function () {\n        let obj = {\n            key1: 2000,\n            key11: 2000,\n            key12: 2000,\n            key13: 2000,\n        };\n\n        let jeso = new JES(obj);\n\n        jeso.match({\n            $any: [{ key1: 3000 }, { key11: 2000 }],\n        });\n\n        should.throws(() => {\n            jeso.match({\n                $any: [{ key1: 3000 }, { key11: 3000 }],\n            });\n        }, 'ValidationError: The value should match any of these rules: [{\"key1\":3000},{\"key11\":3000}].');\n    });\n\n    it('matchWithQuery', function () {\n        let obj = {\n            key1: 2000,\n            key11: 2000,\n            key12: 2000,\n            key13: 2000,\n        };\n\n        let jeso = new JES(obj);\n\n        jeso.match({\n            $eval: ['$size', 4],\n            key1: {\n                $eval: [ '$type', 'integer' ]\n            },\n        });\n\n        jeso.match({\n            $eval: [\n                {\n                    '|>$add': 200,\n                },\n                {\n                    key1: 2200,\n                    key11: 2200,\n                    key12: 2200,\n                    key13: 2200,\n                },\n            ],\n        });\n\n        should.throws(() => {\n            jeso.match({\n                $eval: [\n                    {\n                        '|>$add': 200,\n                    },\n                    obj,\n                ],\n            });\n        }, 'ValidationError: The query \"_.each(->add(?)).key1\" should be 2000, but 2200 given.');\n\n        let a;\n\n        typeof a === ''\n\n        should.throws(() => {\n            jeso.match({\n                $eval: [\n                    ['$keys', '$size'],\n                    {\n                        $neq: 4,\n                    },\n                ],\n            });\n        }, 'ValidationError: The query \"keys().size()\" should not be 4, but 4 given.');\n    });\n});\n"]}