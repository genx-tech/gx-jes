{"version":3,"sources":["../../src/config.js"],"names":["validatorHandlers","mapOfValidators","processorHandlers","mapOfProcessors","config","addValidatorToMap","tokens","tag","handler","forEach","op","InvalidArgument","addProcessorToMap","isUnary","unary","overrideProcessor","overrideValidator","getValidatorTag","getValidator","getProcessorTagAndType","getProcessor","loadMessages","messages"],"mappings":";;;;;;;;;AAAA;;AAEA,MAAMA,iBAAiB,GAAG,EAA1B;AACA,MAAMC,eAAe,GAAG,EAAxB;AAEA,MAAMC,iBAAiB,GAAG,EAA1B;AACA,MAAMC,eAAe,GAAG,EAAxB;AAGA,MAAMC,MAAM,GAAG;AACXC,EAAAA,iBAAiB,EAAE,CAACC,MAAD,EAASC,GAAT,EAAcC,OAAd,KAA0B;AACzCF,IAAAA,MAAM,CAACG,OAAP,CAAgBC,EAAD,IAAQ;AACnB,UAAIA,EAAE,IAAIT,eAAV,EAA2B;AACvB,cAAM,IAAIU,sBAAJ,CACD,iCAAgCD,EAAG,EADlC,EAEF;AACIA,UAAAA,EADJ;AAEIH,UAAAA;AAFJ,SAFE,CAAN;AAOH;;AACDN,MAAAA,eAAe,CAACS,EAAD,CAAf,GAAsBH,GAAtB;AACH,KAXD;;AAaA,QAAIA,GAAG,IAAIP,iBAAX,EAA8B;AAC1B,YAAM,IAAIW,sBAAJ,CACD,qCAAoCJ,GAAI,EADvC,CAAN;AAGH;;AAEDP,IAAAA,iBAAiB,CAACO,GAAD,CAAjB,GAAyBC,OAAzB;AACH,GAtBU;AAuBXI,EAAAA,iBAAiB,EAAE,CAACN,MAAD,EAASC,GAAT,EAAcM,OAAd,EAAuBL,OAAvB,KAAmC;AAClD,QAAI,OAAOK,OAAP,KAAmB,UAAnB,IAAiCL,OAAO,IAAI,IAAhD,EAAsD;AAClDA,MAAAA,OAAO,GAAGK,OAAV;AACAA,MAAAA,OAAO,GAAG,KAAV;AACH;;AAEDP,IAAAA,MAAM,CAACG,OAAP,CAAgBC,EAAD,IAAQ;AACnB,UAAIA,EAAE,IAAIP,eAAV,EAA2B;AACvB,cAAM,IAAIQ,sBAAJ,CACD,iCAAgCD,EAAG,EADlC,EAEF;AACIA,UAAAA,EADJ;AAEIH,UAAAA,GAFJ;AAGIO,UAAAA,KAAK,EAAED;AAHX,SAFE,CAAN;AAQH;;AACDV,MAAAA,eAAe,CAACO,EAAD,CAAf,GAAsB,CAACH,GAAD,EAAMM,OAAN,CAAtB;AACH,KAZD;;AAcA,QAAIN,GAAG,IAAIL,iBAAX,EAA8B;AAC1B,YAAM,IAAIS,sBAAJ,CACD,qCAAoCJ,GAAI,EADvC,CAAN;AAGH;;AAEDL,IAAAA,iBAAiB,CAACK,GAAD,CAAjB,GAAyBC,OAAzB;AACH,GAlDU;AAmDXO,EAAAA,iBAAiB,EAAE,CAACR,GAAD,EAAMC,OAAN,KAAkB;AACjCN,IAAAA,iBAAiB,CAACK,GAAD,CAAjB,GAAyBC,OAAzB;AACH,GArDU;AAsDXQ,EAAAA,iBAAiB,EAAE,CAACT,GAAD,EAAMC,OAAN,KAAkB;AACjCR,IAAAA,iBAAiB,CAACO,GAAD,CAAjB,GAAyBC,OAAzB;AACH,GAxDU;AA0DXS,EAAAA,eAAe,EAAGP,EAAD,IAAQT,eAAe,CAACS,EAAD,CA1D7B;AA2DXQ,EAAAA,YAAY,EAAGX,GAAD,IAASP,iBAAiB,CAACO,GAAD,CA3D7B;AA6DXY,EAAAA,sBAAsB,EAAGT,EAAD,IAAQP,eAAe,CAACO,EAAD,CA7DpC;AA8DXU,EAAAA,YAAY,EAAGb,GAAD,IAASL,iBAAiB,CAACK,GAAD,CA9D7B;AA+DXc,EAAAA,YAAY,EAAGC,QAAD,IAAelB,MAAM,CAACkB,QAAP,GAAkBA;AA/DpC,CAAf;eAkEelB,M","sourcesContent":["import { InvalidArgument } from '@genx/error';\n\nconst validatorHandlers = {};\nconst mapOfValidators = {};\n\nconst processorHandlers = {};\nconst mapOfProcessors = {};\n\n//JSON Expression Syntax Runtime Configuration\nconst config = {\n    addValidatorToMap: (tokens, tag, handler) => {\n        tokens.forEach((op) => {\n            if (op in mapOfValidators) {\n                throw new InvalidArgument(\n                    `Duplicate validator operator: ${op}`,\n                    {\n                        op,\n                        tag,\n                    }\n                );\n            }\n            mapOfValidators[op] = tag;\n        });\n\n        if (tag in validatorHandlers) {\n            throw new InvalidArgument(\n                `Duplicate handler for validation: ${tag}`\n            );\n        }\n\n        validatorHandlers[tag] = handler;\n    },\n    addProcessorToMap: (tokens, tag, isUnary, handler) => {\n        if (typeof isUnary === 'function' && handler == null) {\n            handler = isUnary;\n            isUnary = false;\n        }\n\n        tokens.forEach((op) => {\n            if (op in mapOfProcessors) {\n                throw new InvalidArgument(\n                    `Duplicate processor operator: ${op}`,\n                    {\n                        op,\n                        tag,\n                        unary: isUnary,\n                    }\n                );\n            }\n            mapOfProcessors[op] = [tag, isUnary];\n        });\n\n        if (tag in processorHandlers) {\n            throw new InvalidArgument(\n                `Duplicate handler for processing: ${tag}`\n            );\n        }\n\n        processorHandlers[tag] = handler;\n    },\n    overrideProcessor: (tag, handler) => {\n        processorHandlers[tag] = handler;\n    },\n    overrideValidator: (tag, handler) => {\n        validatorHandlers[tag] = handler;\n    },\n\n    getValidatorTag: (op) => mapOfValidators[op],\n    getValidator: (tag) => validatorHandlers[tag],\n\n    getProcessorTagAndType: (op) => mapOfProcessors[op],\n    getProcessor: (tag) => processorHandlers[tag],\n    loadMessages: (messages) => (config.messages = messages),\n};\n\nexport default config;\n"],"file":"config.js"}