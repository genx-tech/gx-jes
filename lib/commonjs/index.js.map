{"version":3,"sources":["../../src/index.js"],"names":["JES","constructor","value","match","expected","evaluate","expr","update","config","actual","expectedJES","reason","throwError","abortEarly","plainError","transform"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAMA,MAAMA,GAAN,CAAU;AAmBNC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACH;;AAQDC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACZ,6BAAS,KAAKF,KAAd,EAAqBE,QAArB;AACA,WAAO,IAAP;AACH;;AAMDC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACX,WAAO,2BAAU,KAAKJ,KAAf,EAAsBI,IAAtB,CAAP;AACH;;AAODC,EAAAA,MAAM,CAACD,IAAD,EAAO;AACT,SAAKJ,KAAL,GAAa,2BAAU,KAAKA,KAAf,EAAsBI,IAAtB,CAAb;AACA,WAAO,IAAP;AACH;;AAlDK;;gBAAJN,G,YACcQ,e;;gBADdR,G,WAEa,CAACS,MAAD,EAASC,WAAT,KAAyB;AACpC,QAAMC,MAAM,GAAG,yBAASF,MAAT,EAAiBC,WAAjB,EAA8B;AACzCE,IAAAA,UAAU,EAAE,KAD6B;AAEzCC,IAAAA,UAAU,EAAE,IAF6B;AAGzCC,IAAAA,UAAU,EAAE;AAH6B,GAA9B,CAAf;;AAKA,MAAIH,MAAM,KAAK,IAAf,EAAqB;AACjB,WAAO,CAAC,IAAD,CAAP;AACH;;AAED,SAAO,CAAC,KAAD,EAAQA,MAAR,CAAP;AACH,C;;gBAbCX,G,cAcgBe,qB;;eAuCPf,G","sourcesContent":["import config from './config';\nimport validate from './validators';\nimport transform from './transformers';\n\n/**\n * JSON Expression Syntax Object\n * @class\n */\nclass JES {\n    static config = config;\n    static match = (actual, expectedJES) => {\n        const reason = validate(actual, expectedJES, {\n            throwError: false,\n            abortEarly: true,\n            plainError: true,\n        });\n        if (reason === true) {\n            return [true];\n        }\n\n        return [false, reason];\n    };\n    static evaluate = transform;\n\n    /**\n     * @param {object} value\n     */\n    constructor(value) {\n        this.value = value;\n    }\n\n    /**\n     * Match the value with expected conditions in JSON expression\n     * @param {object} expected - JSON match expression\n     * @throws ValidationError\n     * @returns {JES}\n     */\n    match(expected) {\n        validate(this.value, expected);\n        return this;\n    }\n\n    /**\n     * Evaluate a JSON expression against the value\n     * @param {object} - JSON operation expression\n     */\n    evaluate(expr) {\n        return transform(this.value, expr);\n    }\n\n    /**\n     * Evaluate a JSON expression against the value and update the value\n     * @param {object} - JSON operation expression\n     * @returns {JES}\n     */\n    update(expr) {\n        this.value = transform(this.value, expr);\n        return this;\n    }\n}\n\nexport default JES;\n"],"file":"index.js"}