{"version":3,"sources":["index.js"],"names":["PFX_FOR_EACH","PFX_WITH_ANY","MSG","config","messages","OP_EQUAL","OP_NOT_EQUAL","OP_NOT","OP_GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","OP_LESS_THAN","OP_LESS_THAN_OR_EQUAL","OP_IN","OP_NOT_IN","OP_EXISTS","OP_MATCH","OP_MATCH_ANY","OP_TYPE","OP_HAS_KEYS","OP_START_WITH","OP_END_WITH","OP_SIZE","OP_SUM","OP_KEYS","OP_VALUES","OP_ENTRIES","OP_GET_TYPE","OP_CAST_ARRAY","OP_ADD","OP_SUB","OP_MUL","OP_DIV","OP_SET","OP_ADD_ITEM","OP_ASSIGN","OP_PICK","OP_GET_BY_INDEX","OP_GET_BY_KEY","OP_OMIT","OP_GROUP","OP_SORT","OP_REVERSE","OP_EVAL","OP_JOIN","OP_MERGE","OP_FILTER","OP_REMAP","OP_TO_JSON","OP_TO_OBJ","OP_IF","addValidatorToMap","left","right","args","test","Array","isArray","InvalidArgument","OPERAND_NOT_ARRAY","equal","getValidator","find","element","notEqual","every","OPERAND_NOT_BOOL","prefix","context","rule","r","match","matched","$$ERROR","found","OPERAND_NOT_STRING","toLowerCase","key","startsWith","endsWith","length","OPERAND_NOT_TUPLE","evaluated","evaluateExpr","addProcessorToMap","sum","item","value","undefined","VALUE_NOT_COLLECTION","concat","$$PARENT","$$CURRENT","VALUE_NOT_OBJECT","OPERAND_NOT_OBJECT","rightValue","expr","formatPrefix","x","leftt","toString","join","reduce","result","Object","assign","OPERAND_NOT_TUPLE_2_OR_3","condition","ret","JSON","stringify","parse","getUnmatchedExplanation","op","name","leftValue","getter","validationErrors","tag","opValue","handler","INVALID_VALIDATOR_HANDLER","evaluate","getProcessor","INVALID_PROCESSOR_HANDLER","evaluateUnary","evaluateByOpMeta","currentValue","opMeta","validateCollection","actual","collectionOp","expectedFieldValue","unmatchedKey","INVALID_COLLECTION_OP","evaluateCollection","_map","_mapValues","i","expected","passObjectCheck","fieldName","l","substr","getValidatorTag","INVALID_VALIDATION_OP","matchResult","actualType","actualFieldValue","ok","reason","setOp","map","exprItem","typeExpr","SYNTAX_NUMBER_AS_EXPR","pos","indexOf","getProcessorTagAndType","INVALID_PROCESSING_OP","REQUIRE_RIGHT_OPERAND","SYNTAX_INVALID_EXPR","$$ROOT","hasOperator","SYNTAX_OP_NOT_ALONE","compleyKey","childFieldValue","JES","constructor","ValidationError","update"],"mappings":"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","sourcesContent":["// JSON Expression Syntax (JES)\nimport _isEqual from 'lodash/isEqual';\nimport _isInteger from 'lodash/isInteger';\nimport _has from 'lodash/has';\nimport _size from 'lodash/size';\nimport _reduce from 'lodash/reduce';\nimport _reverse from 'lodash/reverse';\nimport _keys from 'lodash/keys';\nimport _values from 'lodash/values';\nimport _castArray from 'lodash/castArray';\nimport _pick from 'lodash/pick';\nimport _pickBy from 'lodash/pickBy';\nimport _nth from 'lodash/nth';\nimport _omit from 'lodash/omit';\nimport _omitBy from 'lodash/omitBy';\nimport _groupBy from 'lodash/groupBy';\nimport _sortBy from 'lodash/sortBy';\nimport _filter from 'lodash/filter';\nimport _map from 'lodash/map';\nimport _mapValues from 'lodash/mapValues';\nimport _find from 'lodash/find';\nimport _findIndex from 'lodash/findIndex';\n\nimport { ValidationError, InvalidArgument } from '@genx/error';\nimport { remap, isPlainObject, get as _get, set as _set } from '@genx/july';\n\nimport config from './config';\nimport './locale/msg.en-US';\n\nconst PFX_FOR_EACH = '|>'; // map each\nconst PFX_WITH_ANY = '|*'; // with any\n\nconst MSG = config.messages;\n\n//Validators\nconst OP_EQUAL = ['$eq', '$eql', '$equal'];\nconst OP_NOT_EQUAL = ['$ne', '$neq', '$notEqual'];\nconst OP_NOT = ['$not'];\nconst OP_GREATER_THAN = ['$gt', '$>', '$greaterThan'];\nconst OP_GREATER_THAN_OR_EQUAL = ['$gte', '$>=', '$greaterThanOrEqual'];\nconst OP_LESS_THAN = ['$lt', '$<', '$lessThan'];\nconst OP_LESS_THAN_OR_EQUAL = ['$lte', '$<=', '$lessThanOrEqual'];\n\nconst OP_IN = ['$in'];\nconst OP_NOT_IN = ['$nin', '$notIn'];\nconst OP_EXISTS = ['$exist', '$exists', '$notNull'];\nconst OP_MATCH = ['$has', '$match', '$all'];\nconst OP_MATCH_ANY = ['$any', '$or', '$either'];\nconst OP_TYPE = ['$is', '$typeOf'];\nconst OP_HAS_KEYS = ['$hasKey', '$hasKeys', '$withKey', '$withKeys'];\nconst OP_START_WITH = ['$startWith', '$startsWith'];\nconst OP_END_WITH = ['$endWith', '$endsWith'];\n\n//OP_EVAL\n\n//Query & aggregate processors\nconst OP_SIZE = ['$size', '$length', '$count'];\nconst OP_SUM = ['$sum', '$total'];\nconst OP_KEYS = ['$keys'];\nconst OP_VALUES = ['$values'];\nconst OP_ENTRIES = ['$entries', '$toArray'];\nconst OP_GET_TYPE = ['$type'];\nconst OP_CAST_ARRAY = ['$castArray'];\n\n//Manipulate processors\nconst OP_ADD = ['$add', '$plus', '$inc'];\nconst OP_SUB = ['$sub', '$subtract', '$minus', '$dec'];\nconst OP_MUL = ['$mul', '$multiply', '$times'];\nconst OP_DIV = ['$div', '$divide'];\nconst OP_SET = ['$set', '$=', '$value'];\nconst OP_ADD_ITEM = ['$addItem', '$override'];\nconst OP_ASSIGN = ['$assign', '$addFields'];\n\nconst OP_PICK = ['$pick'];\nconst OP_GET_BY_INDEX = ['$at', '$getByIndex', '$nth'];\nconst OP_GET_BY_KEY = ['$of', '$getByKey'];\nconst OP_OMIT = ['$omit']; // filter by key\nconst OP_GROUP = ['$group', '$groupBy'];\nconst OP_SORT = ['$sort', '$orderBy', '$sortBy'];\nconst OP_REVERSE = ['$reverse'];\nconst OP_EVAL = ['$eval', '$apply'];\nconst OP_JOIN = ['$join'];\nconst OP_MERGE = ['$merge'];\nconst OP_FILTER = ['$filter', '$select']; // filter by value\nconst OP_REMAP = ['$remap', '$mapKeys'];\nconst OP_TO_JSON = ['$json', '$toJSON', '$stringify'];\nconst OP_TO_OBJ = ['$object', '$parseJSON'];\n\n//Condition processors\nconst OP_IF = ['$if'];\n\nconfig.addValidatorToMap(OP_EQUAL, 'OP_EQUAL', (left, right) =>\n    _isEqual(left, right)\n);\nconfig.addValidatorToMap(\n    OP_NOT_EQUAL,\n    'OP_NOT_EQUAL',\n    (left, right) => !_isEqual(left, right)\n);\nconfig.addValidatorToMap(\n    OP_NOT,\n    'OP_NOT',\n    (left, ...args) => !test(left, 'OP_MATCH', ...args)\n);\nconfig.addValidatorToMap(\n    OP_GREATER_THAN,\n    'OP_GREATER_THAN',\n    (left, right) => left > right\n);\nconfig.addValidatorToMap(\n    OP_GREATER_THAN_OR_EQUAL,\n    'OP_GREATER_THAN_OR_EQUAL',\n    (left, right) => left >= right\n);\nconfig.addValidatorToMap(\n    OP_LESS_THAN,\n    'OP_LESS_THAN',\n    (left, right) => left < right\n);\nconfig.addValidatorToMap(\n    OP_LESS_THAN_OR_EQUAL,\n    'OP_LESS_THAN_OR_EQUAL',\n    (left, right) => left <= right\n);\nconfig.addValidatorToMap(OP_IN, 'OP_IN', (left, right) => {\n    if (right == null) return false;\n    if (!Array.isArray(right)) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_IN'));\n    }\n\n    const equal = config.getValidator('OP_EQUAL');\n    return right.find((element) => equal(left, element));\n});\nconfig.addValidatorToMap(OP_NOT_IN, 'OP_NOT_IN', (left, right) => {\n    if (right == null) return true;\n    if (!Array.isArray(right)) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_NOT_IN'));\n    }\n\n    const notEqual = config.getValidator('OP_NOT_EQUAL');\n\n    return right.every((element) => notEqual(left, element));\n});\nconfig.addValidatorToMap(OP_EXISTS, 'OP_EXISTS', (left, right) => {\n    if (typeof right !== 'boolean') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_BOOL('OP_EXISTS'));\n    }\n\n    return right ? left != null : left == null;\n});\nconfig.addValidatorToMap(\n    OP_MATCH,\n    'OP_MATCH',\n    (left, right, prefix, context) => {\n        if (Array.isArray(right)) {\n            return right.every((rule) => {\n                const r = match(left, rule, prefix);\n                return r[0];\n            });\n        }\n\n        const r = match(left, right, prefix);\n        const matched = r[0];\n\n        if (!matched && context) {\n            context.$$ERROR = r[1];\n        }\n\n        return matched;\n    }\n);\nconfig.addValidatorToMap(\n    OP_MATCH_ANY,\n    'OP_MATCH_ANY',\n    (left, right, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_MATCH_ANY'));\n        }\n\n        let found = right.find((rule) => {\n            const r = match(left, rule, prefix);\n            const matched = r[0];\n\n            if (!matched && context) {\n                context.$$ERROR = r[1];\n            }\n\n            return matched;\n        });\n\n        return found ? true : false;\n    }\n);\nconfig.addValidatorToMap(OP_TYPE, 'OP_TYPE', (left, right) => {\n    if (typeof right !== 'string') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_STRING('OP_TYPE'));\n    }\n\n    right = right.toLowerCase();\n\n    if (right === 'array') {\n        return Array.isArray(left);\n    }\n\n    if (right === 'integer') {\n        return _isInteger(left);\n    }\n\n    if (right === 'text') {\n        return typeof left === 'string';\n    }\n\n    return typeof left === right;\n});\nconfig.addValidatorToMap(OP_HAS_KEYS, 'OP_HAS_KEYS', (left, right) => {\n    if (typeof left !== 'object') return false;\n\n    return Array.isArray(right)\n        ? right.every((key) => _has(left, key))\n        : _has(left, right);\n});\nconfig.addValidatorToMap(OP_START_WITH, 'OP_START_WITH', (left, right) => {\n    if (typeof left !== 'string') return false;\n    if (typeof right !== 'string') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_STRING('OP_START_WITH'));\n    }\n\n    return left.startsWith(right);\n});\nconfig.addValidatorToMap(OP_END_WITH, 'OP_END_WITH', (left, right) => {\n    if (typeof left !== 'string') return false;\n    if (typeof right !== 'string') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_STRING('OP_END_WITH'));\n    }\n\n    return left.endsWith(right);\n});\n//embedded processors in validation pipeline\nconfig.addValidatorToMap(OP_EVAL, 'OP_EVAL', (left, right, prefix, context) => {\n    if (!Array.isArray(right) || right.length !== 2) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE('OP_EVAL'));\n    }\n\n    const evaluated = evaluateExpr(left, right[0], prefix);\n\n    const r = match(evaluated, right[1], prefix);\n    const matched = r[0];\n\n    if (!matched && context) {\n        context.$$ERROR = r[1];\n    }\n\n    return matched;\n});\n\n// [ <op name>, <unary> ]\nconfig.addProcessorToMap(OP_SIZE, 'OP_SIZE', true, (left) => _size(left));\nconfig.addProcessorToMap(OP_SUM, 'OP_SUM', true, (left) =>\n    _reduce(\n        left,\n        (sum, item) => {\n            sum += item;\n            return sum;\n        },\n        0\n    )\n);\nconfig.addProcessorToMap(OP_KEYS, 'OP_KEYS', true, (left) => _keys(left));\nconfig.addProcessorToMap(OP_VALUES, 'OP_VALUES', true, (left) => _values(left));\nconfig.addProcessorToMap(OP_ENTRIES, 'OP_ENTRIES', true, (left) =>\n    _map(left, (value, key) => ({ key, value }))\n);\nconfig.addProcessorToMap(OP_CAST_ARRAY, 'OP_CAST_ARRAY', true, (left) =>\n    left == null ? null : Array.isArray(left) ? left : [left]\n);\nconfig.addProcessorToMap(OP_GET_TYPE, 'OP_GET_TYPE', true, (left) =>\n    Array.isArray(left) ? 'array' : _isInteger(left) ? 'integer' : typeof left\n);\nconfig.addProcessorToMap(OP_REVERSE, 'OP_REVERSE', true, (left) =>\n    _reverse(left)\n);\n\nconfig.addProcessorToMap(\n    OP_ADD,\n    'OP_ADD',\n    false,\n    (left, right) => left + right\n);\nconfig.addProcessorToMap(\n    OP_SUB,\n    'OP_SUB',\n    false,\n    (left, right) => left - right\n);\nconfig.addProcessorToMap(\n    OP_MUL,\n    'OP_MUL',\n    false,\n    (left, right) => left * right\n);\nconfig.addProcessorToMap(\n    OP_DIV,\n    'OP_DIV',\n    false,\n    (left, right) => left / right\n);\nconfig.addProcessorToMap(\n    OP_SET,\n    'OP_SET',\n    false,\n    (left, right, prefix, context) =>\n        evaluateExpr(undefined, right, prefix, context, true)\n);\nconfig.addProcessorToMap(\n    OP_ADD_ITEM,\n    'OP_ADD_ITEM',\n    false,\n    (left, right, prefix, context) => {\n        if (typeof left !== 'object') {\n            throw new InvalidArgument(MSG.VALUE_NOT_COLLECTION('OP_ADD_ITEM'));\n        }\n\n        if (Array.isArray(left)) {\n            return left.concat(right);\n        }\n\n        if (!Array.isArray(right) || right.length !== 2) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE('OP_ADD_ITEM'));\n        }\n\n        return {\n            ...left,\n            [right[0]]: evaluateExpr(left, right[1], prefix, {\n                ...context,\n                $$PARENT: context.$$CURRENT,\n                $$CURRENT: left,\n            }),\n        };\n    }\n);\nconfig.addProcessorToMap(\n    OP_ASSIGN,\n    'OP_ASSIGN',\n    false,\n    (left, right, prefix, context) => {\n        if (!isPlainObject(left)) {\n            if (left == null) {\n                left = {};\n            } else {\n                throw new InvalidArgument(MSG.VALUE_NOT_OBJECT('OP_ASSIGN'));\n            }\n        }\n\n        if (!isPlainObject(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_OBJECT('OP_ASSIGN'));\n        }\n\n        const rightValue = _mapValues(right, (expr, key) =>\n            evaluateExpr(left[key], expr, MSG.formatPrefix(key, prefix), {\n                ...context,\n                $$PARENT: left,\n                $$CURRENT: left[key],\n            })\n        );\n\n        return { ...left, ...rightValue };\n    }\n);\nconfig.addProcessorToMap(OP_PICK, 'OP_PICK', false, (left, right, prefix) => {\n    if (left == null) return null;\n\n    if (typeof right !== 'object') {\n        right = _castArray(right);\n    }\n\n    if (Array.isArray(right)) {\n        return _pick(left, right);\n    }\n\n    return _pickBy(\n        left,\n        (x, key) => match(key, right, MSG.formatPrefix(key, prefix))[0]\n    );\n});\nconfig.addProcessorToMap(\n    OP_GET_BY_INDEX,\n    'OP_GET_BY_INDEX',\n    false,\n    (left, right) => _nth(left, right)\n);\nconfig.addProcessorToMap(OP_GET_BY_KEY, 'OP_GET_BY_KEY', false, (left, right) =>\n    _get(left, right)\n);\nconfig.addProcessorToMap(OP_OMIT, 'OP_OMIT', false, (left, right, prefix) => {\n    if (left == null) return null;\n\n    if (typeof right !== 'object') {\n        right = _castArray(right);\n    }\n\n    if (Array.isArray(right)) {\n        return _omit(left, right);\n    }\n\n    return _omitBy(\n        left,\n        (x, key) => match(key, right, MSG.formatPrefix(key, prefix))[0]\n    );\n});\nconfig.addProcessorToMap(OP_GROUP, 'OP_GROUP', false, (left, right) =>\n    _groupBy(left, right)\n);\nconfig.addProcessorToMap(OP_SORT, 'OP_SORT', false, (left, right) =>\n    _sortBy(left, right)\n);\nconfig.addProcessorToMap(OP_EVAL, 'OP_EVAL', false, evaluateExpr);\nconfig.addProcessorToMap(OP_JOIN, 'OP_JOIN', false, (left, right) => {\n    if (left == null) return null;\n    if (!Array.isArray(left)) {\n        return leftt.toString();\n    }\n    return left.join(right.toString());\n});\nconfig.addProcessorToMap(\n    OP_MERGE,\n    'OP_MERGE',\n    false,\n    (left, right, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_MERGE'));\n        }\n\n        return right.reduce(\n            (result, expr, key) =>\n                Object.assign(\n                    result,\n                    evaluateExpr(left, expr, MSG.formatPrefix(key, prefix), {\n                        ...context,\n                    })\n                ),\n            {}\n        );\n    }\n);\nconfig.addProcessorToMap(OP_FILTER, 'OP_FILTER', false, (\n    left,\n    right,\n    prefix /*, context*/\n) => {\n    if (left == null) return null;\n\n    if (typeof left !== 'object') {\n        throw new InvalidArgument(MSG.VALUE_NOT_COLLECTION('OP_FILTER'));\n    }\n\n    return _filter(left, (value, key) =>\n        test(value, 'OP_MATCH', right, MSG.formatPrefix(key, prefix))\n    );\n});\nconfig.addProcessorToMap(OP_REMAP, 'OP_REMAP', false, (\n    left,\n    right /*, prefix, context*/\n) => {\n    if (left == null) return null;\n\n    if (typeof left !== 'object') {\n        throw new InvalidArgument(MSG.VALUE_NOT_COLLECTION('OP_REMAP'));\n    }\n\n    if (Array.isArray(right)) {\n        if (right.length !== 2) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE('OP_REMAP'));\n        }\n\n        return remap(left, right[0], right[1]);\n    }\n\n    if (!isPlainObject(right)) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_OBJECT('OP_REMAP'));\n    }\n\n    return remap(left, right);\n});\nconfig.addProcessorToMap(\n    OP_IF,\n    'OP_IF',\n    false,\n    (left, right, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_IF'));\n        }\n\n        if (right.length < 2 || right.length > 3) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE_2_OR_3('OP_IF'));\n        }\n\n        const condition = evaluateExpr(\n            undefined,\n            right[0],\n            prefix,\n            context,\n            true\n        );\n\n        if (test(left, 'OP_MATCH', condition, prefix)) {\n            return evaluateExpr(left, right[1], prefix, context);\n        } else if (right.length > 2) {\n            const ret = evaluateExpr(left, right[2], prefix, context);\n            return ret;\n        }\n\n        return left;\n    }\n);\n//embeded validators in processing pipeline\nconfig.addProcessorToMap(OP_MATCH, 'OP_MATCH', false, (left, right, prefix) => {\n    return test(left, 'OP_MATCH', right, prefix);\n});\n\nconfig.addProcessorToMap(OP_TO_JSON, 'OP_TO_JSON', true, (left) =>\n    left == null ? left : JSON.stringify(left)\n);\nconfig.addProcessorToMap(OP_TO_OBJ, 'OP_TO_OBJ', true, (left) =>\n    left == null ? left : JSON.parse(left)\n);\n\nfunction getUnmatchedExplanation(\n    op,\n    name,\n    leftValue,\n    rightValue,\n    prefix,\n    context\n) {\n    if (context && context.$$ERROR) return context.$$ERROR;\n\n    const getter = MSG.validationErrors[op] || MSG.validationErrors.OP_MATCH;\n    return getter(name, leftValue, rightValue, prefix);\n}\n\nfunction test(value, tag, opValue, prefix, context) {\n    const handler = config.getValidator(tag);\n\n    if (!handler) {\n        throw new InvalidArgument(MSG.INVALID_VALIDATOR_HANDLER(tag));\n    }\n\n    return handler(value, opValue, prefix, context);\n}\n\nfunction evaluate(value, tag, opValue, prefix, context) {\n    const handler = config.getProcessor(tag);\n\n    if (!handler) {\n        throw new InvalidArgument(MSG.INVALID_PROCESSOR_HANDLER(tag));\n    }\n\n    return handler(value, opValue, prefix, context);\n}\n\nfunction evaluateUnary(value, tag, prefix, context) {\n    const handler = config.getProcessor(tag);\n\n    if (!handler) {\n        throw new InvalidArgument(MSG.INVALID_PROCESSOR_HANDLER(tag));\n    }\n\n    return handler(value, prefix, context);\n}\n\nfunction evaluateByOpMeta(currentValue, rightValue, opMeta, prefix, context) {\n    if (opMeta[1]) {\n        return rightValue\n            ? evaluateUnary(currentValue, opMeta[0], prefix)\n            : currentValue;\n    }\n\n    return evaluate(currentValue, opMeta[0], rightValue, prefix, context);\n}\n\nfunction validateCollection(\n    actual,\n    collectionOp,\n    op,\n    expectedFieldValue,\n    prefix\n) {\n    const context = {};\n\n    switch (collectionOp) {\n        case PFX_FOR_EACH: {\n            const unmatchedKey = _findIndex(\n                actual,\n                (item) => !test(item, op, expectedFieldValue, prefix, context)\n            );\n\n            if (unmatchedKey !== -1) {\n                return [\n                    false,\n                    getUnmatchedExplanation(\n                        op,\n                        unmatchedKey,\n                        actual[unmatchedKey],\n                        expectedFieldValue,\n                        prefix,\n                        context\n                    ),\n                ];\n            }\n            break;\n        }\n\n        case PFX_WITH_ANY: {\n            const matched = _find(actual, (item) =>\n                test(item, op, expectedFieldValue, prefix, context)\n            );\n\n            if (!matched) {\n                return [\n                    false,\n                    getUnmatchedExplanation(\n                        op,\n                        null,\n                        actual,\n                        expectedFieldValue,\n                        prefix,\n                        context\n                    ),\n                ];\n            }\n            break;\n        }\n\n        default:\n            throw new InvalidArgument(MSG.INVALID_COLLECTION_OP(collectionOp));\n    }\n\n    return undefined;\n}\n\nfunction evaluateCollection(\n    currentValue,\n    collectionOp,\n    opMeta,\n    expectedFieldValue,\n    prefix,\n    context\n) {\n    switch (collectionOp) {\n        case PFX_FOR_EACH:\n            return (Array.isArray(currentValue)\n                ? _map\n                : _mapValues)(currentValue, (item, i) =>\n                evaluateByOpMeta(\n                    item,\n                    expectedFieldValue,\n                    opMeta,\n                    MSG.formatPrefix(i, prefix),\n                    { ...context, $$PARENT: currentValue, $$CURRENT: item }\n                )\n            );\n\n        default:\n            throw new InvalidArgument(MSG.INVALID_COLLECTION_OP(collectionOp));\n    }\n}\n\n/**\n * Validate the given object with JSON Expression Syntax (JES)\n * @param {*} actual - The object to match\n * @param {*} expected - Expected state in JSON Expression Syntax\n * @param {*} prefix - Tracking path\n *\n * { key: { $match } }\n */\nfunction match(actual, expected, prefix) {\n    let passObjectCheck = false;\n\n    if (!isPlainObject(expected)) {\n        if (!test(actual, 'OP_EQUAL', expected, prefix)) {\n            return [\n                false,\n                MSG.validationErrors.OP_EQUAL(null, actual, expected, prefix),\n            ];\n        }\n\n        return [true];\n    }\n\n    for (let fieldName in expected) {\n        let expectedFieldValue = expected[fieldName];\n\n        const l = fieldName.length;\n\n        if (l > 1) {\n            if (l > 3 && fieldName[0] === '|' && fieldName[2] === '$') {\n                //validators\n                const collectionOp = fieldName.substr(0, 2);\n                fieldName = fieldName.substr(2);\n\n                const op = config.getValidatorTag(fieldName);\n                if (!op) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_VALIDATION_OP(fieldName)\n                    );\n                }\n\n                const matchResult = validateCollection(\n                    actual,\n                    collectionOp,\n                    op,\n                    expectedFieldValue,\n                    prefix\n                );\n                if (matchResult) return matchResult;\n                continue;\n            }\n\n            if (fieldName[0] === '$') {\n                //validator\n                const op = config.getValidatorTag(fieldName);\n                if (!op) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_VALIDATION_OP(fieldName)\n                    );\n                }\n\n                const context = {};\n\n                if (!test(actual, op, expectedFieldValue, prefix, context)) {\n                    return [\n                        false,\n                        getUnmatchedExplanation(\n                            op,\n                            null,\n                            actual,\n                            expectedFieldValue,\n                            prefix,\n                            context\n                        ),\n                    ];\n                }\n\n                continue;\n            }\n        }\n\n        if (!passObjectCheck) {\n            if (actual == null)\n                return [\n                    false,\n                    MSG.validationErrors.OP_EXISTS(null, null, true, prefix),\n                ];\n\n            const actualType = typeof actual;\n\n            if (actualType !== 'object')\n                return [\n                    false,\n                    MSG.validationErrors.OP_TYPE(\n                        null,\n                        actualType,\n                        'object',\n                        prefix\n                    ),\n                ];\n        }\n\n        passObjectCheck = true;\n\n        let actualFieldValue = _get(actual, fieldName);\n\n        if (\n            expectedFieldValue != null &&\n            typeof expectedFieldValue === 'object'\n        ) {\n            const [ok, reason] = match(\n                actualFieldValue,\n                expectedFieldValue,\n                MSG.formatPrefix(fieldName, prefix)\n            );\n            if (!ok) {\n                return [false, reason];\n            }\n        } else {\n            if (\n                !test(actualFieldValue, 'OP_EQUAL', expectedFieldValue, prefix)\n            ) {\n                return [\n                    false,\n                    MSG.validationErrors.OP_EQUAL(\n                        fieldName,\n                        actualFieldValue,\n                        expectedFieldValue,\n                        prefix\n                    ),\n                ];\n            }\n        }\n    }\n\n    return [true];\n}\n\n/**\n * If $ operator used, only one a time is allowed\n * e.g.\n * {\n *    $groupBy: 'key'\n * }\n *\n *\n * @param {*} currentValue\n * @param {*} expr\n * @param {*} prefix\n * @param {*} context\n * @param {boolean} setOp - Whether the expression is a setOp\n */\nfunction evaluateExpr(currentValue, expr, prefix, context, setOp) {\n    if (Array.isArray(expr)) {\n        if (setOp) {\n            return expr.map((item) =>\n                evaluateExpr(undefined, item, prefix, { ...context }, true)\n            );\n        }\n\n        return expr.reduce(\n            (result, exprItem) =>\n                evaluateExpr(result, exprItem, prefix, { ...context }),\n            currentValue\n        );\n    }\n\n    const typeExpr = typeof expr;\n\n    if (typeExpr === 'boolean') {\n        if (setOp) return expr;\n        return expr ? currentValue : undefined;\n    }\n\n    if (typeExpr === 'number' || typeExpr === 'bigint') {\n        if (setOp) return expr;\n\n        throw new InvalidArgument(MSG.SYNTAX_NUMBER_AS_EXPR);\n    }\n\n    if (typeExpr === 'string') {\n        if (expr.startsWith('$$')) {\n            //get from context\n            const pos = expr.indexOf('.');\n            if (pos === -1) {\n                return context[expr];\n            }\n\n            return _get(context[expr.substr(0, pos)], expr.substr(pos + 1));\n        }\n\n        if (setOp) {\n            return expr;\n        }\n\n        const opMeta = config.getProcessorTagAndType(expr);\n        if (!opMeta) {\n            throw new InvalidArgument(MSG.INVALID_PROCESSING_OP(expr));\n        }\n\n        if (!opMeta[1]) {\n            throw new InvalidArgument(MSG.REQUIRE_RIGHT_OPERAND(expr));\n        }\n\n        return evaluateUnary(currentValue, opMeta[0], prefix);\n    }\n\n    if (typeExpr !== 'object') {\n        throw new InvalidArgument(MSG.SYNTAX_INVALID_EXPR);\n    }\n\n    if (setOp) {\n        return _mapValues(expr, (item) =>\n            evaluateExpr(undefined, item, prefix, context, true)\n        );\n    }\n\n    if (context == null) {\n        context = {\n            $$ROOT: currentValue,\n            $$PARENT: null,\n            $$CURRENT: currentValue,\n        };\n    }\n\n    let result,\n        hasOperator = false;\n\n    for (let fieldName in expr) {\n        let expectedFieldValue = expr[fieldName];\n\n        const l = fieldName.length;\n\n        if (l > 1) {\n            if (fieldName[0] === '$') {\n                if (result) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                const opMeta = config.getProcessorTagAndType(fieldName);\n                if (!opMeta) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_PROCESSING_OP(fieldName)\n                    );\n                }\n\n                if (hasOperator) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                result = evaluateByOpMeta(\n                    currentValue,\n                    expectedFieldValue,\n                    opMeta,\n                    prefix,\n                    context\n                );\n                hasOperator = true;\n                continue;\n            }\n\n            if (l > 3 && fieldName[0] === '|' && fieldName[2] === '$') {\n                if (result) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                const collectionOp = fieldName.substr(0, 2);\n                fieldName = fieldName.substr(2);\n\n                const opMeta = config.getProcessorTagAndType(fieldName);\n                if (!opMeta) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_PROCESSING_OP(fieldName)\n                    );\n                }\n\n                if (hasOperator) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                result = evaluateCollection(\n                    currentValue,\n                    collectionOp,\n                    opMeta,\n                    expectedFieldValue,\n                    prefix,\n                    context\n                );\n                hasOperator = true;\n                continue;\n            }\n        }\n\n        if (hasOperator) {\n            throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n        }\n\n        let compleyKey = fieldName.indexOf('.') !== -1;\n\n        //pick a field and then apply manipulation\n        let actualFieldValue =\n            currentValue != null\n                ? compleyKey\n                    ? _get(currentValue, fieldName)\n                    : currentValue[fieldName]\n                : undefined;\n\n        const childFieldValue = evaluateExpr(\n            actualFieldValue,\n            expectedFieldValue,\n            MSG.formatPrefix(fieldName, prefix),\n            context\n        );\n\n        if (typeof childFieldValue !== 'undefined') {\n            result == null && (result = {});\n            if (compleyKey) {\n                _set(result, fieldName, childFieldValue);\n            } else {\n                result[fieldName] = childFieldValue;\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * JSON Expression Syntax Object\n * @class\n */\nclass JES {\n    static config = config;\n    static match = match;\n    static evaluate = evaluateExpr;\n\n    /**\n     * @param {object} value\n     */\n    constructor(value) {\n        this.value = value;\n    }\n\n    /**\n     * Match the value with expected conditions in JSON expression\n     * @param {object} expected - JSON match expression\n     * @throws ValidationError\n     * @returns {JES}\n     */\n    match(expected) {\n        const result = match(this.value, expected);\n        if (result[0]) return this;\n\n        throw new ValidationError(result[1], {\n            actual: this.value,\n            expected,\n        });\n    }\n\n    /**\n     * Evaluate a JSON expression against the value\n     * @param {object} - JSON operation expression\n     */\n    evaluate(expr) {\n        return evaluateExpr(this.value, expr);\n    }\n\n    /**\n     * Evaluate a JSON expression against the value and update the value\n     * @param {object} - JSON operation expression\n     * @returns {JES}\n     */\n    update(expr) {\n        this.value = evaluateExpr(this.value, expr);\n        return this;\n    }\n}\n\nexport default JES;\n"]}