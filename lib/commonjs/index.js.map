{"version":3,"sources":["index.js"],"names":["_isEqual","require","_isInteger","_has","_size","_reduce","_reverse","_keys","_values","_castArray","_pick","_pickBy","_get","_set","_nth","_omit","_omitBy","_groupBy","_sortBy","_filter","_map","_mapValues","_find","_findIndex","ValidationError","remap","isPlainObject","OP_EQUAL","OP_NOT_EQUAL","OP_NOT","OP_GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","OP_LESS_THAN","OP_LESS_THAN_OR_EQUAL","OP_IN","OP_NOT_IN","OP_EXISTS","OP_MATCH","OP_MATCH_ANY","OP_TYPE","OP_HAS_KEYS","OP_START_WITH","OP_END_WITH","OP_SIZE","OP_SUM","OP_KEYS","OP_VALUES","OP_GET_TYPE","OP_ADD","OP_SUB","OP_MUL","OP_DIV","OP_SET","OP_ADD_ITEM","OP_PICK","OP_GET_BY_INDEX","OP_GET_BY_KEY","OP_OMIT","OP_GROUP","OP_SORT","OP_REVERSE","OP_EVAL","OP_MERGE","OP_FILTER","OP_REMAP","OP_IF","PFX_FOR_EACH","PFX_WITH_ANY","MapOfOps","Map","addOpToMap","tokens","tag","forEach","token","set","MapOfMans","addManToMap","defaultJesHandlers","left","right","args","test","Array","isArray","Error","OPERAND_NOT_ARRAY","find","element","every","OPERAND_NOT_BOOL","OPERAND_NOT_STRING","toLowerCase","jes","prefix","rule","r","match","found","key","startsWith","endsWith","defaultManipulations","sum","item","context","evaluateExpr","undefined","VALUE_NOT_COLLECTION","concat","length","OPERAND_NOT_TUPLE","$$PARENT","$$CURRENT","x","formatPrefix","reduce","result","expr","Object","assign","value","OPERAND_NOT_TUPLE_2_OR_3","condition","ret","formatName","name","fullName","indexOf","formatKey","hasPrefix","formatQuery","opMeta","defaultQueryExplanations","formatMap","formatAny","defaultJesExplanations","JSON","stringify","join","getUnmatchedExplanation","op","leftValue","rightValue","getter","operatorExplanations","opValue","handler","operatorHandlers","INVALID_TEST_HANLDER","evaluate","queryHanlders","INVALID_QUERY_HANDLER","evaluateUnary","evaluateByOpMeta","currentValue","defaultCustomizer","mapOfOperators","mapOfManipulators","matchCollection","actual","collectionOp","operands","matchResult","nextPrefix","mapResult","map","i","INVALID_COLLECTION_OP","validateCollection","expectedFieldValue","unmatchedKey","matched","evaluateCollection","PRX_OP_NOT_FOR_EVAL","expected","passObjectCheck","fieldName","l","substr","get","INVALID_QUERY_OPERATOR","INVALID_TEST_OPERATOR","NOT_A_UNARY_QUERY","queryResult","actualType","actualFieldValue","ok","reason","setOp","exprItem","typeExpr","INVALID_EXPR_SYNTAX","pos","REQUIRE_RIGHT_OPERAND","$$ROOT","hasOperator","OPERATOR_NOT_ALONE","compleyKey","childFieldValue","JES","customizer","module","exports"],"mappings":"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","sourcesContent":["// JSON Expression Syntax (JES)\nconst _isEqual = require('lodash/isEqual');\nconst _isInteger = require('lodash/isInteger');\nconst _has = require('lodash/has');\nconst _size = require('lodash/size');\nconst _reduce = require('lodash/reduce');\nconst _reverse = require('lodash/reverse');\nconst _keys = require('lodash/keys');\nconst _values = require('lodash/values');\nconst _castArray = require('lodash/castArray');\nconst _pick = require('lodash/pick');\nconst _pickBy = require('lodash/pickBy');\nconst _get = require('lodash/get');\nconst _set = require('lodash/set');\nconst _nth = require('lodash/nth');\nconst _omit = require('lodash/omit');\nconst _omitBy = require('lodash/omitBy');\nconst _groupBy = require('lodash/groupBy');\nconst _sortBy = require('lodash/sortBy');\nconst _filter = require('lodash/filter');\nconst _map = require('lodash/map');\nconst _mapValues = require('lodash/mapValues');\nconst _find = require('lodash/find');\nconst _findIndex = require('lodash/findIndex');\nconst { ValidationError } = require('@genx/error');\nconst { remap, isPlainObject } = require('@genx/july');\n\n//Validation operator\nconst OP_EQUAL = ['$eq', '$eql', '$equal'];\nconst OP_NOT_EQUAL = ['$ne', '$neq', '$notEqual'];\nconst OP_NOT = ['$not'];\nconst OP_GREATER_THAN = ['$gt', '$>', '$greaterThan'];\nconst OP_GREATER_THAN_OR_EQUAL = ['$gte', '$<=', '$greaterThanOrEqual'];\nconst OP_LESS_THAN = ['$lt', '$<', '$lessThan'];\nconst OP_LESS_THAN_OR_EQUAL = ['$lte', '$<=', '$lessThanOrEqual'];\n\nconst OP_IN = ['$in'];\nconst OP_NOT_IN = ['$nin', '$notIn'];\nconst OP_EXISTS = ['$exist', '$exists', '$notNull'];\nconst OP_MATCH = ['$has', '$match', '$all'];\nconst OP_MATCH_ANY = ['$any', '$or', '$either'];\nconst OP_TYPE = ['$is', '$typeOf'];\nconst OP_HAS_KEYS = ['$hasKey', '$hasKeys', '$withKey', '$withKeys'];\nconst OP_START_WITH = ['$startWith', '$startsWith'];\nconst OP_END_WITH = ['$endWith', '$endsWith'];\n\n//Query & aggregate operator\nconst OP_SIZE = ['$size', '$length', '$count'];\nconst OP_SUM = ['$sum', '$total'];\nconst OP_KEYS = ['$keys'];\nconst OP_VALUES = ['$values'];\nconst OP_GET_TYPE = ['$type'];\n\n//Manipulate operation\nconst OP_ADD = ['$add', '$plus', '$inc'];\nconst OP_SUB = ['$sub', '$subtract', '$minus', '$dec'];\nconst OP_MUL = ['$mul', '$multiply', '$times'];\nconst OP_DIV = ['$div', '$divide'];\nconst OP_SET = ['$set', '$='];\nconst OP_ADD_ITEM = ['$addItem', '$override'];\n\nconst OP_PICK = ['$pick'];\nconst OP_GET_BY_INDEX = ['$at', '$getByIndex', '$nth'];\nconst OP_GET_BY_KEY = ['$of', '$getByKey'];\nconst OP_OMIT = ['$omit']; // filter by key \nconst OP_GROUP = ['$group', '$groupBy'];\nconst OP_SORT = ['$sort', '$orderBy', '$sortBy'];\nconst OP_REVERSE = ['$reverse'];\nconst OP_EVAL = ['$eval', '$apply'];\nconst OP_MERGE = ['$merge'];\nconst OP_FILTER = ['$filter', '$select']; // filter by value\nconst OP_REMAP = ['$remap'];\n\n//Condition operation\nconst OP_IF = ['$if'];\n\nconst PFX_FOR_EACH = '|>'; // map each\nconst PFX_WITH_ANY = '|*'; // with any\n\nconst MapOfOps = new Map();\nconst addOpToMap = (tokens, tag) =>\n    tokens.forEach((token) => MapOfOps.set(token, tag));\naddOpToMap(OP_EQUAL, 'OP_EQUAL');\naddOpToMap(OP_NOT_EQUAL, 'OP_NOT_EQUAL');\naddOpToMap(OP_NOT, 'OP_NOT');\naddOpToMap(OP_GREATER_THAN, 'OP_GREATER_THAN');\naddOpToMap(OP_GREATER_THAN_OR_EQUAL, 'OP_GREATER_THAN_OR_EQUAL');\naddOpToMap(OP_LESS_THAN, 'OP_LESS_THAN');\naddOpToMap(OP_LESS_THAN_OR_EQUAL, 'OP_LESS_THAN_OR_EQUAL');\naddOpToMap(OP_IN, 'OP_IN');\naddOpToMap(OP_NOT_IN, 'OP_NOT_IN');\naddOpToMap(OP_EXISTS, 'OP_EXISTS');\naddOpToMap(OP_MATCH, 'OP_MATCH');\naddOpToMap(OP_MATCH_ANY, 'OP_MATCH_ANY');\naddOpToMap(OP_TYPE, 'OP_TYPE');\naddOpToMap(OP_HAS_KEYS, 'OP_HAS_KEYS');\naddOpToMap(OP_START_WITH, 'OP_START_WITH');\naddOpToMap(OP_END_WITH, 'OP_END_WITH');\n\nconst MapOfMans = new Map();\nconst addManToMap = (tokens, tag) =>\n    tokens.forEach((token) => MapOfMans.set(token, tag));\n// [ <op name>, <unary> ]\naddManToMap(OP_SIZE, ['OP_SIZE', true]);\naddManToMap(OP_SUM, ['OP_SUM', true]);\naddManToMap(OP_KEYS, ['OP_KEYS', true]);\naddManToMap(OP_VALUES, ['OP_VALUES', true]);\naddManToMap(OP_GET_TYPE, ['OP_GET_TYPE', true]);\naddManToMap(OP_REVERSE, ['OP_REVERSE', true]);\n\naddManToMap(OP_ADD, ['OP_ADD', false]);\naddManToMap(OP_SUB, ['OP_SUB', false]);\naddManToMap(OP_MUL, ['OP_MUL', false]);\naddManToMap(OP_DIV, ['OP_DIV', false]);\naddManToMap(OP_SET, ['OP_SET', false]);\naddManToMap(OP_ADD_ITEM, ['OP_ADD_ITEM', false]);\naddManToMap(OP_PICK, ['OP_PICK', false]);\naddManToMap(OP_GET_BY_INDEX, ['OP_GET_BY_INDEX', false]);\naddManToMap(OP_GET_BY_KEY, ['OP_GET_BY_KEY', false]);\naddManToMap(OP_OMIT, ['OP_OMIT', false]);\naddManToMap(OP_GROUP, ['OP_GROUP', false]);\naddManToMap(OP_SORT, ['OP_SORT', false]);\naddManToMap(OP_EVAL, ['OP_EVAL', false]);\naddManToMap(OP_MERGE, ['OP_MERGE', false]);\naddManToMap(OP_FILTER, ['OP_FILTER', false]);\naddManToMap(OP_REMAP, ['OP_REMAP', false]);\naddManToMap(OP_IF, ['OP_IF', false]);\n\nconst defaultJesHandlers = {\n    OP_EQUAL: (left, right) => _isEqual(left, right),\n    OP_NOT_EQUAL: (left, right) => !_isEqual(left, right),\n    OP_NOT: (left, ...args) => !test(left, 'OP_MATCH', ...args),\n    OP_GREATER_THAN: (left, right) => left > right,\n    OP_GREATER_THAN_OR_EQUAL: (left, right) => left >= right,\n    OP_LESS_THAN: (left, right) => left < right,\n    OP_LESS_THAN_OR_EQUAL: (left, right) => left <= right,\n    OP_IN: (left, right) => {\n        if (right == null) return false;\n        if (!Array.isArray(right)) {\n            throw new Error(OPERAND_NOT_ARRAY('OP_IN'));\n        }\n\n        return right.find((element) =>\n            defaultJesHandlers.OP_EQUAL(left, element)\n        );\n    },\n    OP_NOT_IN: (left, right) => {\n        if (right == null) return true;\n        if (!Array.isArray(right)) {\n            throw new Error(OPERAND_NOT_ARRAY('OP_NOT_IN'));\n        }\n\n        return right.every((element) =>\n            defaultJesHandlers.OP_NOT_EQUAL(left, element)\n        );\n    },\n    OP_EXISTS: (left, right) => {\n        if (typeof right !== 'boolean') {\n            throw new Error(OPERAND_NOT_BOOL('OP_EXISTS'));\n        }\n\n        return right ? left != null : left == null;\n    },\n    OP_TYPE: (left, right) => {\n        if (typeof right !== 'string') {\n            throw new Error(OPERAND_NOT_STRING('OP_TYPE'));\n        }\n\n        right = right.toLowerCase();\n\n        if (right === 'array') {\n            return Array.isArray(left);\n        }\n\n        if (right === 'integer') {\n            return _isInteger(left);\n        }\n\n        if (right === 'text') {\n            return typeof left === 'string';\n        }\n\n        return typeof left === right;\n    },\n    OP_MATCH: (left, right, jes, prefix) => {\n        if (Array.isArray(right)) {\n            return right.every((rule) => {\n                const r = match(left, rule, jes, prefix);\n                return r[0];\n            });\n        }\n\n        const r = match(left, right, jes, prefix);\n        return r[0];\n    },\n    OP_MATCH_ANY: (left, right, jes, prefix) => {\n        if (!Array.isArray(right)) {\n            throw new Error(OPERAND_NOT_ARRAY('OP_MATCH_ANY'));\n        }\n\n        let found = right.find((rule) => {\n            const r = match(left, rule, jes, prefix);\n            return r[0];\n        });\n\n        return found ? true : false;\n    },\n    OP_HAS_KEYS: (left, right) => {\n        if (typeof left !== 'object') return false;\n\n        return Array.isArray(right) ? right.every((key) => _has(left, key)) : _has(left, right);\n    },\n    OP_START_WITH: (left, right) => {\n        if (typeof left !== 'string') return false;\n        if (typeof right !== 'string') {\n            throw new Error(OPERAND_NOT_STRING('OP_START_WITH'));\n        }\n\n        return left.startsWith(right);\n    },\n    OP_END_WITH: (left, right) => {\n        if (typeof left !== 'string') return false;\n        if (typeof right !== 'string') {\n            throw new Error(OPERAND_NOT_STRING('OP_END_WITH'));\n        }\n\n        return left.endsWith(right);\n    },\n};\n\nconst defaultManipulations = {\n    //unary\n    OP_SIZE: (left) => _size(left),\n    OP_SUM: (left) =>\n        _reduce(\n            left,\n            (sum, item) => {\n                sum += item;\n                return sum;\n            },\n            0\n        ),\n\n    OP_KEYS: (left) => _keys(left),\n    OP_VALUES: (left) => _values(left),\n    OP_GET_TYPE: (left) =>\n        Array.isArray(left)\n            ? 'array'\n            : _isInteger(left)\n            ? 'integer'\n            : typeof left,\n    OP_REVERSE: (left) => _reverse(left),\n\n    //binary\n    OP_ADD: (left, right) => left + right,\n    OP_SUB: (left, right) => left - right,\n    OP_MUL: (left, right) => left * right,\n    OP_DIV: (left, right) => left / right,\n    OP_SET: (left, right, jes, prefix, context) =>\n        evaluateExpr(undefined, right, jes, prefix, context, true),\n    OP_ADD_ITEM: (left, right, jes, prefix, context) => {\n        if (typeof left !== 'object') {\n            throw new ValidationError(VALUE_NOT_COLLECTION('OP_ADD_ITEM'));\n        }\n\n        if (Array.isArray(left)) {\n            return left.concat(right);\n        }\n\n        if (!Array.isArray(right) || right.length !== 2) {\n            throw new Error(OPERAND_NOT_TUPLE('OP_ADD_ITEM'));\n        }\n\n        return {\n            ...left,\n            [right[0]]: evaluateExpr(left, right[1], jes, prefix, {\n                ...context,\n                $$PARENT: context.$$CURRENT,\n                $$CURRENT: left,\n            }),\n        };\n    },\n    OP_PICK: (left, right, jes, prefix) => {\n        if (left == null) return null;\n\n        if (typeof right !== 'object') {\n            right = _castArray(right);\n        }\n\n        if (Array.isArray(right)) {\n            return _pick(left, right);\n        }\n\n        return _pickBy(\n            left,\n            (x, key) => match(key, right, jes, formatPrefix(key, prefix))[0]\n        );\n    },\n    OP_GET_BY_INDEX: (left, right) => _nth(left, right),\n    OP_GET_BY_KEY: (left, right) => _get(left, right),\n    OP_OMIT: (left, right, jes, prefix) => {\n        if (left == null) return null;\n\n        if (typeof right !== 'object') {\n            right = _castArray(right);\n        }\n\n        if (Array.isArray(right)) {\n            return _omit(left, right);\n        }\n\n        return _omitBy(\n            left,\n            (x, key) => match(key, right, jes, formatPrefix(key, prefix))[0]\n        );\n    },\n    OP_GROUP: (left, right) => _groupBy(left, right),\n    OP_SORT: (left, right) => _sortBy(left, right),\n    OP_EVAL: evaluateExpr,\n    OP_MERGE: (left, right, jes, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new Error(OPERAND_NOT_ARRAY('OP_MERGE'));\n        }\n\n        return right.reduce(\n            (result, expr, key) =>\n                Object.assign(\n                    result,\n                    evaluateExpr(left, expr, jes, formatPrefix(key, prefix), {\n                        ...context,\n                    })\n                ),\n            {}\n        );\n    },\n    OP_FILTER: (left, right, jes, prefix, context) => {\n        if (left == null) return null;\n\n        if (typeof left !== 'object') {\n            throw new ValidationError(VALUE_NOT_COLLECTION('OP_FILTER'));\n        }\n\n        return _filter(left, (value, key) =>\n            test(value, 'OP_MATCH', right, jes, formatPrefix(key, prefix))\n        );\n    },\n    OP_REMAP: (left, right, jes, prefix, context) => {\n        if (left == null) return null;\n\n        if (typeof left !== 'object') {\n            throw new ValidationError(VALUE_NOT_COLLECTION('OP_REMAP'));\n        }\n\n        return remap(left, right);\n    },\n    OP_IF: (left, right, jes, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new Error(OPERAND_NOT_ARRAY('OP_IF'));\n        }\n\n        if (right.length < 2 || right.length > 3) {\n            throw new Error(OPERAND_NOT_TUPLE_2_OR_3('OP_IF'));\n        }\n\n        const condition = evaluateExpr(\n            undefined,\n            right[0],\n            jes,\n            prefix,\n            context,\n            true\n        );\n\n        if (test(left, 'OP_MATCH', condition, jes, prefix)) {\n            return evaluateExpr(left, right[1], jes, prefix, context);\n        } else if (right.length > 2) {\n            const ret = evaluateExpr(left, right[2], jes, prefix, context);\n            return ret;\n        }\n\n        return left;\n    },\n};\n\nconst formatName = (name, prefix) => {\n    const fullName = name == null ? prefix : formatPrefix(name, prefix);\n    return fullName == null\n        ? 'The value'\n        : fullName.indexOf('(') !== -1\n        ? `The query \"?.${fullName}\"`\n        : `\"${fullName}\"`;\n};\nconst formatKey = (key, hasPrefix) =>\n    _isInteger(key) ? `[${key}]` : hasPrefix ? '.' + key : key;\nconst formatPrefix = (key, prefix) =>\n    prefix != null ? `${prefix}${formatKey(key, true)}` : formatKey(key, false);\nconst formatQuery = (opMeta) =>\n    `${defaultQueryExplanations[opMeta[0]]}(${opMeta[1] ? '' : '?'})`;\nconst formatMap = (name) => `each(->${name})`;\nconst formatAny = (name) => `any(->${name})`;\n\nconst defaultJesExplanations = {\n    OP_EQUAL: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should be ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT_EQUAL: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not be ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not match ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_GREATER_THAN: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be greater than ${right}, but ${JSON.stringify(left)} given.`,\n    OP_GREATER_THAN_OR_EQUAL: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be greater than or equal to ${right}, but ${JSON.stringify(\n            left\n        )} given.`,\n    OP_LESS_THAN: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be less than ${right}, but ${JSON.stringify(left)} given.`,\n    OP_LESS_THAN_OR_EQUAL: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be less than or equal to ${right}, but ${JSON.stringify(\n            left\n        )} given.`,\n    OP_IN: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should be one of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT_IN: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not be any one of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_EXISTS: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should${right ? ' not ' : ' '}be NULL.`,\n    OP_TYPE: (name, left, right, prefix) =>\n        `The type of ${formatName(\n            name,\n            prefix\n        )} should be \"${right}\", but ${JSON.stringify(left)} given.`,\n    OP_MATCH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should match ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_MATCH_ANY: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should match any of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_HAS_KEYS: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should have all of these keys [${right.join(', ')}].`,\n    OP_START_WITH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should start with \"${right}\".`,\n    OP_END_WITH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should end with \"${right}\".`,\n};\n\nconst defaultQueryExplanations = {\n    //unary\n    OP_SIZE: 'size',\n    OP_SUM: 'sum',\n    OP_KEYS: 'keys',\n    OP_VALUES: 'values',\n    OP_GET_TYPE: 'get type',\n    OP_REVERSE: 'reverse',\n\n    //binary\n    OP_ADD: 'add',\n    OP_SUB: 'subtract',\n    OP_MUL: 'multiply',\n    OP_DIV: 'divide',\n    OP_SET: 'assign',\n    OP_ADD_ITEM: 'addItem',\n    OP_PICK: 'pick',\n    OP_GET_BY_INDEX: 'get element at index',\n    OP_GET_BY_KEY: 'get element of key',\n    OP_OMIT: 'omit',\n    OP_GROUP: 'groupBy',\n    OP_SORT: 'sortBy',\n    OP_EVAL: 'evaluate',\n    OP_MERGE: 'merge',\n    OP_FILTER: 'filter',\n    OP_REMAP: 'remap',\n    OP_IF: 'evaluate if',\n};\n\nfunction getUnmatchedExplanation(jes, op, name, leftValue, rightValue, prefix) {\n    const getter =\n        jes.operatorExplanations[op] || jes.operatorExplanations.OP_MATCH;\n    return getter(name, leftValue, rightValue, prefix);\n}\n\nfunction test(value, op, opValue, jes, prefix) {\n    const handler = jes.operatorHandlers[op];\n\n    if (!handler) {\n        throw new Error(INVALID_TEST_HANLDER(op));\n    }\n\n    return handler(value, opValue, jes, prefix);\n}\n\nfunction evaluate(value, op, opValue, jes, prefix, context) {\n    const handler = jes.queryHanlders[op];\n\n    if (!handler) {\n        throw new Error(INVALID_QUERY_HANDLER(op));\n    }\n\n    return handler(value, opValue, jes, prefix, context);\n}\n\nfunction evaluateUnary(value, op, jes, prefix) {\n    const handler = jes.queryHanlders[op];\n\n    if (!handler) {\n        throw new Error(INVALID_QUERY_HANDLER(op));\n    }\n\n    return handler(value, jes, prefix);\n}\n\nfunction evaluateByOpMeta(\n    currentValue,\n    rightValue,\n    opMeta,\n    jes,\n    prefix,\n    context\n) {\n    if (opMeta[1]) {\n        return rightValue\n            ? evaluateUnary(currentValue, opMeta[0], jes, prefix)\n            : currentValue;\n    }\n\n    return evaluate(currentValue, opMeta[0], rightValue, jes, prefix, context);\n}\n\nconst defaultCustomizer = {\n    mapOfOperators: MapOfOps,\n    mapOfManipulators: MapOfMans,\n    operatorHandlers: defaultJesHandlers,\n    operatorExplanations: defaultJesExplanations,\n    queryHanlders: defaultManipulations,\n};\n\nfunction matchCollection(actual, collectionOp, opMeta, operands, jes, prefix) {\n    let matchResult, nextPrefix;\n\n    switch (collectionOp) {\n        case PFX_FOR_EACH:\n            const mapResult = isPlainObject(actual)\n                ? _mapValues(actual, (item, key) =>\n                      evaluateByOpMeta(\n                          item,\n                          operands[0],\n                          opMeta,\n                          jes,\n                          formatPrefix(key, prefix)\n                      )\n                  )\n                : actual.map((item, i) =>\n                      evaluateByOpMeta(\n                          item,\n                          operands[0],\n                          opMeta,\n                          jes,\n                          formatPrefix(i, prefix)\n                      )\n                  );\n            nextPrefix = formatPrefix(formatMap(formatQuery(opMeta)), prefix);\n            matchResult = match(mapResult, operands[1], jes, nextPrefix);\n            break;\n\n        case PFX_WITH_ANY:\n            nextPrefix = formatPrefix(formatAny(formatQuery(opMeta)), prefix);\n            matchResult = _find(actual, (item, key) =>\n                match(\n                    evaluateByOpMeta(\n                        item,\n                        operands[0],\n                        opMeta,\n                        jes,\n                        formatPrefix(key, prefix)\n                    ),\n                    operands[1],\n                    jes,\n                    nextPrefix\n                )\n            );\n            break;\n\n        default:\n            throw new Error(INVALID_COLLECTION_OP(collectionOp));\n    }\n\n    if (!matchResult[0]) {\n        return matchResult;\n    }\n\n    return undefined;\n}\n\nfunction validateCollection(\n    actual,\n    collectionOp,\n    op,\n    expectedFieldValue,\n    jes,\n    prefix\n) {\n    switch (collectionOp) {\n        case PFX_FOR_EACH:\n            const unmatchedKey = _findIndex(\n                actual,\n                (item) => !test(item, op, expectedFieldValue, jes, prefix)\n            );\n            if (unmatchedKey) {\n                return [\n                    false,\n                    getUnmatchedExplanation(\n                        jes,\n                        op,\n                        unmatchedKey,\n                        actual[unmatchedKey],\n                        expectedFieldValue,\n                        prefix\n                    ),\n                ];\n            }\n            break;\n\n        case PFX_WITH_ANY:\n            const matched = _find(actual, (item, key) =>\n                test(item, op, expectedFieldValue, jes, prefix)\n            );\n\n            if (!matched) {\n                return [\n                    false,\n                    getUnmatchedExplanation(\n                        jes,\n                        op,\n                        null,\n                        actual,\n                        expectedFieldValue,\n                        prefix\n                    ),\n                ];\n            }\n            break;\n\n        default:\n            throw new Error(INVALID_COLLECTION_OP(collectionOp));\n    }\n\n    return undefined;\n}\n\nfunction evaluateCollection(\n    currentValue,\n    collectionOp,\n    opMeta,\n    expectedFieldValue,\n    jes,\n    prefix,\n    context\n) {\n    switch (collectionOp) {\n        case PFX_FOR_EACH:\n            return _map(currentValue, (item, i) =>\n                evaluateByOpMeta(\n                    item,\n                    expectedFieldValue,\n                    opMeta,\n                    jes,\n                    formatPrefix(i, prefix),\n                    { ...context, $$PARENT: currentValue, $$CURRENT: item }\n                )\n            );\n\n        case PFX_WITH_ANY:\n            throw new Error(PRX_OP_NOT_FOR_EVAL(collectionOp));\n\n        default:\n            throw new Error(INVALID_COLLECTION_OP(collectionOp));\n    }\n}\n\n/**\n *\n * @param {*} actual\n * @param {*} expected\n * @param {*} jes\n * @param {*} prefix\n *\n * { key: { $match } }\n */\nfunction match(actual, expected, jes, prefix) {\n    jes != null || (jes = defaultCustomizer);\n    let passObjectCheck = false;\n\n    if (!isPlainObject(expected)) {\n        if (!test(actual, 'OP_EQUAL', expected, jes, prefix)) {\n            return [\n                false,\n                jes.operatorExplanations.OP_EQUAL(\n                    null,\n                    actual,\n                    expected,\n                    prefix\n                ),\n            ];\n        }\n\n        return [true];\n    }\n\n    for (let fieldName in expected) {\n        let expectedFieldValue = expected[fieldName];\n\n        const l = fieldName.length;\n\n        if (l > 1) {\n            if (l > 4 && fieldName[0] === '|' && fieldName[2] === '$') {\n                if (fieldName[3] === '$') {\n                    if (\n                        !Array.isArray(expectedFieldValue) &&\n                        expectedFieldValue.length !== 2\n                    ) {\n                        throw new Error(OPERAND_NOT_TUPLE());\n                    }\n\n                    //processors\n                    const collectionOp = fieldName.substr(0, 2);\n                    fieldName = fieldName.substr(3);\n\n                    const opMeta = jes.mapOfManipulators.get(fieldName);\n                    if (!opMeta) {\n                        throw new Error(INVALID_QUERY_OPERATOR(fieldName));\n                    }\n\n                    const matchResult = matchCollection(\n                        actual,\n                        collectionOp,\n                        opMeta,\n                        expectedFieldValue,\n                        jes,\n                        prefix\n                    );\n                    if (matchResult) return matchResult;\n                    continue;\n                } else {\n                    //validators\n                    const collectionOp = fieldName.substr(0, 2);\n                    fieldName = fieldName.substr(2);\n\n                    const op = jes.mapOfOperators.get(fieldName);\n                    if (!op) {\n                        throw new Error(INVALID_TEST_OPERATOR(fieldName));\n                    }\n\n                    const matchResult = validateCollection(\n                        actual,\n                        collectionOp,\n                        op,\n                        expectedFieldValue,\n                        jes,\n                        prefix\n                    );\n                    if (matchResult) return matchResult;\n                    continue;\n                }\n            }\n\n            if (fieldName[0] === '$') {\n                if (l > 2 && fieldName[1] === '$') {\n                    fieldName = fieldName.substr(1);\n\n                    //processors\n                    const opMeta = jes.mapOfManipulators.get(fieldName);\n                    if (!opMeta) {\n                        throw new Error(INVALID_QUERY_OPERATOR(fieldName));\n                    }\n\n                    if (!opMeta[1]) {\n                        throw new Error(NOT_A_UNARY_QUERY);\n                    }\n\n                    const queryResult = evaluateUnary(\n                        actual,\n                        opMeta[0],\n                        jes,\n                        prefix\n                    );\n                    const matchResult = match(\n                        queryResult,\n                        expectedFieldValue,\n                        jes,\n                        formatPrefix(formatQuery(opMeta), prefix)\n                    );\n\n                    if (!matchResult[0]) {\n                        return matchResult;\n                    }\n\n                    continue;\n                }\n\n                //validator\n                const op = jes.mapOfOperators.get(fieldName);\n                if (!op) {\n                    throw new Error(INVALID_TEST_OPERATOR(fieldName));\n                }\n\n                if (!test(actual, op, expectedFieldValue, jes, prefix)) {\n                    return [\n                        false,\n                        getUnmatchedExplanation(\n                            jes,\n                            op,\n                            null,\n                            actual,\n                            expectedFieldValue,\n                            prefix\n                        ),\n                    ];\n                }\n\n                continue;\n            }\n        }\n\n        if (!passObjectCheck) {\n            if (actual == null)\n                return [\n                    false,\n                    jes.operatorExplanations.OP_EXISTS(\n                        null,\n                        null,\n                        true,\n                        prefix\n                    ),\n                ];\n\n            const actualType = typeof actual;\n\n            if (actualType !== 'object')\n                return [\n                    false,\n                    jes.operatorExplanations.OP_TYPE(\n                        null,\n                        actualType,\n                        'object',\n                        prefix\n                    ),\n                ];\n        }\n\n        passObjectCheck = true;\n\n        let actualFieldValue = _get(actual, fieldName);\n\n        if (\n            expectedFieldValue != null &&\n            typeof expectedFieldValue === 'object'\n        ) {\n            const [ok, reason] = match(\n                actualFieldValue,\n                expectedFieldValue,\n                jes,\n                formatPrefix(fieldName, prefix)\n            );\n            if (!ok) {\n                return [false, reason];\n            }\n        } else {\n            if (\n                !test(\n                    actualFieldValue,\n                    'OP_EQUAL',\n                    expectedFieldValue,\n                    jes,\n                    prefix\n                )\n            ) {\n                return [\n                    false,\n                    jes.operatorExplanations.OP_EQUAL(\n                        fieldName,\n                        actualFieldValue,\n                        expectedFieldValue,\n                        prefix\n                    ),\n                ];\n            }\n        }\n    }\n\n    return [true];\n}\n\n/**\n * If $ operator used, only one a time is allowed\n * e.g.\n * {\n *    $groupBy: 'key'\n * }\n *\n *\n * @param {*} currentValue\n * @param {*} expr\n * @param {*} prefix\n * @param {*} jes\n * @param {*} context\n */\nfunction evaluateExpr(currentValue, expr, jes, prefix, context, setOp) {\n    jes != null || (jes = defaultCustomizer);\n    if (Array.isArray(expr)) {\n        if (setOp) {\n            return expr.map((item) =>\n                evaluateExpr(undefined, item, jes, prefix, { ...context }, true)\n            );\n        }\n\n        return expr.reduce(\n            (result, exprItem) =>\n                evaluateExpr(result, exprItem, jes, prefix, { ...context }),\n            currentValue\n        );\n    }\n\n    const typeExpr = typeof expr;\n\n    if (typeExpr === 'boolean') {\n        if (setOp) return expr;\n        return expr ? currentValue : undefined;\n    }\n\n    if (typeExpr === 'number' || typeExpr === 'bigint') {\n        if (setOp) return expr;\n\n        throw new Error(INVALID_EXPR_SYNTAX);\n    }\n\n    if (typeExpr === 'string') {\n        if (expr.startsWith('$$')) {\n            //get from context\n            const pos = expr.indexOf('.');\n            if (pos === -1) {\n                return context[expr];\n            }\n\n            return _get(context[expr.substr(0, pos)], expr.substr(pos + 1));\n        }\n\n        if (setOp) {\n            return expr;\n        }\n\n        const opMeta = jes.mapOfManipulators.get(expr);\n        if (!opMeta) {\n            throw new Error(INVALID_QUERY_OPERATOR(expr));\n        }\n\n        if (!opMeta[1]) {\n            throw new Error(REQUIRE_RIGHT_OPERAND(expr));\n        }\n\n        return evaluateUnary(currentValue, opMeta[0], jes, prefix);\n    }\n\n    if (typeExpr !== 'object') {\n        throw new Error(INVALID_EXPR_SYNTAX);\n    }\n\n    if (setOp) {\n        return _mapValues(expr, (item) =>\n            evaluateExpr(undefined, item, jes, prefix, context, true)\n        );\n    }\n\n    if (context == null) {\n        context = {\n            $$ROOT: currentValue,\n            $$PARENT: null,\n            $$CURRENT: currentValue,\n        };\n    }\n\n    let result,\n        hasOperator = false;\n\n    for (let fieldName in expr) {\n        let expectedFieldValue = expr[fieldName];\n\n        const l = fieldName.length;\n\n        if (l > 1) {\n            if (fieldName[0] === '$') {\n                if (result) {\n                    throw new Error(OPERATOR_NOT_ALONE);\n                }\n\n                const opMeta = jes.mapOfManipulators.get(fieldName);\n                if (!opMeta) {\n                    throw new Error(INVALID_QUERY_OPERATOR(fieldName));\n                }\n\n                result = evaluateByOpMeta(\n                    currentValue,\n                    expectedFieldValue,\n                    opMeta,\n                    jes,\n                    prefix,\n                    context\n                );\n                hasOperator = true;\n                continue;\n            }\n\n            if (l > 3 && fieldName[0] === '|' && fieldName[2] === '$') {\n                if (result) {\n                    throw new Error(OPERATOR_NOT_ALONE);\n                }\n\n                const collectionOp = fieldName.substr(0, 2);\n                fieldName = fieldName.substr(2);\n\n                const opMeta = jes.mapOfManipulators.get(fieldName);\n                if (!opMeta) {\n                    throw new Error(INVALID_QUERY_OPERATOR(fieldName));\n                }\n\n                result = evaluateCollection(\n                    currentValue,\n                    collectionOp,\n                    opMeta,\n                    expectedFieldValue,\n                    jes,\n                    prefix,\n                    context\n                );\n                hasOperator = true;\n                continue;\n            }\n        }\n\n        if (hasOperator) {\n            throw new Error(OPERATOR_NOT_ALONE);\n        }\n\n        let compleyKey = fieldName.indexOf('.') !== -1;\n\n        //pick a field and then apply manipulation\n        let actualFieldValue =\n            currentValue != null\n                ? compleyKey\n                    ? _get(currentValue, fieldName)\n                    : currentValue[fieldName]\n                : undefined;\n\n        const childFieldValue = evaluateExpr(\n            actualFieldValue,\n            expectedFieldValue,\n            jes,\n            formatPrefix(fieldName, prefix),\n            context\n        );\n\n        if (typeof childFieldValue !== 'undefined') {\n            result == null && (result = {});\n            if (compleyKey) {\n                _set(result, fieldName, childFieldValue);\n            } else {\n                result[fieldName] = childFieldValue;\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * JSON Expression Syntax Object\n * @class\n */\nclass JES {\n    static match = match;\n    static evaluate = evaluateExpr;\n    static defaultCustomizer = defaultCustomizer;\n\n    /**\n     * @param {object} value\n     * @param {object} customizer\n     */\n    constructor(value, customizer) {\n        this.value = value;\n        this.customizer = customizer;\n    }\n\n    /**\n     * Match the value with expected conditions in JSON expression\n     * @param {object} expected - JSON match expression\n     * @throws ValidationError\n     * @returns {JES}\n     */\n    match(expected) {\n        const result = match(this.value, expected, this.customizer);\n        if (result[0]) return this;\n\n        throw new ValidationError(result[1], {\n            actual: this.value,\n            expected,\n        });\n    }\n\n    /**\n     * Evaluate a JSON expression against the value\n     * @param {object} - JSON operation expression\n     */\n    evaluate(expr) {\n        return evaluateExpr(this.value, expr, this.customizer);\n    }\n\n    /**\n     * Evaluate a JSON expression against the value and update the value\n     * @param {object} - JSON operation expression\n     * @returns {JES}\n     */\n    update(expr) {\n        const value = evaluateExpr(this.value, expr, this.customizer);\n        this.value = value;\n        return this;\n    }\n}\n\nmodule.exports = JES;\n"]}