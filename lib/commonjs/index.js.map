{"version":3,"sources":["index.js"],"names":["_isEqual","require","_isInteger","_has","_size","_reduce","_reverse","_keys","_values","_castArray","_pick","_pickBy","_get","_set","_nth","_omit","_omitBy","_groupBy","_sortBy","_filter","_map","_mapValues","_find","_findIndex","ValidationError","InvalidArgument","remap","isPlainObject","PFX_FOR_EACH","PFX_WITH_ANY","config","messages","nothing","MSG","OP_EQUAL","OP_NOT_EQUAL","OP_NOT","OP_GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","OP_LESS_THAN","OP_LESS_THAN_OR_EQUAL","OP_IN","OP_NOT_IN","OP_EXISTS","OP_MATCH","OP_MATCH_ANY","OP_TYPE","OP_HAS_KEYS","OP_START_WITH","OP_END_WITH","OP_SIZE","OP_SUM","OP_KEYS","OP_VALUES","OP_GET_TYPE","OP_ADD","OP_SUB","OP_MUL","OP_DIV","OP_SET","OP_ADD_ITEM","OP_PICK","OP_GET_BY_INDEX","OP_GET_BY_KEY","OP_OMIT","OP_GROUP","OP_SORT","OP_REVERSE","OP_EVAL","OP_MERGE","OP_FILTER","OP_REMAP","OP_TO_JSON","OP_TO_OBJ","OP_IF","addValidatorToMap","left","right","args","test","Array","isArray","OPERAND_NOT_ARRAY","equal","getValidator","find","element","notEqual","every","OPERAND_NOT_BOOL","prefix","context","rule","r","match","matched","$$ERROR","found","OPERAND_NOT_STRING","toLowerCase","key","startsWith","endsWith","length","OPERAND_NOT_TUPLE","evaluated","evaluateExpr","addProcessorToMap","sum","item","undefined","VALUE_NOT_COLLECTION","concat","$$PARENT","$$CURRENT","x","formatPrefix","reduce","result","expr","Object","assign","value","OPERAND_NOT_TUPLE_2_OR_3","condition","ret","JSON","stringify","parse","getUnmatchedExplanation","op","name","leftValue","rightValue","getter","validationErrors","tag","opValue","handler","INVALID_VALIDATOR_HANDLER","evaluate","getProcessor","INVALID_PROCESSOR_HANDLER","evaluateUnary","evaluateByOpMeta","currentValue","opMeta","validateCollection","actual","collectionOp","expectedFieldValue","unmatchedKey","INVALID_COLLECTION_OP","evaluateCollection","i","expected","passObjectCheck","fieldName","l","substr","getValidatorTag","INVALID_VALIDATION_OP","matchResult","actualType","actualFieldValue","ok","reason","setOp","map","exprItem","typeExpr","SYNTAX_NUMBER_AS_EXPR","pos","indexOf","getProcessorTagAndType","INVALID_PROCESSING_OP","REQUIRE_RIGHT_OPERAND","SYNTAX_INVALID_EXPR","$$ROOT","hasOperator","SYNTAX_OP_NOT_ALONE","compleyKey","childFieldValue","JES","module","exports"],"mappings":"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","sourcesContent":["// JSON Expression Syntax (JES)\nconst _isEqual = require('lodash/isEqual');\nconst _isInteger = require('lodash/isInteger');\nconst _has = require('lodash/has');\nconst _size = require('lodash/size');\nconst _reduce = require('lodash/reduce');\nconst _reverse = require('lodash/reverse');\nconst _keys = require('lodash/keys');\nconst _values = require('lodash/values');\nconst _castArray = require('lodash/castArray');\nconst _pick = require('lodash/pick');\nconst _pickBy = require('lodash/pickBy');\nconst _get = require('lodash/get');\nconst _set = require('lodash/set');\nconst _nth = require('lodash/nth');\nconst _omit = require('lodash/omit');\nconst _omitBy = require('lodash/omitBy');\nconst _groupBy = require('lodash/groupBy');\nconst _sortBy = require('lodash/sortBy');\nconst _filter = require('lodash/filter');\nconst _map = require('lodash/map');\nconst _mapValues = require('lodash/mapValues');\nconst _find = require('lodash/find');\nconst _findIndex = require('lodash/findIndex');\n\nconst { ValidationError, InvalidArgument } = require('@genx/error');\nconst { remap, isPlainObject } = require('@genx/july');\n\nconst PFX_FOR_EACH = '|>'; // map each\nconst PFX_WITH_ANY = '|*'; // with any\n\nconst config = require('./config');\n\nif (!config.messages) {\n    const nothing = require('./locale/msg.en-US');\n    nothing(); // just avoid being truncated by bundler\n}\n\nconst MSG = config.messages;\n\n//Validators\nconst OP_EQUAL = ['$eq', '$eql', '$equal'];\nconst OP_NOT_EQUAL = ['$ne', '$neq', '$notEqual'];\nconst OP_NOT = ['$not'];\nconst OP_GREATER_THAN = ['$gt', '$>', '$greaterThan'];\nconst OP_GREATER_THAN_OR_EQUAL = ['$gte', '$>=', '$greaterThanOrEqual'];\nconst OP_LESS_THAN = ['$lt', '$<', '$lessThan'];\nconst OP_LESS_THAN_OR_EQUAL = ['$lte', '$<=', '$lessThanOrEqual'];\n\nconst OP_IN = ['$in'];\nconst OP_NOT_IN = ['$nin', '$notIn'];\nconst OP_EXISTS = ['$exist', '$exists', '$notNull'];\nconst OP_MATCH = ['$has', '$match', '$all'];\nconst OP_MATCH_ANY = ['$any', '$or', '$either'];\nconst OP_TYPE = ['$is', '$typeOf'];\nconst OP_HAS_KEYS = ['$hasKey', '$hasKeys', '$withKey', '$withKeys'];\nconst OP_START_WITH = ['$startWith', '$startsWith'];\nconst OP_END_WITH = ['$endWith', '$endsWith'];\n\n//OP_EVAL\n\n//Query & aggregate processors\nconst OP_SIZE = ['$size', '$length', '$count'];\nconst OP_SUM = ['$sum', '$total'];\nconst OP_KEYS = ['$keys'];\nconst OP_VALUES = ['$values'];\nconst OP_GET_TYPE = ['$type'];\n\n//Manipulate processors\nconst OP_ADD = ['$add', '$plus', '$inc'];\nconst OP_SUB = ['$sub', '$subtract', '$minus', '$dec'];\nconst OP_MUL = ['$mul', '$multiply', '$times'];\nconst OP_DIV = ['$div', '$divide'];\nconst OP_SET = ['$set', '$=', '$value'];\nconst OP_ADD_ITEM = ['$addItem', '$override'];\n\nconst OP_PICK = ['$pick'];\nconst OP_GET_BY_INDEX = ['$at', '$getByIndex', '$nth'];\nconst OP_GET_BY_KEY = ['$of', '$getByKey'];\nconst OP_OMIT = ['$omit']; // filter by key\nconst OP_GROUP = ['$group', '$groupBy'];\nconst OP_SORT = ['$sort', '$orderBy', '$sortBy'];\nconst OP_REVERSE = ['$reverse'];\nconst OP_EVAL = ['$eval', '$apply'];\nconst OP_MERGE = ['$merge'];\nconst OP_FILTER = ['$filter', '$select']; // filter by value\nconst OP_REMAP = ['$remap'];\nconst OP_TO_JSON = ['$json', '$toJSON', '$stringify'];\nconst OP_TO_OBJ = ['$object', '$parseJSON'];\n\n//Condition processors\nconst OP_IF = ['$if'];\n\nconfig.addValidatorToMap(OP_EQUAL, 'OP_EQUAL', (left, right) =>\n    _isEqual(left, right)\n);\nconfig.addValidatorToMap(\n    OP_NOT_EQUAL,\n    'OP_NOT_EQUAL',\n    (left, right) => !_isEqual(left, right)\n);\nconfig.addValidatorToMap(\n    OP_NOT,\n    'OP_NOT',\n    (left, ...args) => !test(left, 'OP_MATCH', ...args)\n);\nconfig.addValidatorToMap(\n    OP_GREATER_THAN,\n    'OP_GREATER_THAN',\n    (left, right) => left > right\n);\nconfig.addValidatorToMap(\n    OP_GREATER_THAN_OR_EQUAL,\n    'OP_GREATER_THAN_OR_EQUAL',\n    (left, right) => left >= right\n);\nconfig.addValidatorToMap(\n    OP_LESS_THAN,\n    'OP_LESS_THAN',\n    (left, right) => left < right\n);\nconfig.addValidatorToMap(\n    OP_LESS_THAN_OR_EQUAL,\n    'OP_LESS_THAN_OR_EQUAL',\n    (left, right) => left <= right\n);\nconfig.addValidatorToMap(OP_IN, 'OP_IN', (left, right) => {\n    if (right == null) return false;\n    if (!Array.isArray(right)) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_IN'));\n    }\n\n    const equal = config.getValidator('OP_EQUAL');\n    return right.find((element) => equal(left, element));\n});\nconfig.addValidatorToMap(OP_NOT_IN, 'OP_NOT_IN', (left, right) => {\n    if (right == null) return true;\n    if (!Array.isArray(right)) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_NOT_IN'));\n    }\n\n    const notEqual = config.getValidator('OP_NOT_EQUAL');\n\n    return right.every((element) => notEqual(left, element));\n});\nconfig.addValidatorToMap(OP_EXISTS, 'OP_EXISTS', (left, right) => {\n    if (typeof right !== 'boolean') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_BOOL('OP_EXISTS'));\n    }\n\n    return right ? left != null : left == null;\n});\nconfig.addValidatorToMap(\n    OP_MATCH,\n    'OP_MATCH',\n    (left, right, prefix, context) => {\n        if (Array.isArray(right)) {\n            return right.every((rule) => {\n                const r = match(left, rule, prefix);\n                return r[0];\n            });\n        }\n\n        const r = match(left, right, prefix);\n        const matched = r[0];\n\n        if (!matched && context) {\n            context.$$ERROR = r[1];\n        }\n\n        return matched;\n    }\n);\nconfig.addValidatorToMap(\n    OP_MATCH_ANY,\n    'OP_MATCH_ANY',\n    (left, right, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_MATCH_ANY'));\n        }\n\n        let found = right.find((rule) => {\n            const r = match(left, rule, prefix);\n            const matched = r[0];\n\n            if (!matched && context) {\n                context.$$ERROR = r[1];\n            }\n\n            return matched;\n        });\n\n        return found ? true : false;\n    }\n);\nconfig.addValidatorToMap(OP_TYPE, 'OP_TYPE', (left, right) => {\n    if (typeof right !== 'string') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_STRING('OP_TYPE'));\n    }\n\n    right = right.toLowerCase();\n\n    if (right === 'array') {\n        return Array.isArray(left);\n    }\n\n    if (right === 'integer') {\n        return _isInteger(left);\n    }\n\n    if (right === 'text') {\n        return typeof left === 'string';\n    }\n\n    return typeof left === right;\n});\nconfig.addValidatorToMap(OP_HAS_KEYS, 'OP_HAS_KEYS', (left, right) => {\n    if (typeof left !== 'object') return false;\n\n    return Array.isArray(right)\n        ? right.every((key) => _has(left, key))\n        : _has(left, right);\n});\nconfig.addValidatorToMap(OP_START_WITH, 'OP_START_WITH', (left, right) => {\n    if (typeof left !== 'string') return false;\n    if (typeof right !== 'string') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_STRING('OP_START_WITH'));\n    }\n\n    return left.startsWith(right);\n});\nconfig.addValidatorToMap(OP_END_WITH, 'OP_END_WITH', (left, right) => {\n    if (typeof left !== 'string') return false;\n    if (typeof right !== 'string') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_STRING('OP_END_WITH'));\n    }\n\n    return left.endsWith(right);\n});\n//embedded processors in validation pipeline\nconfig.addValidatorToMap(OP_EVAL, 'OP_EVAL', (left, right, prefix, context) => {\n    if (!Array.isArray(right) || right.length !== 2) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE('OP_EVAL'));\n    }\n\n    const evaluated = evaluateExpr(left, right[0], prefix);\n\n    const r = match(evaluated, right[1], prefix);\n    const matched = r[0];\n\n    if (!matched && context) {\n        context.$$ERROR = r[1];\n    }\n\n    return matched;\n});\n\n// [ <op name>, <unary> ]\nconfig.addProcessorToMap(OP_SIZE, 'OP_SIZE', true, (left) => _size(left));\nconfig.addProcessorToMap(OP_SUM, 'OP_SUM', true, (left) =>\n    _reduce(\n        left,\n        (sum, item) => {\n            sum += item;\n            return sum;\n        },\n        0\n    )\n);\nconfig.addProcessorToMap(OP_KEYS, 'OP_KEYS', true, (left) => _keys(left));\nconfig.addProcessorToMap(OP_VALUES, 'OP_VALUES', true, (left) => _values(left));\nconfig.addProcessorToMap(OP_GET_TYPE, 'OP_GET_TYPE', true, (left) =>\n    Array.isArray(left) ? 'array' : _isInteger(left) ? 'integer' : typeof left\n);\nconfig.addProcessorToMap(OP_REVERSE, 'OP_REVERSE', true, (left) =>\n    _reverse(left)\n);\n\nconfig.addProcessorToMap(\n    OP_ADD,\n    'OP_ADD',\n    false,\n    (left, right) => left + right\n);\nconfig.addProcessorToMap(\n    OP_SUB,\n    'OP_SUB',\n    false,\n    (left, right) => left - right\n);\nconfig.addProcessorToMap(\n    OP_MUL,\n    'OP_MUL',\n    false,\n    (left, right) => left * right\n);\nconfig.addProcessorToMap(\n    OP_DIV,\n    'OP_DIV',\n    false,\n    (left, right) => left / right\n);\nconfig.addProcessorToMap(\n    OP_SET,\n    'OP_SET',\n    false,\n    (left, right, prefix, context) =>\n        evaluateExpr(undefined, right, prefix, context, true)\n);\nconfig.addProcessorToMap(\n    OP_ADD_ITEM,\n    'OP_ADD_ITEM',\n    false,\n    (left, right, prefix, context) => {\n        if (typeof left !== 'object') {\n            throw new InvalidArgument(MSG.VALUE_NOT_COLLECTION('OP_ADD_ITEM'));\n        }\n\n        if (Array.isArray(left)) {\n            return left.concat(right);\n        }\n\n        if (!Array.isArray(right) || right.length !== 2) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE('OP_ADD_ITEM'));\n        }\n\n        return {\n            ...left,\n            [right[0]]: evaluateExpr(left, right[1], prefix, {\n                ...context,\n                $$PARENT: context.$$CURRENT,\n                $$CURRENT: left,\n            }),\n        };\n    }\n);\nconfig.addProcessorToMap(OP_PICK, 'OP_PICK', false, (left, right, prefix) => {\n    if (left == null) return null;\n\n    if (typeof right !== 'object') {\n        right = _castArray(right);\n    }\n\n    if (Array.isArray(right)) {\n        return _pick(left, right);\n    }\n\n    return _pickBy(\n        left,\n        (x, key) => match(key, right, MSG.formatPrefix(key, prefix))[0]\n    );\n});\nconfig.addProcessorToMap(\n    OP_GET_BY_INDEX,\n    'OP_GET_BY_INDEX',\n    false,\n    (left, right) => _nth(left, right)\n);\nconfig.addProcessorToMap(OP_GET_BY_KEY, 'OP_GET_BY_KEY', false, (left, right) =>\n    _get(left, right)\n);\nconfig.addProcessorToMap(OP_OMIT, 'OP_OMIT', false, (left, right, prefix) => {\n    if (left == null) return null;\n\n    if (typeof right !== 'object') {\n        right = _castArray(right);\n    }\n\n    if (Array.isArray(right)) {\n        return _omit(left, right);\n    }\n\n    return _omitBy(\n        left,\n        (x, key) => match(key, right, MSG.formatPrefix(key, prefix))[0]\n    );\n});\nconfig.addProcessorToMap(OP_GROUP, 'OP_GROUP', false, (left, right) =>\n    _groupBy(left, right)\n);\nconfig.addProcessorToMap(OP_SORT, 'OP_SORT', false, (left, right) =>\n    _sortBy(left, right)\n);\nconfig.addProcessorToMap(OP_EVAL, 'OP_EVAL', false, evaluateExpr);\nconfig.addProcessorToMap(\n    OP_MERGE,\n    'OP_MERGE',\n    false,\n    (left, right, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_MERGE'));\n        }\n\n        return right.reduce(\n            (result, expr, key) =>\n                Object.assign(\n                    result,\n                    evaluateExpr(left, expr, MSG.formatPrefix(key, prefix), {\n                        ...context,\n                    })\n                ),\n            {}\n        );\n    }\n);\nconfig.addProcessorToMap(OP_FILTER, 'OP_FILTER', false, (\n    left,\n    right,\n    prefix /*, context*/\n) => {\n    if (left == null) return null;\n\n    if (typeof left !== 'object') {\n        throw new InvalidArgument(MSG.VALUE_NOT_COLLECTION('OP_FILTER'));\n    }\n\n    return _filter(left, (value, key) =>\n        test(value, 'OP_MATCH', right, MSG.formatPrefix(key, prefix))\n    );\n});\nconfig.addProcessorToMap(OP_REMAP, 'OP_REMAP', false, (\n    left,\n    right /*, prefix, context*/\n) => {\n    if (left == null) return null;\n\n    if (typeof left !== 'object') {\n        throw new InvalidArgument(MSG.VALUE_NOT_COLLECTION('OP_REMAP'));\n    }\n\n    return remap(left, right);\n});\nconfig.addProcessorToMap(\n    OP_IF,\n    'OP_IF',\n    false,\n    (left, right, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_IF'));\n        }\n\n        if (right.length < 2 || right.length > 3) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE_2_OR_3('OP_IF'));\n        }\n\n        const condition = evaluateExpr(\n            undefined,\n            right[0],\n            prefix,\n            context,\n            true\n        );\n\n        if (test(left, 'OP_MATCH', condition, prefix)) {\n            return evaluateExpr(left, right[1], prefix, context);\n        } else if (right.length > 2) {\n            const ret = evaluateExpr(left, right[2], prefix, context);\n            return ret;\n        }\n\n        return left;\n    }\n);\n//embeded validators in processing pipeline\nconfig.addProcessorToMap(OP_MATCH, 'OP_MATCH', false, (left, right, prefix) => {\n    return test(left, 'OP_MATCH', right, prefix);\n});\n\nconfig.addProcessorToMap(OP_TO_JSON, 'OP_TO_JSON', true, (left) => JSON.stringify(left));\nconfig.addProcessorToMap(OP_TO_OBJ, 'OP_TO_OBJ', true, (left) => JSON.parse(left));\n\nfunction getUnmatchedExplanation(\n    op,\n    name,\n    leftValue,\n    rightValue,\n    prefix,\n    context\n) {\n    if (context && context.$$ERROR) return context.$$ERROR;\n\n    const getter = MSG.validationErrors[op] || MSG.validationErrors.OP_MATCH;\n    return getter(name, leftValue, rightValue, prefix);\n}\n\nfunction test(value, tag, opValue, prefix, context) {\n    const handler = config.getValidator(tag);\n\n    if (!handler) {\n        throw new InvalidArgument(MSG.INVALID_VALIDATOR_HANDLER(tag));\n    }\n\n    return handler(value, opValue, prefix, context);\n}\n\nfunction evaluate(value, tag, opValue, prefix, context) {\n    const handler = config.getProcessor(tag);\n\n    if (!handler) {\n        throw new InvalidArgument(MSG.INVALID_PROCESSOR_HANDLER(tag));\n    }\n\n    return handler(value, opValue, prefix, context);\n}\n\nfunction evaluateUnary(value, tag, prefix, context) {\n    const handler = config.getProcessor(tag);\n\n    if (!handler) {\n        throw new InvalidArgument(MSG.INVALID_PROCESSOR_HANDLER(tag));\n    }\n\n    return handler(value, prefix, context);\n}\n\nfunction evaluateByOpMeta(currentValue, rightValue, opMeta, prefix, context) {\n    if (opMeta[1]) {\n        return rightValue\n            ? evaluateUnary(currentValue, opMeta[0], prefix)\n            : currentValue;\n    }\n\n    return evaluate(currentValue, opMeta[0], rightValue, prefix, context);\n}\n\nfunction validateCollection(\n    actual,\n    collectionOp,\n    op,\n    expectedFieldValue,\n    prefix\n) {\n    const context = {};\n\n    switch (collectionOp) {\n        case PFX_FOR_EACH: {\n            const unmatchedKey = _findIndex(\n                actual,\n                (item) => !test(item, op, expectedFieldValue, prefix, context)\n            );\n\n            if (unmatchedKey !== -1) {\n                return [\n                    false,\n                    getUnmatchedExplanation(\n                        op,\n                        unmatchedKey,\n                        actual[unmatchedKey],\n                        expectedFieldValue,\n                        prefix,\n                        context\n                    ),\n                ];\n            }\n            break;\n        }\n\n        case PFX_WITH_ANY: {\n            const matched = _find(actual, (item) =>\n                test(item, op, expectedFieldValue, prefix, context)\n            );\n\n            if (!matched) {\n                return [\n                    false,\n                    getUnmatchedExplanation(\n                        op,\n                        null,\n                        actual,\n                        expectedFieldValue,\n                        prefix,\n                        context\n                    ),\n                ];\n            }\n            break;\n        }\n\n        default:\n            throw new InvalidArgument(MSG.INVALID_COLLECTION_OP(collectionOp));\n    }\n\n    return undefined;\n}\n\nfunction evaluateCollection(\n    currentValue,\n    collectionOp,\n    opMeta,\n    expectedFieldValue,\n    prefix,\n    context\n) {\n    switch (collectionOp) {\n        case PFX_FOR_EACH:\n            return (Array.isArray(currentValue)\n                ? _map\n                : _mapValues)(currentValue, (item, i) =>\n                evaluateByOpMeta(\n                    item,\n                    expectedFieldValue,\n                    opMeta,\n                    MSG.formatPrefix(i, prefix),\n                    { ...context, $$PARENT: currentValue, $$CURRENT: item }\n                )\n            );\n\n        default:\n            throw new InvalidArgument(MSG.INVALID_COLLECTION_OP(collectionOp));\n    }\n}\n\n/**\n * Validate the given object with JSON Expression Syntax (JES)\n * @param {*} actual - The object to match\n * @param {*} expected - Expected state in JSON Expression Syntax\n * @param {*} prefix - Tracking path\n *\n * { key: { $match } }\n */\nfunction match(actual, expected, prefix) {\n    let passObjectCheck = false;\n\n    if (!isPlainObject(expected)) {\n        if (!test(actual, 'OP_EQUAL', expected, prefix)) {\n            return [\n                false,\n                MSG.validationErrors.OP_EQUAL(null, actual, expected, prefix),\n            ];\n        }\n\n        return [true];\n    }\n\n    for (let fieldName in expected) {\n        let expectedFieldValue = expected[fieldName];\n\n        const l = fieldName.length;\n\n        if (l > 1) {\n            if (l > 3 && fieldName[0] === '|' && fieldName[2] === '$') {\n                //validators\n                const collectionOp = fieldName.substr(0, 2);\n                fieldName = fieldName.substr(2);\n\n                const op = config.getValidatorTag(fieldName);\n                if (!op) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_VALIDATION_OP(fieldName)\n                    );\n                }\n\n                const matchResult = validateCollection(\n                    actual,\n                    collectionOp,\n                    op,\n                    expectedFieldValue,\n                    prefix\n                );\n                if (matchResult) return matchResult;\n                continue;\n            }\n\n            if (fieldName[0] === '$') {\n                //validator\n                const op = config.getValidatorTag(fieldName);\n                if (!op) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_VALIDATION_OP(fieldName)\n                    );\n                }\n\n                const context = {};\n\n                if (!test(actual, op, expectedFieldValue, prefix, context)) {\n                    return [\n                        false,\n                        getUnmatchedExplanation(\n                            op,\n                            null,\n                            actual,\n                            expectedFieldValue,\n                            prefix,\n                            context\n                        ),\n                    ];\n                }\n\n                continue;\n            }\n        }\n\n        if (!passObjectCheck) {\n            if (actual == null)\n                return [\n                    false,\n                    MSG.validationErrors.OP_EXISTS(null, null, true, prefix),\n                ];\n\n            const actualType = typeof actual;\n\n            if (actualType !== 'object')\n                return [\n                    false,\n                    MSG.validationErrors.OP_TYPE(\n                        null,\n                        actualType,\n                        'object',\n                        prefix\n                    ),\n                ];\n        }\n\n        passObjectCheck = true;\n\n        let actualFieldValue = _get(actual, fieldName);\n\n        if (\n            expectedFieldValue != null &&\n            typeof expectedFieldValue === 'object'\n        ) {\n            const [ok, reason] = match(\n                actualFieldValue,\n                expectedFieldValue,\n                MSG.formatPrefix(fieldName, prefix)\n            );\n            if (!ok) {\n                return [false, reason];\n            }\n        } else {\n            if (\n                !test(actualFieldValue, 'OP_EQUAL', expectedFieldValue, prefix)\n            ) {\n                return [\n                    false,\n                    MSG.validationErrors.OP_EQUAL(\n                        fieldName,\n                        actualFieldValue,\n                        expectedFieldValue,\n                        prefix\n                    ),\n                ];\n            }\n        }\n    }\n\n    return [true];\n}\n\n/**\n * If $ operator used, only one a time is allowed\n * e.g.\n * {\n *    $groupBy: 'key'\n * }\n *\n *\n * @param {*} currentValue\n * @param {*} expr\n * @param {*} prefix\n * @param {*} context\n * @param {boolean} setOp - Whether the expression is a setOp\n */\nfunction evaluateExpr(currentValue, expr, prefix, context, setOp) {\n    if (Array.isArray(expr)) {\n        if (setOp) {\n            return expr.map((item) =>\n                evaluateExpr(undefined, item, prefix, { ...context }, true)\n            );\n        }\n\n        return expr.reduce(\n            (result, exprItem) =>\n                evaluateExpr(result, exprItem, prefix, { ...context }),\n            currentValue\n        );\n    }\n\n    const typeExpr = typeof expr;\n\n    if (typeExpr === 'boolean') {\n        if (setOp) return expr;\n        return expr ? currentValue : undefined;\n    }\n\n    if (typeExpr === 'number' || typeExpr === 'bigint') {\n        if (setOp) return expr;\n\n        throw new InvalidArgument(MSG.SYNTAX_NUMBER_AS_EXPR);\n    }\n\n    if (typeExpr === 'string') {\n        if (expr.startsWith('$$')) {\n            //get from context\n            const pos = expr.indexOf('.');\n            if (pos === -1) {\n                return context[expr];\n            }\n\n            return _get(context[expr.substr(0, pos)], expr.substr(pos + 1));\n        }\n\n        if (setOp) {\n            return expr;\n        }\n\n        const opMeta = config.getProcessorTagAndType(expr);\n        if (!opMeta) {\n            throw new InvalidArgument(MSG.INVALID_PROCESSING_OP(expr));\n        }\n\n        if (!opMeta[1]) {\n            throw new InvalidArgument(MSG.REQUIRE_RIGHT_OPERAND(expr));\n        }\n\n        return evaluateUnary(currentValue, opMeta[0], prefix);\n    }\n\n    if (typeExpr !== 'object') {\n        throw new InvalidArgument(MSG.SYNTAX_INVALID_EXPR);\n    }\n\n    if (setOp) {\n        return _mapValues(expr, (item) =>\n            evaluateExpr(undefined, item, prefix, context, true)\n        );\n    }\n\n    if (context == null) {\n        context = {\n            $$ROOT: currentValue,\n            $$PARENT: null,\n            $$CURRENT: currentValue,\n        };\n    }\n\n    let result,\n        hasOperator = false;\n\n    for (let fieldName in expr) {\n        let expectedFieldValue = expr[fieldName];\n\n        const l = fieldName.length;\n\n        if (l > 1) {\n            if (fieldName[0] === '$') {\n                if (result) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                const opMeta = config.getProcessorTagAndType(fieldName);\n                if (!opMeta) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_PROCESSING_OP(fieldName)\n                    );\n                }\n\n                if (hasOperator) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                result = evaluateByOpMeta(\n                    currentValue,\n                    expectedFieldValue,\n                    opMeta,\n                    prefix,\n                    context\n                );\n                hasOperator = true;\n                continue;\n            }\n\n            if (l > 3 && fieldName[0] === '|' && fieldName[2] === '$') {\n                if (result) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                const collectionOp = fieldName.substr(0, 2);\n                fieldName = fieldName.substr(2);\n\n                const opMeta = config.getProcessorTagAndType(fieldName);\n                if (!opMeta) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_PROCESSING_OP(fieldName)\n                    );\n                }\n\n                if (hasOperator) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                result = evaluateCollection(\n                    currentValue,\n                    collectionOp,\n                    opMeta,\n                    expectedFieldValue,\n                    prefix,\n                    context\n                );\n                hasOperator = true;\n                continue;\n            }\n        }\n\n        if (hasOperator) {\n            throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n        }\n\n        let compleyKey = fieldName.indexOf('.') !== -1;\n\n        //pick a field and then apply manipulation\n        let actualFieldValue =\n            currentValue != null\n                ? compleyKey\n                    ? _get(currentValue, fieldName)\n                    : currentValue[fieldName]\n                : undefined;\n\n        const childFieldValue = evaluateExpr(\n            actualFieldValue,\n            expectedFieldValue,\n            MSG.formatPrefix(fieldName, prefix),\n            context\n        );\n\n        if (typeof childFieldValue !== 'undefined') {\n            result == null && (result = {});\n            if (compleyKey) {\n                _set(result, fieldName, childFieldValue);\n            } else {\n                result[fieldName] = childFieldValue;\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * JSON Expression Syntax Object\n * @class\n */\nclass JES {\n    static config = config;\n    static match = match;\n    static evaluate = evaluateExpr;\n\n    /**\n     * @param {object} value\n     */\n    constructor(value) {\n        this.value = value;\n    }\n\n    /**\n     * Match the value with expected conditions in JSON expression\n     * @param {object} expected - JSON match expression\n     * @throws ValidationError\n     * @returns {JES}\n     */\n    match(expected) {\n        const result = match(this.value, expected);\n        if (result[0]) return this;\n\n        throw new ValidationError(result[1], {\n            actual: this.value,\n            expected,\n        });\n    }\n\n    /**\n     * Evaluate a JSON expression against the value\n     * @param {object} - JSON operation expression\n     */\n    evaluate(expr) {\n        return evaluateExpr(this.value, expr);\n    }\n\n    /**\n     * Evaluate a JSON expression against the value and update the value\n     * @param {object} - JSON operation expression\n     * @returns {JES}\n     */\n    update(expr) {\n        this.value = evaluateExpr(this.value, expr);\n        return this;\n    }\n}\n\nmodule.exports = JES;\n"]}