{"version":3,"sources":["msg.en-US.js"],"names":["config","require","formatName","name","prefix","fullName","formatPrefix","indexOf","formatKey","key","hasPrefix","Number","isInteger","messages","SYNTAX_OP_NOT_ALONE","SYNTAX_INVALID_EXPR","SYNTAX_NUMBER_AS_EXPR","INVALID_PROCESSING_OP","op","INVALID_VALIDATION_OP","INVALID_COLLECTION_OP","INVALID_PROCESSOR_HANDLER","tag","INVALID_TEST_HANLDER","OPERAND_NOT_TUPLE","OPERAND_NOT_TUPLE_2_OR_3","OPERAND_NOT_ARRAY","OPERAND_NOT_BOOL","OPERAND_NOT_STRING","OPERAND_NOT_OBJECT","VALUE_NOT_COLLECTION","VALUE_NOT_OBJECT","REQUIRE_RIGHT_OPERAND","validationErrors","OP_EQUAL","left","right","JSON","stringify","OP_NOT_EQUAL","OP_NOT","OP_GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","OP_LESS_THAN","OP_LESS_THAN_OR_EQUAL","OP_IN","OP_NOT_IN","OP_EXISTS","OP_TYPE","OP_MATCH","OP_MATCH_ANY","OP_HAS_KEYS","Array","isArray","join","OP_START_WITH","OP_END_WITH","loadMessages","module","exports"],"mappings":"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","sourcesContent":["const config = require('../config');\n\nconst formatName = (name, prefix) => {\n    const fullName = name == null ? prefix : formatPrefix(name, prefix);\n    return fullName == null\n        ? 'The value'\n        : fullName.indexOf('(') !== -1\n        ? `The query \"?.${fullName}\"`\n        : `\"${fullName}\"`;\n};\n\nconst formatKey = (key, hasPrefix) =>\n    Number.isInteger(key) ? `[${key}]` : hasPrefix ? '.' + key : key;\nconst formatPrefix = (key, prefix) =>\n    prefix != null ? `${prefix}${formatKey(key, true)}` : formatKey(key, false);\n\nconst messages = {\n    formatName,\n    formatKey,\n    formatPrefix,\n};\n\n//Exception messages\nmessages.SYNTAX_OP_NOT_ALONE =\n    'Processing operator can only be used alone in one pipeline stage.';\nmessages.SYNTAX_INVALID_EXPR = 'Invalid expression syntax.';\nmessages.SYNTAX_NUMBER_AS_EXPR =\n    'Number value cannot be used as a processor expression.';\n\nmessages.INVALID_PROCESSING_OP = (op) => `Invalid processing operator \"${op}\".`;\nmessages.INVALID_VALIDATION_OP = (op) => `Invalid validation operator \"${op}\".`;\nmessages.INVALID_COLLECTION_OP = (op) => `Invalid collection operator \"${op}\".`;\n\nmessages.INVALID_PROCESSOR_HANDLER = (tag) =>\n    `Handler for processor \"${tag}\" not found.`;\nmessages.INVALID_TEST_HANLDER = (tag) =>\n    `Handler for validator \"${tag}\" not found.`;\n\nmessages.OPERAND_NOT_TUPLE = (op) =>\n    `The right operand of a collection operator ${\n        op ? '\"' + op + '\" ' : ''\n    }must be a two-tuple.`;\nmessages.OPERAND_NOT_TUPLE_2_OR_3 = (op) =>\n    `The right operand of a \"${op}\" operator must be either a 2-tuple or a 3-tuple.`;\nmessages.OPERAND_NOT_ARRAY = (op) =>\n    `The right operand of a \"${op}\" operator must be an array.`;\nmessages.OPERAND_NOT_BOOL = (op) =>\n    `The right operand of a \"${op}\" operator must be a boolean value.`;\nmessages.OPERAND_NOT_STRING = (op) =>\n    `The right operand of a \"${op}\" operator must be a string.`;\nmessages.OPERAND_NOT_OBJECT = (op) =>\n    `The right operand of a \"${op}\" operator must be an object.`;\n\nmessages.VALUE_NOT_COLLECTION = (op) =>\n    `The value to take a \"${op}\" operator must be either an object or an array.`;\n\nmessages.VALUE_NOT_OBJECT = (op) =>\n    `The value to take a \"${op}\" operator must be an object.`;\n\nmessages.REQUIRE_RIGHT_OPERAND = (op) =>\n    `Binary query operator \"${op}\" requires the right operand.`;\n\nmessages.validationErrors = {\n    OP_EQUAL: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should be ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT_EQUAL: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not be ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not match ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_GREATER_THAN: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be greater than ${right}, but ${JSON.stringify(left)} given.`,\n    OP_GREATER_THAN_OR_EQUAL: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be greater than or equal to ${right}, but ${JSON.stringify(\n            left\n        )} given.`,\n    OP_LESS_THAN: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be less than ${right}, but ${JSON.stringify(left)} given.`,\n    OP_LESS_THAN_OR_EQUAL: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be less than or equal to ${right}, but ${JSON.stringify(\n            left\n        )} given.`,\n    OP_IN: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should be one of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT_IN: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not be any one of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_EXISTS: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should${right ? ' not ' : ' '}be NULL.`,\n    OP_TYPE: (name, left, right, prefix) =>\n        `The type of ${formatName(\n            name,\n            prefix\n        )} should be \"${right}\", but ${JSON.stringify(left)} given.`,\n    OP_MATCH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should match ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_MATCH_ANY: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should match any of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_HAS_KEYS: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should have all of these keys [${\n            Array.isArray(right) ? right.join(', ') : [right]\n        }].`,\n    OP_START_WITH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should start with \"${right}\".`,\n    OP_END_WITH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should end with \"${right}\".`,\n};\n\nconfig.loadMessages(messages);\n\nmodule.exports = () => {};\n"]}