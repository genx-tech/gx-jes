{"version":3,"sources":["msg.en-US.js"],"names":["formatName","name","prefix","fullName","formatPrefix","indexOf","formatKey","key","hasPrefix","Number","isInteger","messages","SYNTAX_OP_NOT_ALONE","SYNTAX_INVALID_EXPR","SYNTAX_NUMBER_AS_EXPR","INVALID_PROCESSING_OP","op","INVALID_VALIDATION_OP","INVALID_COLLECTION_OP","INVALID_PROCESSOR_HANDLER","tag","INVALID_TEST_HANLDER","OPERAND_NOT_TUPLE","OPERAND_NOT_TUPLE_2_OR_3","OPERAND_NOT_ARRAY","OPERAND_NOT_BOOL","OPERAND_NOT_STRING","OPERAND_NOT_OBJECT","VALUE_NOT_COLLECTION","VALUE_NOT_OBJECT","REQUIRE_RIGHT_OPERAND","validationErrors","OP_EQUAL","left","right","JSON","stringify","OP_NOT_EQUAL","OP_NOT","OP_GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","OP_LESS_THAN","OP_LESS_THAN_OR_EQUAL","OP_IN","OP_NOT_IN","OP_EXISTS","OP_TYPE","OP_MATCH","OP_MATCH_ANY","OP_HAS_KEYS","Array","isArray","join","OP_START_WITH","OP_END_WITH","config","loadMessages"],"mappings":"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","sourcesContent":["import config from '../config';\n\nconst formatName = (name, prefix) => {\n    const fullName = name == null ? prefix : formatPrefix(name, prefix);\n    return fullName == null\n        ? 'The value'\n        : fullName.indexOf('(') !== -1\n        ? `The query \"?.${fullName}\"`\n        : `\"${fullName}\"`;\n};\n\nconst formatKey = (key, hasPrefix) =>\n    Number.isInteger(key) ? `[${key}]` : hasPrefix ? '.' + key : key;\nconst formatPrefix = (key, prefix) =>\n    prefix != null ? `${prefix}${formatKey(key, true)}` : formatKey(key, false);\n\nconst messages = {\n    formatName,\n    formatKey,\n    formatPrefix,\n};\n\n//Exception messages\nmessages.SYNTAX_OP_NOT_ALONE =\n    'Processing operator can only be used alone in one pipeline stage.';\nmessages.SYNTAX_INVALID_EXPR = 'Invalid expression syntax.';\nmessages.SYNTAX_NUMBER_AS_EXPR =\n    'Number value cannot be used as a processor expression.';\n\nmessages.INVALID_PROCESSING_OP = (op) => `Invalid processing operator \"${op}\".`;\nmessages.INVALID_VALIDATION_OP = (op) => `Invalid validation operator \"${op}\".`;\nmessages.INVALID_COLLECTION_OP = (op) => `Invalid collection operator \"${op}\".`;\n\nmessages.INVALID_PROCESSOR_HANDLER = (tag) =>\n    `Handler for processor \"${tag}\" not found.`;\nmessages.INVALID_TEST_HANLDER = (tag) =>\n    `Handler for validator \"${tag}\" not found.`;\n\nmessages.OPERAND_NOT_TUPLE = (op) =>\n    `The right operand of a collection operator ${\n        op ? '\"' + op + '\" ' : ''\n    }must be a two-tuple.`;\nmessages.OPERAND_NOT_TUPLE_2_OR_3 = (op) =>\n    `The right operand of a \"${op}\" operator must be either a 2-tuple or a 3-tuple.`;\nmessages.OPERAND_NOT_ARRAY = (op) =>\n    `The right operand of a \"${op}\" operator must be an array.`;\nmessages.OPERAND_NOT_BOOL = (op) =>\n    `The right operand of a \"${op}\" operator must be a boolean value.`;\nmessages.OPERAND_NOT_STRING = (op) =>\n    `The right operand of a \"${op}\" operator must be a string.`;\nmessages.OPERAND_NOT_OBJECT = (op) =>\n    `The right operand of a \"${op}\" operator must be an object.`;\n\nmessages.VALUE_NOT_COLLECTION = (op) =>\n    `The value to take a \"${op}\" operator must be either an object or an array.`;\n\nmessages.VALUE_NOT_OBJECT = (op) =>\n    `The value to take a \"${op}\" operator must be an object.`;\n\nmessages.REQUIRE_RIGHT_OPERAND = (op) =>\n    `Binary query operator \"${op}\" requires the right operand.`;\n\nmessages.validationErrors = {\n    OP_EQUAL: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should be ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT_EQUAL: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not be ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not match ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_GREATER_THAN: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be greater than ${right}, but ${JSON.stringify(left)} given.`,\n    OP_GREATER_THAN_OR_EQUAL: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be greater than or equal to ${right}, but ${JSON.stringify(\n            left\n        )} given.`,\n    OP_LESS_THAN: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be less than ${right}, but ${JSON.stringify(left)} given.`,\n    OP_LESS_THAN_OR_EQUAL: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be less than or equal to ${right}, but ${JSON.stringify(\n            left\n        )} given.`,\n    OP_IN: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should be one of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT_IN: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not be any one of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_EXISTS: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should${right ? ' not ' : ' '}be NULL.`,\n    OP_TYPE: (name, left, right, prefix) =>\n        `The type of ${formatName(\n            name,\n            prefix\n        )} should be \"${right}\", but ${JSON.stringify(left)} given.`,\n    OP_MATCH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should match ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_MATCH_ANY: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should match any of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_HAS_KEYS: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should have all of these keys [${\n            Array.isArray(right) ? right.join(', ') : [right]\n        }].`,\n    OP_START_WITH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should start with \"${right}\".`,\n    OP_END_WITH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should end with \"${right}\".`,\n};\n\nconfig.loadMessages(messages);"]}