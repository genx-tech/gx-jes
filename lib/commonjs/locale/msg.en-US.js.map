{"version":3,"sources":["../../../src/locale/msg.en-US.js"],"names":["formatName","config","messages","nameOfValue","custom","lowerCase","validationErrors","vops","EQUAL","name","left","right","context","JSON","stringify","NOT_EQUAL","NOT","GREATER_THAN","GREATER_THAN_OR_EQUAL","LESS_THAN","LESS_THAN_OR_EQUAL","IN","NOT_IN","EXISTS","TYPE","MATCH","MATCH_ANY","ALL_MATCH","ANY_ONE_MATCH","HAS_KEYS","Array","isArray","join","START_WITH","END_WITH","SAME_AS","loadMessages"],"mappings":"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","sourcesContent":["import config from '../config';\nimport vops from '../validateOperators';\n\nconst { formatName } = config.messages;\n\nconst messages = {\n    nameOfValue: (custom) => (custom?.lowerCase ? 'the value' : 'The value'),\n    validationErrors: {\n        [vops.EQUAL]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must be ${JSON.stringify(right)}.`,\n        [vops.NOT_EQUAL]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must not be ${JSON.stringify(right)}.`,\n        [vops.NOT]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must not match ${JSON.stringify(right)}.`,\n        [vops.GREATER_THAN]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must be greater than ${right}.`,\n        [vops.GREATER_THAN_OR_EQUAL]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must be greater than or equal to ${right}.`,\n        [vops.LESS_THAN]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must be less than ${right}.`,\n        [vops.LESS_THAN_OR_EQUAL]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must not exceed ${right}.`,\n        [vops.IN]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must be one of ${JSON.stringify(right)}.`,\n        [vops.NOT_IN]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must not be any one of ${JSON.stringify(right)}.`,\n        [vops.EXISTS]: (name, left, right, context) =>\n            `${formatName(name, left, context)} ${right ? 'must not be null' : 'must be null'}.`,\n        [vops.TYPE]: (name, left, right, context) =>\n            `The value of ${formatName(name, left, context)} must be a(n) \"${right}\".`,\n        [vops.MATCH]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must match ${JSON.stringify(right)}.`,\n        [vops.MATCH_ANY]: (name, left, right, context) =>\n            `${formatName(name, left, context)} does not match any of given criterias.`,\n\n        [vops.ALL_MATCH]: (name, left, right, context) =>\n            `One of the element of ${formatName(name, left, context, {\n                lowerCase: true,\n            })} does not match the requirement(s).`,\n        [vops.ANY_ONE_MATCH]: (name, left, right, context) =>\n            `None of the element of ${formatName(name, left, context, {\n                lowerCase: true,\n            })} matches the requirement(s).`,\n\n        [vops.HAS_KEYS]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must have all of these keys [${\n                Array.isArray(right) ? right.join(', ') : [right]\n            }].`,\n        [vops.START_WITH]: (name, left, right, context) =>\n            `${formatName(name, left, context)} must start with \"${right}\".`,\n        [vops.END_WITH]: (name, left, right, context) => `${formatName(name, left, context)} must end with \"${right}\".`,\n        [vops.SAME_AS]: (name, left, right, context) =>\n            `${formatName(name, left, context)} does not match ${formatName(right)}.`,\n    },\n};\n\nconfig.loadMessages(messages);\n"],"file":"msg.en-US.js"}