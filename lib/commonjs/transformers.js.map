{"version":3,"sources":["../../src/transformers.js"],"names":["MSG","config","messages","UNARY","BINARY","OP_MATCH","ops","MATCH","OP_SIZE","SIZE","OP_SUM","SUM","OP_GET_TYPE","GET_TYPE","OP_GET_BY_INDEX","GET_BY_INDEX","OP_GET_BY_KEY","GET_BY_KEY","OP_FIND","FIND","OP_IF","IF","OP_CAST_ARRAY","CAST_ARRAY","OP_ADD","ADD","OP_SUB","SUB","OP_MUL","MUL","OP_DIV","DIV","OP_MOD","MOD","OP_KEYS","KEYS","OP_VALUES","VALUES","OP_ENTRIES","ENTRIES","OP_OBJ_TO_ARRAY","OBJ_TO_ARRAY","OP_PICK","PICK","OP_OMIT","OMIT","OP_SLICE","SLICE","OP_GROUP","GROUP","OP_SORT","SORT","OP_REVERSE","REVERSE","OP_JOIN","JOIN","OP_MERGE","MERGE","OP_FILTER","FILTER","OP_REMAP","REMAP","OP_TO_JSON","TO_JSON","OP_TO_OBJ","TO_OBJ","OP_SET","SET","OP_ADD_ITEM","ADD_ITEM","OP_ASSIGN","ASSIGN","OP_APPLY","APPLY","OP_INTERPOLATE","INTERPOLATE","matchOptions","throwError","abortEarly","asPredicate","addTransformerToMap","left","right","context","validators","sum","item","Array","isArray","Number","isInteger","targetValue","console","log","predicate","value","Error","OPERAND_NOT_ARRAY","length","OPERAND_NOT_TUPLE_2_OR_3","condition","key","v","k","VALUE_NOT_ARRAY","slice","INVALID_OP_EXPR","join","toString","objectMerger","result","expr","Object","assign","arrayMerger","reduce","VALUE_NOT_COLLECTION","path","makePath","OPERAND_NOT_TUPLE","OPERAND_NOT_OBJECT","JSON","stringify","parse","undefined","concat","VALUE_NOT_OBJECT","rightValue","transform","VALUE_NOT_STRING"],"mappings":"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","sourcesContent":["// JSON Expression Syntax (JES)\nimport _size from 'lodash/size';\nimport _reduce from 'lodash/reduce';\nimport _reverse from 'lodash/reverse';\nimport _keys from 'lodash/keys';\nimport _values from 'lodash/values';\nimport _pick from 'lodash/pick';\nimport _pickBy from 'lodash/pickBy';\nimport _nth from 'lodash/nth';\nimport _omit from 'lodash/omit';\nimport _omitBy from 'lodash/omitBy';\nimport _groupBy from 'lodash/groupBy';\nimport _sortBy from 'lodash/sortBy';\nimport _filter from 'lodash/filter';\nimport _map from 'lodash/map';\nimport _mapValues from 'lodash/mapValues';\nimport _findIndex from 'lodash/findIndex';\nimport _findKey from 'lodash/findKey';\nimport _isEqual from 'lodash/isEqual';\n\nimport { remap, isPlainObject, get as _get, template } from '@genx/july';\n\nimport config, { getChildContext } from './config';\nimport ops from './transformerOperators';\nimport validators from './validateOperators';\nimport { test } from './validate';\nimport './validators';\nimport transform from './transform';\n\nconst MSG = config.messages;\n\nconst UNARY = true;\nconst BINARY = false;\n\n//Query & aggregate operators (pure)\nconst OP_MATCH = [ops.MATCH, BINARY, '$has', '$match', '$all', '$validate', '$when'];\nconst OP_SIZE = [ops.SIZE, UNARY, '$size', '$length', '$count'];\nconst OP_SUM = [ops.SUM, UNARY, '$sum', '$total'];\nconst OP_GET_TYPE = [ops.GET_TYPE, UNARY, '$type'];\nconst OP_GET_BY_INDEX = [ops.GET_BY_INDEX, BINARY, '$at', '$getByIndex', '$nth']; // supports -1 as the last index, -2 the second last\nconst OP_GET_BY_KEY = [ops.GET_BY_KEY, BINARY, '$of', '$valueOf', '$getByKey']; // support key path\nconst OP_FIND = [ops.FIND, BINARY, '$indexOf', '$keyOf'];\nconst OP_IF = [ops.IF, BINARY, '$if'];\nconst OP_CAST_ARRAY = [ops.CAST_ARRAY, UNARY, '$castArray', '$makeArray'];\n\n//Math operators (pure)\nconst OP_ADD = [ops.ADD, BINARY, '$add', '$plus', '$inc'];\nconst OP_SUB = [ops.SUB, BINARY, '$sub', '$subtract', '$minus', '$dec'];\nconst OP_MUL = [ops.MUL, BINARY, '$mul', '$multiply', '$times'];\nconst OP_DIV = [ops.DIV, BINARY, '$div', '$divide'];\nconst OP_MOD = [ops.MOD, BINARY, '$mod', '$remainder'];\n\n//Collection operators (pure)\nconst OP_KEYS = [ops.KEYS, UNARY, '$keys'];\nconst OP_VALUES = [ops.VALUES, UNARY, '$values'];\nconst OP_ENTRIES = [ops.ENTRIES, UNARY, '$entries'];\nconst OP_OBJ_TO_ARRAY = [ops.OBJ_TO_ARRAY, UNARY, '$toArray', '$objectToArray'];\nconst OP_PICK = [ops.PICK, BINARY, '$pick', '$pickBy', '$filterByKeys']; // filter by key\nconst OP_OMIT = [ops.OMIT, BINARY, '$omit', '$omitBy'];\nconst OP_SLICE = [ops.SLICE, BINARY, '$slice', '$limit'];\nconst OP_GROUP = [ops.GROUP, BINARY, '$group', '$groupBy'];\nconst OP_SORT = [ops.SORT, BINARY, '$sort', '$orderBy', '$sortBy'];\nconst OP_REVERSE = [ops.REVERSE, UNARY, '$reverse'];\nconst OP_JOIN = [ops.JOIN, BINARY, '$join'];\nconst OP_MERGE = [ops.MERGE, BINARY, '$merge']; // merge a list of transform result over the value\nconst OP_FILTER = [ops.FILTER, BINARY, '$filter', '$select', '$filterByValue']; // filter by value\nconst OP_REMAP = [ops.REMAP, BINARY, '$remap', '$mapKeys']; // reverse-map, map a key to another name\nconst OP_TO_JSON = [ops.TO_JSON, UNARY, '$json', '$toJSON', '$stringify'];\nconst OP_TO_OBJ = [ops.TO_OBJ, UNARY, '$object', '$toObject', '$parseJSON'];\n\n//Value updater (pure)\nconst OP_SET = [ops.SET, BINARY, '$set', '$=', '$value'];\nconst OP_ADD_ITEM = [ops.ADD_ITEM, BINARY, '$addItem', '$addFields'];\nconst OP_ASSIGN = [ops.ASSIGN, BINARY, '$assign', '$override'];\nconst OP_APPLY = [ops.APPLY, BINARY, '$apply', '$eval']; // to be used in collection\n\n//String manipulate\nconst OP_INTERPOLATE = [ops.INTERPOLATE, BINARY, '$interpolate', '$template'];\n\n// [ <op name>, <unary> ]\n//embeded validators in processing pipeline\nconst matchOptions = { throwError: false, abortEarly: true, asPredicate: true };\n\nconfig.addTransformerToMap(OP_MATCH, (left, right, context) =>\n    test(left, validators.MATCH, right, matchOptions, context)\n);\n\nconfig.addTransformerToMap(OP_SIZE, (left) => _size(left));\n\nconfig.addTransformerToMap(OP_SUM, (left) =>\n    _reduce(\n        left,\n        (sum, item) => {\n            sum += item;\n            return sum;\n        },\n        0\n    )\n);\n\nconfig.addTransformerToMap(OP_GET_TYPE, (left) =>\n    Array.isArray(left) ? 'array' : Number.isInteger(left) ? 'integer' : typeof left\n);\n\nconfig.addTransformerToMap(OP_GET_BY_INDEX, (left, right) => _nth(left, right));\nconfig.addTransformerToMap(OP_GET_BY_KEY, (left, right) => _get(left, right));\n\nconfig.addTransformerToMap(OP_FIND, (left, right, context) => {\n    const targetValue = transform(null, right, context);\n    console.log(left, targetValue, context);\n    const predicate = (value) => _isEqual(value, targetValue);\n    return Array.isArray(left) ? _findIndex(left, predicate) : _findKey(left, predicate);\n});\n\nconfig.addTransformerToMap(OP_IF, (left, right, context) => {\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.IF));\n    }\n\n    if (right.length < 2 || right.length > 3) {\n        throw new Error(MSG.OPERAND_NOT_TUPLE_2_OR_3(ops.IF));\n    }\n\n    const condition = transform(left, right[0], context);\n\n    if (condition) {\n        return transform(left, right[1], context);\n    } else if (right.length > 2) {\n        return transform(left, right[2], context);\n    }\n\n    return left;\n});\n\nconfig.addTransformerToMap(OP_CAST_ARRAY, (left) => (left == null ? null : Array.isArray(left) ? left : [left]));\n\nconfig.addTransformerToMap(OP_ADD, (left, right) => left + right);\nconfig.addTransformerToMap(OP_SUB, (left, right) => left - right);\nconfig.addTransformerToMap(OP_MUL, (left, right) => left * right);\nconfig.addTransformerToMap(OP_DIV, (left, right) => left / right);\nconfig.addTransformerToMap(OP_MOD, (left, right) => left % right);\n\nconfig.addTransformerToMap(OP_KEYS, (left) => _keys(left));\nconfig.addTransformerToMap(OP_VALUES, (left) => _values(left));\nconfig.addTransformerToMap(OP_ENTRIES, (left) => _map(left, (value, key) => [key, value]));\nconfig.addTransformerToMap(OP_OBJ_TO_ARRAY, (left) => _map(left, (v, k) => ({ k, v })));\n\nconfig.addTransformerToMap(OP_PICK, (left, right, context) => {\n    if (left == null) {\n        return null;\n    }\n\n    if (typeof right !== 'object') {\n        right = [right];\n    }\n\n    if (Array.isArray(right)) {\n        return _pick(left, right);\n    }\n\n    return _pickBy(left, (item, key) =>\n        test(key, validators.MATCH, right, matchOptions, getChildContext(context, left, key, item))\n    );\n});\n\nconfig.addTransformerToMap(OP_OMIT, (left, right, context) => {\n    if (left == null) {\n        return null;\n    }\n\n    if (typeof right !== 'object') {\n        right = [right];\n    }\n\n    if (Array.isArray(right)) {\n        return _omit(left, right);\n    }\n\n    return _omitBy(left, (item, key) =>\n        test(key, validators.MATCH, right, matchOptions, getChildContext(context, left, key, item))\n    );\n});\n\nconfig.addTransformerToMap(OP_SLICE, (left, right) => {\n    if (left == null) {\n        return null;\n    }\n\n    if (!Array.isArray(left)) {\n        return new Error(MSG.VALUE_NOT_ARRAY(ops.SLICE));\n    }\n\n    if (Number.isInteger(right)) {\n        return left.slice(right);\n    }\n\n    if (Array.isArray(right)) {\n        if (right.length === 0 || right.length > 2) {\n            return new Error(MSG.INVALID_OP_EXPR(ops.SLICE, right));\n        }\n\n        return left.slice(...right);\n    }\n\n    return new Error(MSG.INVALID_OP_EXPR(ops.SLICE, right));\n});\n\nconfig.addTransformerToMap(OP_GROUP, (left, right) => _groupBy(left, right));\nconfig.addTransformerToMap(OP_SORT, (left, right) => _sortBy(left, right));\nconfig.addTransformerToMap(OP_REVERSE, (left) => _reverse(left));\n\nconfig.addTransformerToMap(OP_JOIN, (left, right) => {\n    if (left == null) {\n        return null;\n    }\n    if (!Array.isArray(left)) {\n        throw new Error(MSG.VALUE_NOT_ARRAY(ops.JOIN));\n    }\n\n    return left.join(right.toString());\n});\n\nconst objectMerger = (left, context) => [(result, expr) => Object.assign(result, transform(left, expr, context)), {}];\n\nconst arrayMerger = (left, context) => [(result, expr) => [...result, ...transform(left, expr, context)], []];\n\nconfig.addTransformerToMap(OP_MERGE, (left, right, context) => {\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.MERGE));\n    }\n\n    return right.reduce(...(Array.isArray(left) ? arrayMerger(left, context) : objectMerger(left, context)));\n});\n\nconfig.addTransformerToMap(OP_FILTER, (left, right, context) => {\n    if (left == null) {\n        return null;\n    }\n\n    if (typeof left !== 'object') {\n        throw new Error(MSG.VALUE_NOT_COLLECTION(ops.FILTER));\n    }\n\n    return _filter(left, (value, key) =>\n        test(value, validators.MATCH, right, matchOptions, {\n            path: MSG.makePath(key, context.path),\n        })\n    );\n});\nconfig.addTransformerToMap(OP_REMAP, (left, right) => {\n    if (left == null) {\n        return null;\n    }\n\n    if (typeof left !== 'object') {\n        throw new Error(MSG.VALUE_NOT_COLLECTION(ops.REMAP));\n    }\n\n    if (Array.isArray(right)) {\n        if (right.length !== 2) {\n            throw new Error(MSG.OPERAND_NOT_TUPLE(ops.REMAP));\n        }\n\n        return remap(left, right[0], right[1]);\n    }\n\n    if (!isPlainObject(right)) {\n        throw new Error(MSG.OPERAND_NOT_OBJECT(ops.REMAP));\n    }\n\n    return remap(left, right);\n});\n\nconfig.addTransformerToMap(OP_TO_JSON, (left) => (left == null ? left : JSON.stringify(left)));\nconfig.addTransformerToMap(OP_TO_OBJ, (left) => (left == null ? left : JSON.parse(left)));\n\nconfig.addTransformerToMap(OP_SET, (left, right, context) => transform(undefined, right, context, true));\nconfig.addTransformerToMap(OP_ADD_ITEM, (left, right, context) => {\n    if (typeof left !== 'object') {\n        throw new Error(MSG.VALUE_NOT_COLLECTION(ops.ADD_ITEM));\n    }\n\n    if (Array.isArray(left)) {\n        return left.concat(transform(left, right, context));\n    }\n\n    if (!Array.isArray(right) || right.length !== 2) {\n        throw new Error(MSG.OPERAND_NOT_TUPLE(ops.ADD_ITEM));\n    }\n\n    return {\n        ...left,\n        [right[0]]: transform(left, right[1], context),\n    };\n});\nconfig.addTransformerToMap(OP_ASSIGN, (left, right, context) => {\n    if (!isPlainObject(left)) {\n        if (left == null) {\n            left = {};\n        } else {\n            throw new Error(MSG.VALUE_NOT_OBJECT(ops.ASSIGN));\n        }\n    }\n\n    if (!isPlainObject(right)) {\n        throw new Error(MSG.OPERAND_NOT_OBJECT(ops.ASSIGN));\n    }\n\n    const rightValue = _mapValues(right, (expr, key) =>\n        transform(left[key], expr, getChildContext(context, left, key, left[key]))\n    );\n\n    return { ...left, ...rightValue };\n});\n\nconfig.addTransformerToMap(OP_APPLY, transform);\n\nconfig.addTransformerToMap(OP_INTERPOLATE, (left, right) => {\n    if (typeof left !== 'string') {\n        throw new Error(MSG.VALUE_NOT_STRING(ops.INTERPOLATE));\n    }\n\n    if (right != null && typeof right !== 'object') {\n        throw new Error(MSG.OPERAND_NOT_OBJECT(ops.INTERPOLATE));\n    }\n\n    return template(left, right);\n});\n\nexport default transform;\n"],"file":"transformers.js"}