{"version":3,"sources":["../../../src/types/array.js"],"names":["name","alias","validate","value","itemSchema","options","useFieldPath","abortEarly","throwError","context","Array","isArray","errors","fieldValue","i","path","messages","makePath","reason","$$PARENT","$$CURRENT","ValidationError","push","length"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;;;;;;;eAEe;AACXA,EAAAA,IAAI,EAAE,OADK;AAGXC,EAAAA,KAAK,EAAE,CAAC,MAAD,CAHI;AAaXC,EAAAA,QAAQ,EAAE,CACNC,KADM,EAENC,UAFM,EAGNC,OAAO,GAAG;AAAEC,IAAAA,YAAY,EAAE,IAAhB;AAAsBC,IAAAA,UAAU,EAAE,IAAlC;AAAwCC,IAAAA,UAAU,EAAE;AAApD,GAHJ,EAINC,OAAO,GAAG,EAJJ,KAKL;AACD,UAAM;AAAEF,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA6BH,OAAnC;;AAEA,QAAIF,KAAK,IAAI,IAAT,IAAiB,CAACO,KAAK,CAACC,OAAN,CAAcR,KAAd,CAAtB,EAA4C;AACxC,aAAO,2BAAYA,KAAZ,EAAmB,OAAnB,EAA4BE,OAA5B,EAAqCI,OAArC,CAAP;AACH;;AAED,QAAI,OAAOL,UAAP,KAAsB,UAA1B,EAAsC;AAElCA,MAAAA,UAAU,GAAGA,UAAU,EAAvB;AACH;;AAED,QAAID,KAAJ,EAAW;AACP,YAAMS,MAAM,GAAG,EAAf;AAEA,0BAAMT,KAAN,EAAa,CAACU,UAAD,EAAaC,CAAb,KAAmB;AAC5B,cAAMC,IAAI,GAAGC,iBAASC,QAAT,CAAkBH,CAAlB,EAAqBL,OAAO,CAACM,IAA7B,CAAb;;AACA,cAAMG,MAAM,GAAG,uBAASL,UAAT,EAAqBT,UAArB,EAAiCC,OAAjC,EAA0C;AACrDL,UAAAA,IAAI,EAAE,IAD+C;AAErDe,UAAAA,IAFqD;AAGrDI,UAAAA,QAAQ,EAAEhB,KAH2C;AAIrDiB,UAAAA,SAAS,EAAEP;AAJ0C,SAA1C,CAAf;;AAOA,YAAIK,MAAM,KAAK,IAAf,EAAqB;AACjB,cAAIX,UAAJ,EAAgB;AACZ,gBAAIC,UAAJ,EAAgB;AACZ,oBAAM,IAAIa,wBAAJ,CAAoBH,MAApB,EAA4BL,UAA5B,EAAwCE,IAAxC,CAAN;AACH;;AAED,mBAAOG,MAAP;AACH;;AAEDN,UAAAA,MAAM,CAACU,IAAP,CAAY,GAAGJ,MAAf;AACH;AACJ,OApBD;;AAsBA,UAAIN,MAAM,CAACW,MAAP,GAAgB,CAApB,EAAuB;AACnB,YAAIf,UAAJ,EAAgB;AACZ,gBAAM,IAAIa,wBAAJ,CAAoBT,MAApB,EAA4BT,KAA5B,EAAmCM,OAAO,CAACM,IAA3C,CAAN;AACH;;AAED,eAAOH,MAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH;AAjEU,C","sourcesContent":["import _find from 'lodash/find';\n\nimport ValidationError from '../ValidationError';\nimport { messages } from '../config';\nimport validate, { invalidType } from '../validate';\n\nexport default {\n    name: 'array',\n\n    alias: ['list'],\n\n    /**\n     *\n     * @param {*} value\n     * @param {*} itemSchema\n     * @param {*} options\n     * @param {*} context\n     * @returns {true|ValidationError}\n     */\n    validate: (\n        value,\n        itemSchema,\n        options = { useFieldPath: true, abortEarly: true, throwError: true },\n        context = {}\n    ) => {\n        const { abortEarly, throwError } = options;\n\n        if (value != null && !Array.isArray(value)) {\n            return invalidType(value, 'array', options, context);\n        }\n\n        if (typeof itemSchema === 'function') {\n            // use deferred activation of schema to avoid circullar reference\n            itemSchema = itemSchema();\n        }\n\n        if (value) {\n            const errors = [];\n\n            _find(value, (fieldValue, i) => {\n                const path = messages.makePath(i, context.path);\n                const reason = validate(fieldValue, itemSchema, options, {\n                    name: null,\n                    path,\n                    $$PARENT: value,\n                    $$CURRENT: fieldValue,\n                });\n\n                if (reason !== true) {\n                    if (abortEarly) {\n                        if (throwError) {\n                            throw new ValidationError(reason, fieldValue, path);\n                        }\n\n                        return reason;\n                    }\n\n                    errors.push(...reason);\n                }\n            });\n\n            if (errors.length > 0) {\n                if (throwError) {\n                    throw new ValidationError(errors, value, context.path);\n                }\n\n                return errors;\n            }\n        }\n\n        return true;\n    },\n};\n"],"file":"array.js"}