{"version":3,"sources":["../../../src/types/object.js"],"names":["validateBySchema","value","schema","options","useFieldPath","abortEarly","throwError","context","mapOfNames","errors","_options","validationObject","fieldName","fieldValue","reason","path","messages","makePath","$$PARENT","$$CURRENT","ValidationError","push","length","name","alias","validate"],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;AAEO,SAASA,gBAAT,CACHC,KADG,EAEHC,MAFG,EAGHC,OAAO,GAAG;AAAEC,EAAAA,YAAY,EAAE,IAAhB;AAAsBC,EAAAA,UAAU,EAAE,IAAlC;AAAwCC,EAAAA,UAAU,EAAE;AAApD,CAHP,EAIHC,OAAO,GAAG,EAJP,EAKL;AACE,QAAM;AAAEH,IAAAA,YAAF;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA,UAA5B;AAAwCE,IAAAA;AAAxC,MAAuDL,OAA7D;;AAEA,MAAIF,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,QAAtC,EAAgD;AAC5C,WAAO,2BAAYA,KAAZ,EAAmB,QAAnB,EAA6BE,OAA7B,EAAsCI,OAAtC,CAAP;AACH;;AAED,MAAI,OAAOL,MAAP,KAAkB,UAAtB,EAAkC;AAE9BA,IAAAA,MAAM,GAAGA,MAAM,EAAf;AACH;;AAED,QAAMO,MAAM,GAAG,EAAf;;AACA,QAAMC,QAAQ,GAAG,CAACL,UAAD,IAAeC,UAAf,GAA4B,EAAE,GAAGH,OAAL;AAAcG,IAAAA,UAAU,EAAE;AAA1B,GAA5B,GAAgEH,OAAjF;;AAEA,sBAAMD,MAAN,EAAc,CAACS,gBAAD,EAAmBC,SAAnB,KAAiC;AAC3C,UAAMC,UAAU,GAAGT,YAAY,GAAG,eAAKH,KAAL,EAAYW,SAAZ,CAAH,GAA4BX,KAA5B,aAA4BA,KAA5B,uBAA4BA,KAAK,CAAGW,SAAH,CAAhE;AACA,UAAME,MAAM,GAAG,uBAASD,UAAT,EAAqBF,gBAArB,EAAuCD,QAAvC,EAAiD;AAC5DK,MAAAA,IAAI,EAAEC,iBAASC,QAAT,CAAkB,CAAAT,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAGI,SAAH,CAAV,KAA2BA,SAA7C,EAAwDL,OAAO,CAACQ,IAAhE,CADsD;AAE5DG,MAAAA,QAAQ,EAAEjB,KAFkD;AAG5DkB,MAAAA,SAAS,EAAEN;AAHiD,KAAjD,CAAf;;AAMA,QAAIC,MAAM,KAAK,IAAf,EAAqB;AACjB,UAAIT,UAAU,IAAIC,UAAlB,EAA8B;AAC1B,cAAM,IAAIc,wBAAJ,CAAoBN,MAApB,EAA4BD,UAA5B,EAAwCD,SAAxC,CAAN;AACH;;AAEDH,MAAAA,MAAM,CAACY,IAAP,CAAY,GAAGP,MAAf;AACA,aAAOT,UAAP;AACH;;AAED,WAAO,KAAP;AACH,GAlBD;;AAoBA,MAAII,MAAM,CAACa,MAAP,GAAgB,CAApB,EAAuB;AACnB,QAAIhB,UAAJ,EAAgB;AACZ,YAAM,IAAIc,wBAAJ,CAAoBX,MAApB,EAA4BR,KAA5B,EAAmCM,OAAO,CAACQ,IAA3C,CAAN;AACH;;AAED,WAAON,MAAP;AACH;;AAED,SAAO,IAAP;AACH;;eAEc;AACXc,EAAAA,IAAI,EAAE,QADK;AAGXC,EAAAA,KAAK,EAAE,CAAC,MAAD,CAHI;AAKXC,EAAAA,QAAQ,EAAEzB;AALC,C","sourcesContent":["import _find from 'lodash/find';\nimport { get as _get } from '@genx/july';\n\nimport ValidationError from '../ValidationError';\nimport { messages } from '../config';\nimport validate, { invalidType } from '../validate';\n\nexport function validateBySchema(\n    value,\n    schema,\n    options = { useFieldPath: true, abortEarly: true, throwError: true },\n    context = {}\n) {\n    const { useFieldPath, abortEarly, throwError, mapOfNames } = options;\n\n    if (value != null && typeof value !== 'object') {\n        return invalidType(value, 'object', options, context);\n    }\n\n    if (typeof schema === 'function') {\n        // use deferred activation of schema to avoid circullar reference\n        schema = schema();\n    }\n\n    const errors = [];\n    const _options = !abortEarly && throwError ? { ...options, throwError: false } : options;\n\n    _find(schema, (validationObject, fieldName) => {\n        const fieldValue = useFieldPath ? _get(value, fieldName) : value?.[fieldName];\n        const reason = validate(fieldValue, validationObject, _options, {\n            path: messages.makePath(mapOfNames?.[fieldName] ?? fieldName, context.path),\n            $$PARENT: value,\n            $$CURRENT: fieldValue,\n        });\n\n        if (reason !== true) {\n            if (abortEarly && throwError) {\n                throw new ValidationError(reason, fieldValue, fieldName);\n            }\n\n            errors.push(...reason);\n            return abortEarly;\n        }\n\n        return false;\n    });\n\n    if (errors.length > 0) {\n        if (throwError) {\n            throw new ValidationError(errors, value, context.path);\n        }\n\n        return errors;\n    }\n\n    return true;\n}\n\nexport default {\n    name: 'object',\n\n    alias: ['json'],\n\n    validate: validateBySchema,\n};\n"],"file":"object.js"}