{"version":3,"sources":["../../src/validate.js"],"names":["MSG","config","messages","getUnmatchedExplanation","op","leftValue","rightValue","context","$$ERROR","validationErrors","Error","getter","name","invalidType","value","type","options","reason","ops","TYPE","throwError","ValidationError","path","plainError","test","left","right","handler","getValidator","INVALID_TEST_HANLDER","validate","actual","expectedJES","abortEarly","length","SYNTAX_INVALID_EXPR","asPredicate","errors","_options","operator","_context","opValue","getValidatorTag","UNSUPPORTED_VALIDATION_OP","fieldName","complexKey","indexOf","undefined","MATCH","EQUAL","push"],"mappings":"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","sourcesContent":["// JSON Expression Syntax (JES) for validation\nimport ValidationError from './ValidationError';\nimport config, { getChildContext } from './config';\nimport ops from './validateOperators';\nimport { isPlainObject, get as _get } from '@genx/july';\n\nconst MSG = config.messages;\n\nfunction getUnmatchedExplanation(op, leftValue, rightValue, context) {\n    if (context.$$ERROR) {\n        return context.$$ERROR;\n    }\n\n    if (!MSG.validationErrors) {\n        throw new Error('Please import locale first before using validators.');\n    }\n    const getter = MSG.validationErrors[op];\n    return getter(context.name, leftValue, rightValue, context);\n}\n\nexport function invalidType(value, type, options, context) {\n    const reason = MSG.validationErrors[ops.TYPE](context.name, value, type, context);\n\n    if (options.throwError) {\n        throw new ValidationError(reason, value, context.path);\n    }\n\n    return options.plainError ? reason : new ValidationError(reason, value, context.path);\n}\n\nexport function test(left, op, right, options, context) {\n    const handler = config.getValidator(op);\n\n    if (!handler) {\n        throw new Error(MSG.INVALID_TEST_HANLDER(op));\n    }\n\n    return handler(left, right, options, context);\n}\n\n/**\n * Validate the given object with JSON Expression Syntax (JES)\n * @param {*} actual - The object to match\n * @param {*} expectedJES - Expected state in JSON Expression Syntax\n * @param {*} options - Validation options\n * @param {*} context - Validation context\n * @returns {array} - [ {boolean} matched, {string} unmatchedReason ]\n */\nfunction validate(actual, expectedJES, options = { throwError: true, abortEarly: true }, context = {}) {\n    const type = typeof expectedJES;\n\n    if (type === 'string') {\n        if (expectedJES.length === 0 || expectedJES[0] !== '$') {\n            throw new Error(MSG.SYNTAX_INVALID_EXPR(expectedJES));\n        }\n\n        return validate(actual, { [expectedJES]: null }, options, context);\n    }\n\n    const { throwError, abortEarly, asPredicate, plainError } = options;\n\n    if (expectedJES == null) {\n        return true;\n    }\n\n    let { path } = context;\n    const errors = [];\n    const _options = !abortEarly && throwError ? { ...options, throwError: false } : options;\n\n    for (let operator in expectedJES) {\n        let op, left, _context;\n\n        const opValue = expectedJES[operator];\n\n        if (\n            // $match\n            (operator.length > 1 && operator[0] === '$') ||\n            // |>$all\n            (operator.length > 3 && operator[0] === '|' && operator[2] === '$')\n        ) {\n            //validator\n            op = config.getValidatorTag(operator);\n            if (!op) {\n                throw new Error(MSG.UNSUPPORTED_VALIDATION_OP(operator, path));\n            }\n\n            left = actual;\n            _context = context;\n        } else {\n            const fieldName = operator;\n            let complexKey = fieldName.indexOf('.') !== -1;\n\n            //pick a field and then apply manipulation\n            left = actual != null ? (complexKey ? _get(actual, fieldName) : actual[fieldName]) : undefined;\n\n            _context = getChildContext(context, actual, fieldName, left);\n\n            if (opValue != null && isPlainObject(opValue)) {\n                op = ops.MATCH;\n            } else {\n                op = ops.EQUAL;\n            }\n        }\n\n        if (!test(left, op, opValue, _options, _context)) {\n            if (asPredicate) {\n                return false;\n            }\n\n            const reason = getUnmatchedExplanation(op, left, opValue, _context);\n            if (abortEarly && throwError) {\n                throw new ValidationError(reason, left, _context.path);\n            }\n\n            errors.push(plainError ? reason : new ValidationError(reason, left, _context.path));\n            if (abortEarly) {\n                break;\n            }\n        }\n    }\n\n    if (errors.length > 0) {\n        if (asPredicate) {\n            return false;\n        }\n\n        if (throwError) {\n            throw new ValidationError(errors, actual, path);\n        }\n\n        return errors.length === 1 && plainError ? errors[0] : errors;\n    }\n\n    return true;\n}\n\nexport default validate;\n"],"file":"validate.js"}