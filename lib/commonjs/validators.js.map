{"version":3,"sources":["../../src/validators.js"],"names":["MSG","config","messages","OP_EQUAL","ops","EQUAL","OP_NOT_EQUAL","NOT_EQUAL","OP_NOT","NOT","OP_GREATER_THAN","GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","OP_LESS_THAN","LESS_THAN","OP_LESS_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL","OP_LENGTH","LENGTH","OP_IN","IN","OP_NOT_IN","NOT_IN","OP_EXISTS","EXISTS","OP_MATCH","MATCH","OP_MATCH_ANY","MATCH_ANY","OP_ALL_MATCH","ALL_MATCH","OP_ANY_ONE_MATCH","ANY_ONE_MATCH","OP_TYPE","TYPE","OP_HAS_KEYS","HAS_KEYS","OP_START_WITH","START_WITH","OP_END_WITH","END_WITH","OP_SAME_AS","SAME_AS","addValidatorToMap","left","right","args","options","context","undefined","Array","isArray","Error","OPERAND_NOT_ARRAY","equal","getValidator","find","element","notEqual","every","OPERAND_NOT_BOOL","errors","rule","reason","asPredicate","push","abortEarly","length","throwError","ValidationError","path","$$ERROR","plainError","reason2","found","validationErrors","name","VALUE_NOT_ARRAY","leftItem","type","schema","INVALID_OP_EXPR","Types","Builtin","has","UNSUPPORTED_TYPE","validate","key","OPERAND_NOT_STRING","startsWith","endsWith","VALUE_NOT_PRIMITIVE","$$PARENT"],"mappings":"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","sourcesContent":["// JSON Expression Syntax (JES) for validation\nimport _isEqual from 'lodash/isEqual';\nimport _has from 'lodash/has';\nimport _size from 'lodash/size';\nimport _castArray from 'lodash/castArray';\n\nimport ValidationError from './ValidationError';\nimport validate, { test } from './validate';\n\nimport config from './config';\nimport Types from './types';\nimport ops from './validateOperators';\nimport { isPlainObject } from '@genx/july';\nimport transform from './transform';\n\nconst MSG = config.messages;\n\n//Validators [ name, ...operator alias ]\nconst OP_EQUAL = [ops.EQUAL, '$eq', '$eql', '$equal', '$being'];\nconst OP_NOT_EQUAL = [ops.NOT_EQUAL, '$ne', '$neq', '$notEqual'];\nconst OP_NOT = [ops.NOT, '$not'];\nconst OP_GREATER_THAN = [ops.GREATER_THAN, '$gt', '$>', '$greaterThan'];\nconst OP_GREATER_THAN_OR_EQUAL = [ops.GREATER_THAN_OR_EQUAL, '$gte', '$>=', '$greaterThanOrEqual', '$min'];\nconst OP_LESS_THAN = [ops.LESS_THAN, '$lt', '$<', '$lessThan'];\nconst OP_LESS_THAN_OR_EQUAL = [ops.LESS_THAN_OR_EQUAL, '$lte', '$<=', '$lessThanOrEqual', '$max'];\nconst OP_LENGTH = [ops.LENGTH, '$length', '$size', '$capacity'];\nconst OP_IN = [ops.IN, '$in'];\nconst OP_NOT_IN = [ops.NOT_IN, '$nin', '$notIn'];\nconst OP_EXISTS = [ops.EXISTS, '$exist', '$exists', '$notNull', '$required'];\nconst OP_MATCH = [ops.MATCH, '$has', '$match', '$all'];\nconst OP_MATCH_ANY = [ops.MATCH_ANY, '$any', '$or', '$either'];\nconst OP_ALL_MATCH = [ops.ALL_MATCH, '$allMatch', '|>$all', '|>$match'];\nconst OP_ANY_ONE_MATCH = [ops.ANY_ONE_MATCH, '$anyOneMatch', '|*$any', '|*$match', '|*$either'];\nconst OP_TYPE = [ops.TYPE, '$is', '$typeOf'];\nconst OP_HAS_KEYS = [ops.HAS_KEYS, '$hasKey', '$hasKeys', '$withKey', '$withKeys'];\nconst OP_START_WITH = [ops.START_WITH, '$startWith', '$startsWith'];\nconst OP_END_WITH = [ops.END_WITH, '$endWith', '$endsWith'];\nconst OP_SAME_AS = [ops.SAME_AS, '$sameAs'];\n\nconfig.addValidatorToMap(OP_EQUAL, (left, right) => _isEqual(left, right));\nconfig.addValidatorToMap(OP_NOT_EQUAL, (left, right) => !_isEqual(left, right));\nconfig.addValidatorToMap(OP_NOT, (left, ...args) => !test(left, ops.MATCH, ...args));\nconfig.addValidatorToMap(OP_GREATER_THAN, (left, right) => left > right);\nconfig.addValidatorToMap(OP_GREATER_THAN_OR_EQUAL, (left, right) => left >= right);\nconfig.addValidatorToMap(OP_LESS_THAN, (left, right) => left < right);\nconfig.addValidatorToMap(OP_LESS_THAN_OR_EQUAL, (left, right) => left <= right);\nconfig.addValidatorToMap(OP_LENGTH, (left, right, options, context) =>\n    test(_size(left), ops.MATCH, right, options, context)\n);\n\nconfig.addValidatorToMap(OP_IN, (left, right, options, context) => {\n    if (right == null) {\n        return false;\n    }\n\n    if (typeof right === 'string' || isPlainObject(right)) {\n        right = transform(undefined, right, context, true)\n    }\n\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.IN));\n    }\n\n    const equal = config.getValidator(ops.EQUAL);\n    return right.find((element) => equal(left, element));\n});\n\nconfig.addValidatorToMap(OP_NOT_IN, (left, right) => {\n    if (right == null) {\n        return true;\n    }\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.NOT_IN));\n    }\n\n    const notEqual = config.getValidator(ops.NOT_EQUAL);\n\n    return right.every((element) => notEqual(left, element));\n});\n\nconfig.addValidatorToMap(OP_EXISTS, (left, right) => {\n    if (typeof right !== 'boolean') {\n        throw new Error(MSG.OPERAND_NOT_BOOL(ops.EXISTS));\n    }\n\n    return right ? left != null : left == null;\n});\n\nconfig.addValidatorToMap(OP_MATCH, (left, right, options, context) => {\n    if (Array.isArray(right)) {\n        const errors = [];\n\n        right.every((rule) => {\n            const reason = validate(left, rule, { ...options, asPredicate: false }, context);\n            if (reason !== true) {\n                errors.push(..._castArray(reason));\n\n                if (options.abortEarly) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        if (errors.length > 0) {\n            if (options.throwError) {\n                throw new ValidationError(errors, left, context.path);\n            }\n\n            if (!options.asPredicate) {\n                context.$$ERROR = errors.length === 1 && options.plainError ? errors[0] : errors;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    const reason2 = validate(left, right, options, context);\n    if (reason2 !== true) {\n        if (!options.asPredicate) {\n            context.$$ERROR = reason2;\n        }\n\n        return false;\n    }\n\n    return true;\n});\n\nconfig.addValidatorToMap(OP_MATCH_ANY, (left, right, options, context) => {\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.MATCH_ANY));\n    }\n\n    let found = right.find((rule) => {\n        const reason = validate(left, rule, { ...options, abortEarly: false, throwError: false }, context);\n        return reason === true;\n    });\n\n    if (!found) {\n        context.$$ERROR = MSG.validationErrors[ops.MATCH_ANY](context.name, left, right, context);\n    }\n\n    return found ? true : false;\n});\n\nconfig.addValidatorToMap(OP_ALL_MATCH, (left, right, options, context) => {\n    if (!Array.isArray(left)) {\n        throw new Error(MSG.VALUE_NOT_ARRAY(ops.ALL_MATCH));\n    }\n\n    const errors = [];\n\n    left.every((leftItem) => {\n        const reason = validate(leftItem, right, { ...options, asPredicate: false }, context);\n        if (reason !== true) {\n            errors.push(MSG.validationErrors[ops.ALL_MATCH](context.name, left, right, context), ..._castArray(reason));\n\n            if (options.abortEarly) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (errors.length > 0) {\n        if (options.throwError) {\n            throw new ValidationError(errors, left, context.path);\n        }\n\n        if (!options.asPredicate) {\n            context.$$ERROR = errors.length === 1 && options.plainError ? errors[0] : errors;\n        }\n\n        return false;\n    }\n\n    return true;\n});\n\nconfig.addValidatorToMap(OP_ANY_ONE_MATCH, (left, right, options, context) => {\n    if (!Array.isArray(left)) {\n        throw new Error(MSG.VALUE_NOT_ARRAY(ops.ANY_ONE_MATCH));\n    }\n\n    let found = left.find((leftItem) => {\n        const reason = validate(leftItem, right, { ...options, abortEarly: false, throwError: false }, context);\n        return reason === true;\n    });\n\n    if (!found) {\n        context.$$ERROR = MSG.validationErrors[ops.ANY_ONE_MATCH](context.name, left, right, context);\n    }\n\n    return found ? true : false;\n});\n\nconfig.addValidatorToMap(OP_TYPE, (left, right, options, context) => {\n    let type;\n    let schema;\n\n    if (Array.isArray(right)) {\n        if (right.length === 0) {\n            throw new Error(MSG.INVALID_OP_EXPR(OP_TYPE[0], right));\n        }\n\n        type = right[0];\n        if (right.length > 1) {\n            schema = right[1];\n        }\n    } else if (typeof right === 'string') {\n        type = right;\n    } else if (typeof right === 'object') {\n        type = right.type;\n        schema = right.schema;\n    }\n\n    if (!Types.Builtin.has(type)) {\n        throw new Error(MSG.UNSUPPORTED_TYPE(type));\n    }\n\n    const reason = Types[type].validate(left, schema, options, context);\n    if (reason !== true) {\n        context.$$ERROR = reason;\n        return false;\n    }\n\n    return true;\n});\n\nconfig.addValidatorToMap(OP_HAS_KEYS, (left, right) => {\n    if (typeof left !== 'object') {\n        return false;\n    }\n\n    return Array.isArray(right) ? right.every((key) => _has(left, key)) : _has(left, right);\n});\n\nconfig.addValidatorToMap(OP_START_WITH, (left, right) => {\n    if (typeof left !== 'string') {\n        return false;\n    }\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.START_WITH));\n    }\n\n    return left.startsWith(right);\n});\n\nconfig.addValidatorToMap(OP_END_WITH, (left, right) => {\n    if (typeof left !== 'string') {\n        return false;\n    }\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.END_WITH));\n    }\n\n    return left.endsWith(right);\n});\n\nconfig.addValidatorToMap(OP_SAME_AS, (left, right, options, context) => {\n    if (typeof left === 'object') {\n        throw new Error(MSG.VALUE_NOT_PRIMITIVE(ops.OP_SAME_AS));\n    }\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.OP_SAME_AS));\n    }\n\n    return left === context.$$PARENT[right];\n});\n\nexport default validate;\n"],"file":"validators.js"}