{"version":3,"file":"config.js","names":["validatorHandlers","mapOfValidators","transformerHandlers","mapOfTransformers","formatName","name","left","context","custom","fullName","path","makePath","messages","nameOfValue","mapOfNames","formatKey","key","hasPrefix","Number","isInteger","prefix","formatPath","getChildContext","currentValue","childKey","childValue","$$PARENT","$$CURRENT","$$KEY","SYNTAX_OP_NOT_ALONE","SYNTAX_INVALID_EXPR","expr","JSON","stringify","SYNTAX_INVALID_OP","op","SYNTAX_NUMBER_AS_EXPR","INVALID_TRANSFORMER_OP","UNSUPPORTED_VALIDATION_OP","INVALID_COLLECTION_OP","INVALID_TRANSFORMER_HANDLER","tag","INVALID_TEST_HANLDER","INVALID_OP_EXPR","right","INVALID_COLLECTION_OP_EXPR","collectionOp","UNSUPPORTED_TYPE","type","OPERAND_NOT_TUPLE","OPERAND_NOT_TUPLE_2_OR_3","OPERAND_NOT_ARRAY","OPERAND_NOT_BOOL","OPERAND_NOT_STRING","OPERAND_NOT_OBJECT","VALUE_NOT_ARRAY","VALUE_NOT_COLLECTION","VALUE_NOT_PRIMITIVE","VALUE_NOT_STRING","VALUE_NOT_OBJECT","REQUIRE_RIGHT_OPERAND","RIGHT_OPERAND_NOT_EMPTY","MULTI_ERRORS","numErrors","config","dump","console","log","Object","keys","dev","process","env","NODE_ENV","addValidatorToMap","tokens","handler","alias","forEach","Error","addTransformerToMap","isUnary","overrideTransformer","overrideValidator","getValidatorTag","getValidator","getTransformerTagAndType","getTransformer","loadMessages","moreMessages","assign"],"sources":["../src/config.js"],"sourcesContent":["const validatorHandlers = {};\nconst mapOfValidators = {};\n\nconst transformerHandlers = {};\nconst mapOfTransformers = {};\n\nconst formatName = (name, left, context, custom) => {\n    const fullName = name == null ? context.path : makePath(name, context?.path);\n    return fullName == null\n        ? messages.nameOfValue(custom)\n        : context?.mapOfNames\n        ? context.mapOfNames[fullName]\n        : fullName;\n};\n\nconst formatKey = (key, hasPrefix) => (Number.isInteger(key) ? `[${key}]` : hasPrefix ? '.' + key : key);\nconst makePath = (key, prefix) => (prefix != null ? `${prefix}${formatKey(key, true)}` : formatKey(key, false));\nconst formatPath = (prefix) => (prefix ? '[' + prefix + ']' : '<ROOT>');\n\nexport const getChildContext = (context, currentValue, childKey, childValue) => ({\n    ...context,\n    path: makePath(childKey, context.path),\n    $$PARENT: currentValue,\n    $$CURRENT: childValue,\n    $$KEY: childKey,\n});\n\nexport const messages = {\n    formatName,\n    formatKey,\n    makePath,\n\n    //Exception messages\n    SYNTAX_OP_NOT_ALONE: 'Transformer operator can only be used alone in one pipeline stage.',\n    SYNTAX_INVALID_EXPR: (expr) => `Invalid expression syntax: ${JSON.stringify(expr)}`, // complext expr, not split out operator yet\n    SYNTAX_INVALID_OP: (op, prefix) => `Invalid operator \"${op}\" at ${formatPath(prefix)}.`,\n    SYNTAX_NUMBER_AS_EXPR: 'Number value cannot be used as a transformer expression.',\n\n    INVALID_TRANSFORMER_OP: (op) => `Invalid transformer operator \"${op}\".`,\n    UNSUPPORTED_VALIDATION_OP: (op, prefix) => `Unsupported validation operator \"${op}\" at ${formatPath(prefix)}.`,\n    INVALID_COLLECTION_OP: (op) => `Invalid collection operator \"${op}\".`,\n\n    INVALID_TRANSFORMER_HANDLER: (tag) => `Handler for transformer \"${tag}\" not found.`,\n    INVALID_TEST_HANLDER: (tag) => `Handler for validator \"${tag}\" not found.`,\n\n    INVALID_OP_EXPR: (op, right) => `Invalid \"${op}\" expression: ${JSON.stringify(right)}.`,\n    INVALID_COLLECTION_OP_EXPR: (collectionOp, op, right) =>\n        `Invalid \"${op}\" expression for collection \"${collectionOp}\" traversing: ${JSON.stringify(right)}.`,\n    UNSUPPORTED_TYPE: (type) => `Supported type \"${type}\".`,\n\n    OPERAND_NOT_TUPLE: (op) =>\n        `The right operand of a collection operator ${op ? '\"' + op + '\" ' : ''}must be a two-tuple.`,\n    OPERAND_NOT_TUPLE_2_OR_3: (op) => `The right operand of a \"${op}\" operator must be either a 2-tuple or a 3-tuple.`,\n    OPERAND_NOT_ARRAY: (op) => `The right operand of a \"${op}\" operator must be an array.`,\n    OPERAND_NOT_BOOL: (op) => `The right operand of a \"${op}\" operator must be a boolean value.`,\n    OPERAND_NOT_STRING: (op) => `The right operand of a \"${op}\" operator must be a string.`,\n    OPERAND_NOT_OBJECT: (op) => `The right operand of a \"${op}\" operator must be an object.`,\n\n    VALUE_NOT_ARRAY: (op) => `The value to take a \"${op}\" operator must be an array.`,\n    VALUE_NOT_COLLECTION: (op) => `The value to take a \"${op}\" operator must be either an object or an array.`,\n    VALUE_NOT_PRIMITIVE: (op) => `The value to take a \"${op}\" operator must be a primitive value, e.g. string, number.`,\n    VALUE_NOT_STRING: (op) => `The value to take a \"${op}\" operator must be a string.`,\n    VALUE_NOT_OBJECT: (op) => `The value to take a \"${op}\" operator must be an object.`,\n\n    REQUIRE_RIGHT_OPERAND: (op) => `Binary operator \"${op}\" requires a right operand.`,\n    RIGHT_OPERAND_NOT_EMPTY: (op) => `Unary operator \"${op}\" does not require a right operand.`,\n\n    MULTI_ERRORS: (numErrors) => `${numErrors} errors occurred.`,\n};\n\n//JSON Expression Syntax Runtime Configuration\nconst config = {\n    dump: () => {\n        console.log(Object.keys(validatorHandlers));\n    },\n    // eslint-disable-next-line no-undef\n    dev: process?.env.NODE_ENV === 'development',\n    messages,\n    addValidatorToMap: (tokens, handler) => {\n        const [tag, ...alias] = tokens;\n\n        alias.forEach((op) => {\n            if (op in mapOfValidators) {\n                throw new Error(`Duplicate validator alias \"${op}\" for operator \"${tag}\".`);\n            }\n            mapOfValidators[op] = tag;\n        });\n\n        if (tag in validatorHandlers) {\n            throw new Error(`Duplicate operator name \"${tag}\".`);\n        }\n\n        validatorHandlers[tag] = handler;\n    },\n    addTransformerToMap: (tokens, handler) => {\n        const [tag, isUnary, ...alias] = tokens;\n\n        if (typeof isUnary !== 'boolean') {\n            throw new Error('The second param should be a boolean value.');\n        }\n\n        alias.forEach((op) => {\n            if (op in mapOfTransformers) {\n                throw new Error(`Duplicate transformer alias: \"${op}\" for operator \"${tag}\".`);\n            }\n            mapOfTransformers[op] = [tag, isUnary];\n        });\n\n        if (tag in transformerHandlers) {\n            throw new Error(`Duplicate operator name: \"${tag}\".`);\n        }\n\n        transformerHandlers[tag] = handler;\n    },\n    overrideTransformer: (tag, handler) => {\n        transformerHandlers[tag] = handler;\n    },\n    overrideValidator: (tag, handler) => {\n        validatorHandlers[tag] = handler;\n    },\n\n    getValidatorTag: (op) => mapOfValidators[op],\n    getValidator: (tag) => validatorHandlers[tag],\n\n    getTransformerTagAndType: (op) => mapOfTransformers[op],\n    getTransformer: (tag) => transformerHandlers[tag],\n    loadMessages: (moreMessages) => Object.assign(config.messages, moreMessages),\n};\n\nexport default config;\n"],"mappings":"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"}