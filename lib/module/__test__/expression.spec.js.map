{"version":3,"sources":["expression.spec.js"],"names":["JES","require","describe","it","obj","key1","key2","key3","key4","key5","key6","match","should","be","eql","result","not","ok","key11","key12","key13","key21","key22","key23","$gt","$gte","$lt","$lte","$eq","$neq","$in","$nin","$exists","jeso","$is","throws","key99","$exist","$any","$$size","$$type","$$keys","pipelined","evaluate","exactly","value","update","$add","$subtract","$multiply","$divide","keep","items","name","score","ignored","exlcluded","excluded","newItem","$set","highestScore","$sortBy","$nth","$of","exist","array","email","other","transformed","user","$pick","agency","$merge","$not","$startWith","$addItem","$omit","$test","$select","id"],"mappings":"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","sourcesContent":["const JES = require('../index');\n\ndescribe('unit:utils:expression', function () {\n    it('equal', function () {\n        let obj = {\n            key1: 2000,\n            key2: 'ok',\n            key3: {\n                key1: 20,\n                key2: 'ok',\n            },\n            key4: null,\n            key5: false,\n            key6: true,\n        };\n\n        JES.match(obj, {\n            key1: 2000,\n            key2: 'ok',\n            key3: {\n                key1: 20,\n                key2: 'ok',\n            },\n            key4: null,\n            key5: false,\n            key6: true,\n        }).should.be.eql([true]);\n\n        let result = JES.match(obj, {\n            key1: 2001,\n        });\n        result[0].should.not.be.ok();\n        result[1].should.be.match(/ should be 2001/);\n\n        result = JES.match(obj, {\n            key2: 'ng',\n        });\n        result[0].should.not.be.ok();\n        result[1].should.be.match(/ should be \"ng\"/);\n    });\n\n    it('equal2', function () {\n        let obj = {\n            key1: [1, 2, 3],\n            key2: [1],\n        };\n\n        JES.match(obj, {\n            key1: [1, 2, 3],\n            key2: [1],\n        })[0].should.be.ok();\n\n        JES.match(obj, {\n            key1: [1, 2],\n            key2: [1, 3],\n        })[0].should.be.not.ok();\n\n        JES.match(obj, {\n            key1: [1, 2],\n            key2: [1],\n        })[0].should.be.not.ok();\n    });\n\n    it('mixed', function () {\n        let obj = {\n            key1: 2000,\n            key11: 2000,\n            key12: 2000,\n            key13: 2000,\n\n            key2: 'ok',\n            key21: 'ok',\n            key22: 'ok',\n            key23: 'ok',\n\n            key3: {\n                key1: 20,\n                key2: 'ok',\n            },\n            key4: null,\n            key5: false,\n            key6: true,\n        };\n\n        JES.match(obj, {\n            key1: { $gt: 1000 },\n            key11: { $gte: 2000 },\n            key12: { $lt: 3000 },\n            key13: { $lte: 2000 },\n\n            key2: { $eq: 'ok' },\n            key21: { $neq: 'ng' },\n\n            key22: { $in: ['ok', 'ng'] },\n            key23: { $nin: ['ng1', 'ng2'] },\n\n            key4: { $exists: false },\n        }).should.be.eql([true]);\n    });\n\n    it('jes', function () {\n        let obj = {\n            key1: 2000,\n            key11: 2000,\n            key12: 2000,\n            key13: 2000,\n\n            key2: 'ok',\n            key21: 'ok',\n            key22: 'ok',\n            key23: 'ok',\n\n            key3: {\n                key1: 20,\n                key2: 'ok',\n            },\n            key4: null,\n            key5: false,\n            key6: true,\n        };\n\n        const jeso = new JES(obj);\n        jeso.match({\n            key1: { $gt: 1000 },\n            key11: { $gte: 2000 },\n            key12: { $lt: 3000 },\n            key13: { $lte: 2000 },\n        })\n            .match({\n                key2: { $eq: 'ok' },\n                key21: { $neq: 'ng' },\n\n                key22: { $in: ['ok', 'ng'] },\n                key23: { $nin: ['ng1', 'ng2'] },\n\n                key4: { $exists: false },\n                key2: { $is: 'string' },\n            })\n            .match({\n                key3: {\n                    key1: 20,\n                    key2: {\n                        $neq: 'ng',\n                    },\n                },\n            });\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $gt: 3000 },\n            });\n        }, /\"key1\" should be greater than 3000/);\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $lt: 1000 },\n            });\n        }, /\"key1\" should be less than 1000/);\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $in: [100, 200] },\n            });\n        }, 'ValidationError: \"key1\" should be one of [100,200].');\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $nin: [1000, 2000] },\n            });\n        }, 'ValidationError: \"key1\" should not be any one of [1000,2000].');\n\n        should.throws(() => {\n            jeso.match({\n                key99: { $exist: true },\n            });\n        }, 'ValidationError: \"key99\" should not be NULL.');\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $exist: false },\n            });\n        }, 'ValidationError: \"key1\" should be NULL.');\n\n        should.throws(() => {\n            jeso.match({\n                key1: { $is: 'string' },\n            });\n        }, 'ValidationError: The type of \"key1\" should be \"string\".');\n\n        should.throws(() => {\n            jeso.match({\n                key3: { key2: 'ng' },\n            });\n        }, 'ValidationError: \"key3.key2\" should be \"ng\".');\n    });\n\n    it('any', function () {\n        let obj = {\n            key1: 2000,\n            key11: 2000,\n            key12: 2000,\n            key13: 2000,\n        };\n\n        let jeso = new JES(obj);\n\n        jeso.match({\n            $any: [{ key1: 3000 }, { key11: 2000 }],\n        });\n\n        should.throws(() => {\n            jeso.match({\n                $any: [{ key1: 3000 }, { key11: 3000 }],\n            });\n        }, 'ValidationError: The value should match any of these rules: [{\"key1\":3000},{\"key11\":3000}].');\n    });\n\n    it('matchWithQuery', function () {\n        let obj = {\n            key1: 2000,\n            key11: 2000,\n            key12: 2000,\n            key13: 2000,\n        };\n\n        let jeso = new JES(obj);\n\n        jeso.match({\n            $$size: 4,\n            key1: {\n                $$type: 'integer',\n            },\n        });\n\n        jeso.match({\n            '|>$$add': [\n                200,\n                {\n                    key1: 2200,\n                    key11: 2200,\n                    key12: 2200,\n                    key13: 2200,\n                },\n            ],\n        });\n\n        should.throws(() => {\n            jeso.match({\n                '|>$$add': [200, obj],\n            });\n        }, 'ValidationError: The query \"_.each(->add(?)).key1\" should be 2000, but 2200 given.');\n\n        should.throws(() => {\n            jeso.match({\n                $$keys: {\n                    $$size: {\n                        $neq: 4,\n                    },\n                },\n            });\n        }, 'ValidationError: The query \"keys().size()\" should not be 4, but 4 given.');\n    });\n\n    it('eval', function () {\n        let obj = {\n            key1: 2000,\n            key11: 2000,\n            key12: 2000,\n            key13: 2000,\n        };\n\n        let jeso = new JES(obj);\n\n        const pipelined = jeso.evaluate([\n            {\n                '|>$add': 100,\n            },\n            {\n                '|>$subtract': 200,\n            },\n            '$sum',\n        ]);\n\n        pipelined.should.be.exactly(7600);\n        jeso.value.should.be.eql(obj);\n\n        jeso.update({\n            key1: {\n                $add: 100,\n            },\n            key11: {\n                $subtract: 100,\n            },\n            key12: {\n                $multiply: 100,\n            },\n            key13: {\n                $divide: 100,\n            },\n        }).value.should.be.eql({\n            key1: 2100,\n            key11: 1900,\n            key12: 200000,\n            key13: 20,\n        });\n\n        jeso.update([\n            '$sum',\n            {\n                $add: 1,\n            },\n        ]).value.should.be.exactly(204021);\n    });\n\n    it('eval array', function () {\n        let obj = {\n            keep: 'keep',\n            items: [\n                { name: 'Jack', score: 60 },\n                { name: 'Bob', score: 40 },\n                { name: 'Jane', score: 80 },\n                { name: 'Peter', score: 100 },\n            ],\n            ignored: 'ingored',\n            exlcluded: 'exlcluded',\n        };\n\n        let jeso = new JES(obj);\n\n        const pipelined = jeso.evaluate({\n            keep: true,\n            excluded: false,\n            newItem: { $set: 'new' },\n            highestScore: [\n                '$$CURRENT.items',\n                {\n                    $sortBy: 'score',\n                },\n                '$reverse',\n                {\n                    $nth: 0,\n                },\n                {\n                    $of: 'score',\n                },\n            ],\n        });\n\n        should.exist(pipelined.keep);\n        should.exist(pipelined.newItem);\n        should.exist(pipelined.highestScore);\n        should.not.exist(pipelined.exlcluded);\n        should.not.exist(pipelined.items);\n        should.not.exist(pipelined.ignored);\n\n        pipelined.newItem.should.be.exactly('new');\n        pipelined.highestScore.should.be.exactly(100);\n    });\n\n    it('transform collection', function () {\n        let array = [\n            {\n                'user': 100,\n                'agency': 1,\n                ':user': { email: 'email1', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'user': 101,\n                'agency': 1,\n                ':user': { email: 'email2', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'user': 102,\n                'agency': 1,\n                ':user': { email: 'email3', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'user': 103,\n                'agency': 2,\n                ':user': { email: 'email4', other: 'any' },\n                ':agency': { name: 'agency2', other: 'any' },\n            },\n            {\n                'user': 104,\n                'agency': 2,\n                ':user': { email: 'email5', other: 'any' },\n                ':agency': { name: 'agency2', other: 'any' },\n            },\n        ];\n\n        let transformed = JES.evaluate(array, {\n            '|>$apply': {\n                user: ['$$CURRENT.:user', { $pick: ['email'] }],\n                agency: ['$$CURRENT.:agency', { $pick: ['name'] }],\n            },\n        });\n\n        transformed.should.be.eql([\n            { user: { email: 'email1' }, agency: { name: 'agency1' } },\n            { user: { email: 'email2' }, agency: { name: 'agency1' } },\n            { user: { email: 'email3' }, agency: { name: 'agency1' } },\n            { user: { email: 'email4' }, agency: { name: 'agency2' } },\n            { user: { email: 'email5' }, agency: { name: 'agency2' } },\n        ]);\n    });\n\n    it('transform collection - merge', function () {\n        let array = [\n            {\n                'user': 100,\n                'agency': 1,\n                ':user': { email: 'email1', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'user': 101,\n                'agency': 1,\n                ':user': { email: 'email2', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'user': 102,\n                'agency': 1,\n                ':user': { email: 'email3', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'user': 103,\n                'agency': 2,\n                ':user': { email: 'email4', other: 'any' },\n                ':agency': { name: 'agency2', other: 'any' },\n            },\n            {\n                'user': 104,\n                'agency': 2,\n                ':user': { email: 'email5', other: 'any' },\n                ':agency': { name: 'agency2', other: 'any' },\n            },\n        ];\n\n        let transformed = JES.evaluate(array, {\n            '|>$apply': {\n                $merge: [\n                    {\n                        $pick: {\n                            $not: {\n                                $startWith: ':',\n                            },\n                        },\n                    },\n                    {\n                        '@user': ['$$CURRENT.:user', { $pick: ['email'] }],\n                        '@agency': ['$$CURRENT.:agency', { $pick: ['name'] }],\n                    },\n                ],\n            },\n        });\n\n        transformed.should.be.eql([\n            {\n                'user': 100,\n                'agency': 1,\n                '@user': { email: 'email1' },\n                '@agency': { name: 'agency1' },\n            },\n            {\n                'user': 101,\n                'agency': 1,\n                '@user': { email: 'email2' },\n                '@agency': { name: 'agency1' },\n            },\n            {\n                'user': 102,\n                'agency': 1,\n                '@user': { email: 'email3' },\n                '@agency': { name: 'agency1' },\n            },\n            {\n                'user': 103,\n                'agency': 2,\n                '@user': { email: 'email4' },\n                '@agency': { name: 'agency2' },\n            },\n            {\n                'user': 104,\n                'agency': 2,\n                '@user': { email: 'email5' },\n                '@agency': { name: 'agency2' },\n            },\n        ]);\n    });\n\n    it('pick & omit by jes', function () {\n        let array = [\n            {\n                'id': 1,\n                'user': 100,\n                'agency': 1,\n                ':user': { email: 'email1', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'id': 2,\n                'user': 101,\n                'agency': 1,\n                ':user': { email: 'email2', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'id': 3,\n                'user': 102,\n                'agency': 1,\n                ':user': { email: 'email3', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'id': 4,\n                'user': 103,\n                'agency': 2,\n                ':user': { email: 'email4', other: 'any' },\n                ':agency': { name: 'agency2', other: 'any' },\n            },\n            {\n                'id': 5,\n                'user': 104,\n                'agency': 2,\n                ':user': { email: 'email5', other: 'any' },\n                ':agency': { name: 'agency2', other: 'any' },\n            },\n        ];\n\n        let transformed = JES.evaluate(array, {\n            '|>$apply': [\n                {\n                    $pick: {\n                        $not: {\n                            $startWith: ':',\n                        },\n                    },\n                },\n                {\n                    $addItem: ['$test', '$$CURRENT.id'],\n                },\n                {\n                    $omit: ['id'],\n                },\n            ],\n        });\n\n        transformed.should.be.eql([\n            { user: 100, agency: 1, $test: 1 },\n            { user: 101, agency: 1, $test: 2 },\n            { user: 102, agency: 1, $test: 3 },\n            { user: 103, agency: 2, $test: 4 },\n            { user: 104, agency: 2, $test: 5 },\n        ]);\n    });\n\n    it('filter', function () {\n        let array = [\n            {\n                'id': 1,\n                'user': 100,\n                'agency': 1,\n                ':user': { email: 'email1', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'id': 2,\n                'user': 101,\n                'agency': 1,\n                ':user': { email: 'email2', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'id': 3,\n                'user': 102,\n                'agency': 1,\n                ':user': { email: 'email3', other: 'any' },\n                ':agency': { name: 'agency1', other: 'any' },\n            },\n            {\n                'id': 4,\n                'user': 103,\n                'agency': 2,\n                ':user': { email: 'email4', other: 'any' },\n                ':agency': { name: 'agency2', other: 'any' },\n            },\n            {\n                'id': 5,\n                'user': 104,\n                'agency': 2,\n                ':user': { email: 'email5', other: 'any' },\n                ':agency': { name: 'agency2', other: 'any' },\n            },\n        ];\n\n        let transformed = JES.evaluate(array, [\n            {\n                $select: {\n                    user: {\n                        $gte: 102,\n                    },\n                },\n            },\n            {\n                '|>$omit': {\n                    $startWith: ':',\n                },\n            },\n        ]);\n\n        transformed.should.be.eql([\n            { id: 3, user: 102, agency: 1 },\n            { id: 4, user: 103, agency: 2 },\n            { id: 5, user: 104, agency: 2 },\n        ]);\n    });\n});\n"]}