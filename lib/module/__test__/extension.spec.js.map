{"version":3,"sources":["extension.spec.js"],"names":["JES","require","Types","describe","it","obj","key1","key2","intKey","boolKey","schema","type","optional","config","addProcessorToMap","left","right","OBJECT","sanitize","sanitized","evaluate","$sanitize","expected","intKey2","strKey","arrayKey","objKey","objKey2","should","be","eql"],"mappings":";;AAAA,IAAMA,GAAG,GAAGC,OAAO,CAAC,UAAD,CAAnB;;eACkBA,OAAO,CAAC,YAAD,C;IAAjBC,K,YAAAA,K;;AAERC,QAAQ,CAAC,eAAD,EAAkB,YAAY;AAClCC,EAAAA,EAAE,CAAC,UAAD,EAAa,YAAY;AACvB,QAAIC,GAAG,GAAG;AACN,gBAAU,GADJ;AAEN,gBAAU,QAFJ;AAGN,kBAAY,CACR;AACIC,QAAAA,IAAI,EAAE,QADV;AAEIC,QAAAA,IAAI,EAAE;AAFV,OADQ,EAKR;AACID,QAAAA,IAAI,EAAE,QADV;AAEIC,QAAAA,IAAI,EAAE;AAFV,OALQ,CAHN;AAaN,gBAAU;AACN,mBAAW;AACPC,UAAAA,MAAM,EAAE,CADD;AAEPC,UAAAA,OAAO,EAAE;AAFF;AADL;AAbJ,KAAV;AAqBA,QAAIC,MAAM,GAAG;AACT,gBAAU;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADD;AAET,iBAAW;AAAEA,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,QAAQ,EAAE,IAA7B;AAAmC,mBAAW;AAA9C,OAFF;AAGT,gBAAU;AAAED,QAAAA,IAAI,EAAE;AAAR,OAHD;AAIT,kBAAY;AAAEA,QAAAA,IAAI,EAAE,OAAR;AAAiB,yBAAiB;AAC1CA,UAAAA,IAAI,EAAE,QADoC;AAC1BD,UAAAA,MAAM,EAAE;AACpBJ,YAAAA,IAAI,EAAE;AAAEK,cAAAA,IAAI,EAAE;AAAR,aADc;AAEpBJ,YAAAA,IAAI,EAAE;AAAEI,cAAAA,IAAI,EAAE;AAAR;AAFc;AADkB;AAAlC,OAJH;AAUT,gBAAU;AACNA,QAAAA,IAAI,EAAE,QADA;AAEND,QAAAA,MAAM,EAAE;AACJ,qBAAW;AACPC,YAAAA,IAAI,EAAE,QADC;AAEPD,YAAAA,MAAM,EAAE;AACJF,cAAAA,MAAM,EAAE;AAAEG,gBAAAA,IAAI,EAAE;AAAR,eADJ;AAEJF,cAAAA,OAAO,EAAE;AAAEE,gBAAAA,IAAI,EAAE;AAAR;AAFL;AAFD;AADP;AAFF;AAVD,KAAb;AAwBAX,IAAAA,GAAG,CAACa,MAAJ,CAAWC,iBAAX,CAA6B,CAAE,WAAF,CAA7B,EAA8C,aAA9C,EAA6D,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC1E,aAAOd,KAAK,CAACe,MAAN,CAAaC,QAAb,CAAsBH,IAAtB,EAA4B;AAAEL,QAAAA,MAAM,EAAEM;AAAV,OAA5B,CAAP;AACH,KAFD;AAIA,QAAMG,SAAS,GAAGnB,GAAG,CAACoB,QAAJ,CAAaf,GAAb,EAAkB;AAAEgB,MAAAA,SAAS,EAAEX;AAAb,KAAlB,CAAlB;AAEC,QAAIY,QAAQ,GAAG;AACZd,MAAAA,MAAM,EAAE,GADI;AAEZe,MAAAA,OAAO,EAAE,GAFG;AAGZC,MAAAA,MAAM,EAAE,QAHI;AAIZC,MAAAA,QAAQ,EAAE,CAAE;AAAEnB,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,IAAI,EAAE;AAAxB,OAAF,EAAmC;AAAED,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,IAAI,EAAE;AAAxB,OAAnC,CAJE;AAKZmB,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAEnB,UAAAA,MAAM,EAAE,CAAV;AAAaC,UAAAA,OAAO,EAAE;AAAtB;AAAX;AALI,KAAf;AAQDU,IAAAA,SAAS,CAACS,MAAV,CAAiBC,EAAjB,CAAoBC,GAApB,CAAwBR,QAAxB;AACH,GA7DC,CAAF;AA8DH,CA/DO,CAAR","sourcesContent":["const JES = require('../index');\nconst { Types } = require('@genx/data');\n\ndescribe('jes:extension', function () {  \n    it('sanitize', function () {\n        let obj = {\n            'intKey': 100,\n            'strKey': 'string',\n            'arrayKey': [\n                {\n                    key1: 'value1',\n                    key2: '0'\n                },\n                {\n                    key1: 'value2',\n                    key2: '1'\n                }\n            ],\n            'objKey': {\n                'objKey2': {\n                    intKey: 1,\n                    boolKey: 'true'\n                }\n            }\n        };\n    \n        let schema = {\n            'intKey': { type: 'integer' },\n            'intKey2': { type: 'integer', optional: true, 'default': 200 },\n            'strKey': { type: 'text' },\n            'arrayKey': { type: 'array', 'elementSchema': {\n                type: 'object', schema: {\n                    key1: { type: 'text' },\n                    key2: { type: 'boolean' },\n                }\n            } },\n            'objKey': {\n                type: 'object',\n                schema: {\n                    'objKey2': {\n                        type: 'object',\n                        schema: {\n                            intKey: { type: 'integer' },\n                            boolKey: { type: 'boolean' }\n                        }\n                    }\n                }\n            }\n        };\n\n        JES.config.addProcessorToMap([ '$sanitize' ], 'OP_SANITIZE', (left, right) => {\n            return Types.OBJECT.sanitize(left, { schema: right });\n        });\n\n        const sanitized = JES.evaluate(obj, { $sanitize: schema });\n\n         let expected = {\n            intKey: 100,\n            intKey2: 200,\n            strKey: 'string',\n            arrayKey: [ { key1: 'value1', key2: false }, { key1: 'value2', key2: true } ],\n            objKey: { objKey2: { intKey: 1, boolKey: true } }\n        };\n        \n        sanitized.should.be.eql(expected);\n    })\n});"]}