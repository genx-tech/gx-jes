{"version":3,"sources":["config.js"],"names":["require","InvalidArgument","validatorHandlers","mapOfValidators","processorHandlers","mapOfProcessors","config","addValidatorToMap","tokens","tag","handler","forEach","op","addProcessorToMap","isUnary","unary","overrideProcessor","overrideValidator","getValidatorTag","getValidator","getProcessorTagAndType","getProcessor","loadMessages","messages","module","exports"],"mappings":";;;;;;eAA4BA,OAAO,CAAC,aAAD,C;IAA3BC,e,YAAAA,e;;AAER,IAAMC,iBAAiB,GAAG,EAA1B;AACA,IAAMC,eAAe,GAAG,EAAxB;AAEA,IAAMC,iBAAiB,GAAG,EAA1B;AACA,IAAMC,eAAe,GAAG,EAAxB,C,CAEA;;AACA,IAAMC,MAAM,GAAG;AACXC,EAAAA,iBAAiB,EAAE,2BAACC,MAAD,EAASC,GAAT,EAAcC,OAAd,EAA0B;AACzCF,IAAAA,MAAM,CAACG,OAAP,CAAe,UAACC,EAAD,EAAQ;AACnB,UAAIA,EAAE,IAAIT,eAAV,EAA2B;AACvB,cAAM,IAAIF,eAAJ,yCAC+BW,EAD/B,GAEF;AACIA,UAAAA,EAAE,EAAFA,EADJ;AAEIH,UAAAA,GAAG,EAAHA;AAFJ,SAFE,CAAN;AAOH;;AACDN,MAAAA,eAAe,CAACS,EAAD,CAAf,GAAsBH,GAAtB;AACH,KAXD;;AAaA,QAAIA,GAAG,IAAIP,iBAAX,EAA8B;AAC1B,YAAM,IAAID,eAAJ,6CACmCQ,GADnC,EAAN;AAGH;;AAEDP,IAAAA,iBAAiB,CAACO,GAAD,CAAjB,GAAyBC,OAAzB;AACH,GAtBU;AAuBXG,EAAAA,iBAAiB,EAAE,2BAACL,MAAD,EAASC,GAAT,EAAcK,OAAd,EAAuBJ,OAAvB,EAAmC;AAClD,QAAI,OAAOI,OAAP,KAAmB,UAAnB,IAAiCJ,OAAO,IAAI,IAAhD,EAAsD;AAClDA,MAAAA,OAAO,GAAGI,OAAV;AACAA,MAAAA,OAAO,GAAG,KAAV;AACH;;AAEDN,IAAAA,MAAM,CAACG,OAAP,CAAe,UAACC,EAAD,EAAQ;AACnB,UAAIA,EAAE,IAAIP,eAAV,EAA2B;AACvB,cAAM,IAAIJ,eAAJ,yCAC+BW,EAD/B,GAEF;AACIA,UAAAA,EAAE,EAAFA,EADJ;AAEIH,UAAAA,GAAG,EAAHA,GAFJ;AAGIM,UAAAA,KAAK,EAAED;AAHX,SAFE,CAAN;AAQH;;AACDT,MAAAA,eAAe,CAACO,EAAD,CAAf,GAAsB,CAACH,GAAD,EAAMK,OAAN,CAAtB;AACH,KAZD;;AAcA,QAAIL,GAAG,IAAIL,iBAAX,EAA8B;AAC1B,YAAM,IAAIH,eAAJ,6CACmCQ,GADnC,EAAN;AAGH;;AAEDL,IAAAA,iBAAiB,CAACK,GAAD,CAAjB,GAAyBC,OAAzB;AACH,GAlDU;AAmDXM,EAAAA,iBAAiB,EAAE,2BAACP,GAAD,EAAMC,OAAN,EAAkB;AACjCN,IAAAA,iBAAiB,CAACK,GAAD,CAAjB,GAAyBC,OAAzB;AACH,GArDU;AAsDXO,EAAAA,iBAAiB,EAAE,2BAACR,GAAD,EAAMC,OAAN,EAAkB;AACjCR,IAAAA,iBAAiB,CAACO,GAAD,CAAjB,GAAyBC,OAAzB;AACH,GAxDU;AA0DXQ,EAAAA,eAAe,EAAE,yBAACN,EAAD;AAAA,WAAQT,eAAe,CAACS,EAAD,CAAvB;AAAA,GA1DN;AA2DXO,EAAAA,YAAY,EAAE,sBAACV,GAAD;AAAA,WAASP,iBAAiB,CAACO,GAAD,CAA1B;AAAA,GA3DH;AA6DXW,EAAAA,sBAAsB,EAAE,gCAACR,EAAD;AAAA,WAAQP,eAAe,CAACO,EAAD,CAAvB;AAAA,GA7Db;AA8DXS,EAAAA,YAAY,EAAE,sBAACZ,GAAD;AAAA,WAASL,iBAAiB,CAACK,GAAD,CAA1B;AAAA,GA9DH;AA+DXa,EAAAA,YAAY,EAAE,sBAACC,QAAD;AAAA,WAAejB,MAAM,CAACiB,QAAP,GAAkBA,QAAjC;AAAA;AA/DH,CAAf;AAkEAC,MAAM,CAACC,OAAP,GAAiBnB,MAAjB","sourcesContent":["const { InvalidArgument } = require('@genx/error');\n\nconst validatorHandlers = {};\nconst mapOfValidators = {};\n\nconst processorHandlers = {};\nconst mapOfProcessors = {};\n\n//JSON Expression Syntax Runtime Configuration\nconst config = {\n    addValidatorToMap: (tokens, tag, handler) => {\n        tokens.forEach((op) => {\n            if (op in mapOfValidators) {\n                throw new InvalidArgument(\n                    `Duplicate validator operator: ${op}`,\n                    {\n                        op,\n                        tag,\n                    }\n                );\n            }\n            mapOfValidators[op] = tag;\n        });\n\n        if (tag in validatorHandlers) {\n            throw new InvalidArgument(\n                `Duplicate handler for validation: ${tag}`\n            );\n        }\n\n        validatorHandlers[tag] = handler;\n    },\n    addProcessorToMap: (tokens, tag, isUnary, handler) => {\n        if (typeof isUnary === 'function' && handler == null) {\n            handler = isUnary;\n            isUnary = false;\n        }\n\n        tokens.forEach((op) => {\n            if (op in mapOfProcessors) {\n                throw new InvalidArgument(\n                    `Duplicate processor operator: ${op}`,\n                    {\n                        op,\n                        tag,\n                        unary: isUnary,\n                    }\n                );\n            }\n            mapOfProcessors[op] = [tag, isUnary];\n        });\n\n        if (tag in processorHandlers) {\n            throw new InvalidArgument(\n                `Duplicate handler for processing: ${tag}`\n            );\n        }\n\n        processorHandlers[tag] = handler;\n    },\n    overrideProcessor: (tag, handler) => {\n        processorHandlers[tag] = handler;\n    },\n    overrideValidator: (tag, handler) => {\n        validatorHandlers[tag] = handler;\n    },\n\n    getValidatorTag: (op) => mapOfValidators[op],\n    getValidator: (tag) => validatorHandlers[tag],\n\n    getProcessorTagAndType: (op) => mapOfProcessors[op],\n    getProcessor: (tag) => processorHandlers[tag],\n    loadMessages: (messages) => (config.messages = messages),\n};\n\nmodule.exports = config;\n"]}