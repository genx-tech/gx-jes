{"version":3,"sources":["index.js"],"names":["_isEqual","require","_isInteger","_has","_size","_reduce","_reverse","_keys","_values","_castArray","_pick","_pickBy","_get","_set","_nth","_omit","_omitBy","_groupBy","_sortBy","_filter","_map","_mapValues","_find","_findIndex","ValidationError","InvalidArgument","remap","isPlainObject","PFX_FOR_EACH","PFX_WITH_ANY","config","messages","nothing","MSG","OP_EQUAL","OP_NOT_EQUAL","OP_NOT","OP_GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","OP_LESS_THAN","OP_LESS_THAN_OR_EQUAL","OP_IN","OP_NOT_IN","OP_EXISTS","OP_MATCH","OP_MATCH_ANY","OP_TYPE","OP_HAS_KEYS","OP_START_WITH","OP_END_WITH","OP_SIZE","OP_SUM","OP_KEYS","OP_VALUES","OP_GET_TYPE","OP_ADD","OP_SUB","OP_MUL","OP_DIV","OP_SET","OP_ADD_ITEM","OP_ASSIGN","OP_PICK","OP_GET_BY_INDEX","OP_GET_BY_KEY","OP_OMIT","OP_GROUP","OP_SORT","OP_REVERSE","OP_EVAL","OP_MERGE","OP_FILTER","OP_REMAP","OP_TO_JSON","OP_TO_OBJ","OP_IF","addValidatorToMap","left","right","args","test","Array","isArray","OPERAND_NOT_ARRAY","equal","getValidator","find","element","notEqual","every","OPERAND_NOT_BOOL","prefix","context","rule","r","match","matched","$$ERROR","found","OPERAND_NOT_STRING","toLowerCase","key","startsWith","endsWith","length","OPERAND_NOT_TUPLE","evaluated","evaluateExpr","addProcessorToMap","sum","item","undefined","VALUE_NOT_COLLECTION","concat","$$PARENT","$$CURRENT","VALUE_NOT_OBJECT","OPERAND_NOT_OBJECT","rightValue","expr","formatPrefix","x","reduce","result","Object","assign","value","OPERAND_NOT_TUPLE_2_OR_3","condition","ret","JSON","stringify","parse","getUnmatchedExplanation","op","name","leftValue","getter","validationErrors","tag","opValue","handler","INVALID_VALIDATOR_HANDLER","evaluate","getProcessor","INVALID_PROCESSOR_HANDLER","evaluateUnary","evaluateByOpMeta","currentValue","opMeta","validateCollection","actual","collectionOp","expectedFieldValue","unmatchedKey","INVALID_COLLECTION_OP","evaluateCollection","i","expected","passObjectCheck","fieldName","l","substr","getValidatorTag","INVALID_VALIDATION_OP","matchResult","actualType","actualFieldValue","ok","reason","setOp","map","exprItem","typeExpr","SYNTAX_NUMBER_AS_EXPR","pos","indexOf","getProcessorTagAndType","INVALID_PROCESSING_OP","REQUIRE_RIGHT_OPERAND","SYNTAX_INVALID_EXPR","$$ROOT","hasOperator","SYNTAX_OP_NOT_ALONE","compleyKey","childFieldValue","JES","constructor","update","module","exports"],"mappings":"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","sourcesContent":["// JSON Expression Syntax (JES)\nconst _isEqual = require('lodash/isEqual');\nconst _isInteger = require('lodash/isInteger');\nconst _has = require('lodash/has');\nconst _size = require('lodash/size');\nconst _reduce = require('lodash/reduce');\nconst _reverse = require('lodash/reverse');\nconst _keys = require('lodash/keys');\nconst _values = require('lodash/values');\nconst _castArray = require('lodash/castArray');\nconst _pick = require('lodash/pick');\nconst _pickBy = require('lodash/pickBy');\nconst _get = require('lodash/get');\nconst _set = require('lodash/set');\nconst _nth = require('lodash/nth');\nconst _omit = require('lodash/omit');\nconst _omitBy = require('lodash/omitBy');\nconst _groupBy = require('lodash/groupBy');\nconst _sortBy = require('lodash/sortBy');\nconst _filter = require('lodash/filter');\nconst _map = require('lodash/map');\nconst _mapValues = require('lodash/mapValues');\nconst _find = require('lodash/find');\nconst _findIndex = require('lodash/findIndex');\n\nconst { ValidationError, InvalidArgument } = require('@genx/error');\nconst { remap, isPlainObject } = require('@genx/july');\n\nconst PFX_FOR_EACH = '|>'; // map each\nconst PFX_WITH_ANY = '|*'; // with any\n\nconst config = require('./config');\n\nif (!config.messages) {\n    const nothing = require('./locale/msg.en-US');\n    nothing(); // just avoid being truncated by bundler\n}\n\nconst MSG = config.messages;\n\n//Validators\nconst OP_EQUAL = ['$eq', '$eql', '$equal'];\nconst OP_NOT_EQUAL = ['$ne', '$neq', '$notEqual'];\nconst OP_NOT = ['$not'];\nconst OP_GREATER_THAN = ['$gt', '$>', '$greaterThan'];\nconst OP_GREATER_THAN_OR_EQUAL = ['$gte', '$>=', '$greaterThanOrEqual'];\nconst OP_LESS_THAN = ['$lt', '$<', '$lessThan'];\nconst OP_LESS_THAN_OR_EQUAL = ['$lte', '$<=', '$lessThanOrEqual'];\n\nconst OP_IN = ['$in'];\nconst OP_NOT_IN = ['$nin', '$notIn'];\nconst OP_EXISTS = ['$exist', '$exists', '$notNull'];\nconst OP_MATCH = ['$has', '$match', '$all'];\nconst OP_MATCH_ANY = ['$any', '$or', '$either'];\nconst OP_TYPE = ['$is', '$typeOf'];\nconst OP_HAS_KEYS = ['$hasKey', '$hasKeys', '$withKey', '$withKeys'];\nconst OP_START_WITH = ['$startWith', '$startsWith'];\nconst OP_END_WITH = ['$endWith', '$endsWith'];\n\n//OP_EVAL\n\n//Query & aggregate processors\nconst OP_SIZE = ['$size', '$length', '$count'];\nconst OP_SUM = ['$sum', '$total'];\nconst OP_KEYS = ['$keys'];\nconst OP_VALUES = ['$values'];\nconst OP_GET_TYPE = ['$type'];\n\n//Manipulate processors\nconst OP_ADD = ['$add', '$plus', '$inc'];\nconst OP_SUB = ['$sub', '$subtract', '$minus', '$dec'];\nconst OP_MUL = ['$mul', '$multiply', '$times'];\nconst OP_DIV = ['$div', '$divide'];\nconst OP_SET = ['$set', '$=', '$value'];\nconst OP_ADD_ITEM = ['$addItem', '$override'];\nconst OP_ASSIGN = ['$assign', '$addFields'];\n\nconst OP_PICK = ['$pick'];\nconst OP_GET_BY_INDEX = ['$at', '$getByIndex', '$nth'];\nconst OP_GET_BY_KEY = ['$of', '$getByKey'];\nconst OP_OMIT = ['$omit']; // filter by key\nconst OP_GROUP = ['$group', '$groupBy'];\nconst OP_SORT = ['$sort', '$orderBy', '$sortBy'];\nconst OP_REVERSE = ['$reverse'];\nconst OP_EVAL = ['$eval', '$apply'];\nconst OP_MERGE = ['$merge'];\nconst OP_FILTER = ['$filter', '$select']; // filter by value\nconst OP_REMAP = ['$remap', '$mapKeys'];\nconst OP_TO_JSON = ['$json', '$toJSON', '$stringify'];\nconst OP_TO_OBJ = ['$object', '$parseJSON'];\n\n//Condition processors\nconst OP_IF = ['$if'];\n\nconfig.addValidatorToMap(OP_EQUAL, 'OP_EQUAL', (left, right) =>\n    _isEqual(left, right)\n);\nconfig.addValidatorToMap(\n    OP_NOT_EQUAL,\n    'OP_NOT_EQUAL',\n    (left, right) => !_isEqual(left, right)\n);\nconfig.addValidatorToMap(\n    OP_NOT,\n    'OP_NOT',\n    (left, ...args) => !test(left, 'OP_MATCH', ...args)\n);\nconfig.addValidatorToMap(\n    OP_GREATER_THAN,\n    'OP_GREATER_THAN',\n    (left, right) => left > right\n);\nconfig.addValidatorToMap(\n    OP_GREATER_THAN_OR_EQUAL,\n    'OP_GREATER_THAN_OR_EQUAL',\n    (left, right) => left >= right\n);\nconfig.addValidatorToMap(\n    OP_LESS_THAN,\n    'OP_LESS_THAN',\n    (left, right) => left < right\n);\nconfig.addValidatorToMap(\n    OP_LESS_THAN_OR_EQUAL,\n    'OP_LESS_THAN_OR_EQUAL',\n    (left, right) => left <= right\n);\nconfig.addValidatorToMap(OP_IN, 'OP_IN', (left, right) => {\n    if (right == null) return false;\n    if (!Array.isArray(right)) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_IN'));\n    }\n\n    const equal = config.getValidator('OP_EQUAL');\n    return right.find((element) => equal(left, element));\n});\nconfig.addValidatorToMap(OP_NOT_IN, 'OP_NOT_IN', (left, right) => {\n    if (right == null) return true;\n    if (!Array.isArray(right)) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_NOT_IN'));\n    }\n\n    const notEqual = config.getValidator('OP_NOT_EQUAL');\n\n    return right.every((element) => notEqual(left, element));\n});\nconfig.addValidatorToMap(OP_EXISTS, 'OP_EXISTS', (left, right) => {\n    if (typeof right !== 'boolean') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_BOOL('OP_EXISTS'));\n    }\n\n    return right ? left != null : left == null;\n});\nconfig.addValidatorToMap(\n    OP_MATCH,\n    'OP_MATCH',\n    (left, right, prefix, context) => {\n        if (Array.isArray(right)) {\n            return right.every((rule) => {\n                const r = match(left, rule, prefix);\n                return r[0];\n            });\n        }\n\n        const r = match(left, right, prefix);\n        const matched = r[0];\n\n        if (!matched && context) {\n            context.$$ERROR = r[1];\n        }\n\n        return matched;\n    }\n);\nconfig.addValidatorToMap(\n    OP_MATCH_ANY,\n    'OP_MATCH_ANY',\n    (left, right, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_MATCH_ANY'));\n        }\n\n        let found = right.find((rule) => {\n            const r = match(left, rule, prefix);\n            const matched = r[0];\n\n            if (!matched && context) {\n                context.$$ERROR = r[1];\n            }\n\n            return matched;\n        });\n\n        return found ? true : false;\n    }\n);\nconfig.addValidatorToMap(OP_TYPE, 'OP_TYPE', (left, right) => {\n    if (typeof right !== 'string') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_STRING('OP_TYPE'));\n    }\n\n    right = right.toLowerCase();\n\n    if (right === 'array') {\n        return Array.isArray(left);\n    }\n\n    if (right === 'integer') {\n        return _isInteger(left);\n    }\n\n    if (right === 'text') {\n        return typeof left === 'string';\n    }\n\n    return typeof left === right;\n});\nconfig.addValidatorToMap(OP_HAS_KEYS, 'OP_HAS_KEYS', (left, right) => {\n    if (typeof left !== 'object') return false;\n\n    return Array.isArray(right)\n        ? right.every((key) => _has(left, key))\n        : _has(left, right);\n});\nconfig.addValidatorToMap(OP_START_WITH, 'OP_START_WITH', (left, right) => {\n    if (typeof left !== 'string') return false;\n    if (typeof right !== 'string') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_STRING('OP_START_WITH'));\n    }\n\n    return left.startsWith(right);\n});\nconfig.addValidatorToMap(OP_END_WITH, 'OP_END_WITH', (left, right) => {\n    if (typeof left !== 'string') return false;\n    if (typeof right !== 'string') {\n        throw new InvalidArgument(MSG.OPERAND_NOT_STRING('OP_END_WITH'));\n    }\n\n    return left.endsWith(right);\n});\n//embedded processors in validation pipeline\nconfig.addValidatorToMap(OP_EVAL, 'OP_EVAL', (left, right, prefix, context) => {\n    if (!Array.isArray(right) || right.length !== 2) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE('OP_EVAL'));\n    }\n\n    const evaluated = evaluateExpr(left, right[0], prefix);\n\n    const r = match(evaluated, right[1], prefix);\n    const matched = r[0];\n\n    if (!matched && context) {\n        context.$$ERROR = r[1];\n    }\n\n    return matched;\n});\n\n// [ <op name>, <unary> ]\nconfig.addProcessorToMap(OP_SIZE, 'OP_SIZE', true, (left) => _size(left));\nconfig.addProcessorToMap(OP_SUM, 'OP_SUM', true, (left) =>\n    _reduce(\n        left,\n        (sum, item) => {\n            sum += item;\n            return sum;\n        },\n        0\n    )\n);\nconfig.addProcessorToMap(OP_KEYS, 'OP_KEYS', true, (left) => _keys(left));\nconfig.addProcessorToMap(OP_VALUES, 'OP_VALUES', true, (left) => _values(left));\nconfig.addProcessorToMap(OP_GET_TYPE, 'OP_GET_TYPE', true, (left) =>\n    Array.isArray(left) ? 'array' : _isInteger(left) ? 'integer' : typeof left\n);\nconfig.addProcessorToMap(OP_REVERSE, 'OP_REVERSE', true, (left) =>\n    _reverse(left)\n);\n\nconfig.addProcessorToMap(\n    OP_ADD,\n    'OP_ADD',\n    false,\n    (left, right) => left + right\n);\nconfig.addProcessorToMap(\n    OP_SUB,\n    'OP_SUB',\n    false,\n    (left, right) => left - right\n);\nconfig.addProcessorToMap(\n    OP_MUL,\n    'OP_MUL',\n    false,\n    (left, right) => left * right\n);\nconfig.addProcessorToMap(\n    OP_DIV,\n    'OP_DIV',\n    false,\n    (left, right) => left / right\n);\nconfig.addProcessorToMap(\n    OP_SET,\n    'OP_SET',\n    false,\n    (left, right, prefix, context) =>\n        evaluateExpr(undefined, right, prefix, context, true)\n);\nconfig.addProcessorToMap(\n    OP_ADD_ITEM,\n    'OP_ADD_ITEM',\n    false,\n    (left, right, prefix, context) => {\n        if (typeof left !== 'object') {\n            throw new InvalidArgument(MSG.VALUE_NOT_COLLECTION('OP_ADD_ITEM'));\n        }\n\n        if (Array.isArray(left)) {\n            return left.concat(right);\n        }\n\n        if (!Array.isArray(right) || right.length !== 2) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE('OP_ADD_ITEM'));\n        }\n\n        return {\n            ...left,\n            [right[0]]: evaluateExpr(left, right[1], prefix, {\n                ...context,\n                $$PARENT: context.$$CURRENT,\n                $$CURRENT: left,\n            }),\n        };\n    }\n);\nconfig.addProcessorToMap(\n    OP_ASSIGN,\n    'OP_ASSIGN',\n    false,\n    (left, right, prefix, context) => {\n        if (!isPlainObject(left)) {\n            if (left == null) {\n                left = {};\n            } else {\n                throw new InvalidArgument(MSG.VALUE_NOT_OBJECT('OP_ASSIGN'));\n            }\n        }\n\n        if (!isPlainObject(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_OBJECT('OP_ASSIGN'));\n        }\n\n        const rightValue = _mapValues(right, (expr, key) =>\n            evaluateExpr(left[key], expr, MSG.formatPrefix(key, prefix), {\n                ...context,\n                $$PARENT: left,\n                $$CURRENT: left[key],\n            })\n        );\n\n        return { ...left, ...rightValue };\n    }\n);\nconfig.addProcessorToMap(OP_PICK, 'OP_PICK', false, (left, right, prefix) => {\n    if (left == null) return null;\n\n    if (typeof right !== 'object') {\n        right = _castArray(right);\n    }\n\n    if (Array.isArray(right)) {\n        return _pick(left, right);\n    }\n\n    return _pickBy(\n        left,\n        (x, key) => match(key, right, MSG.formatPrefix(key, prefix))[0]\n    );\n});\nconfig.addProcessorToMap(\n    OP_GET_BY_INDEX,\n    'OP_GET_BY_INDEX',\n    false,\n    (left, right) => _nth(left, right)\n);\nconfig.addProcessorToMap(OP_GET_BY_KEY, 'OP_GET_BY_KEY', false, (left, right) =>\n    _get(left, right)\n);\nconfig.addProcessorToMap(OP_OMIT, 'OP_OMIT', false, (left, right, prefix) => {\n    if (left == null) return null;\n\n    if (typeof right !== 'object') {\n        right = _castArray(right);\n    }\n\n    if (Array.isArray(right)) {\n        return _omit(left, right);\n    }\n\n    return _omitBy(\n        left,\n        (x, key) => match(key, right, MSG.formatPrefix(key, prefix))[0]\n    );\n});\nconfig.addProcessorToMap(OP_GROUP, 'OP_GROUP', false, (left, right) =>\n    _groupBy(left, right)\n);\nconfig.addProcessorToMap(OP_SORT, 'OP_SORT', false, (left, right) =>\n    _sortBy(left, right)\n);\nconfig.addProcessorToMap(OP_EVAL, 'OP_EVAL', false, evaluateExpr);\nconfig.addProcessorToMap(\n    OP_MERGE,\n    'OP_MERGE',\n    false,\n    (left, right, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_MERGE'));\n        }\n\n        return right.reduce(\n            (result, expr, key) =>\n                Object.assign(\n                    result,\n                    evaluateExpr(left, expr, MSG.formatPrefix(key, prefix), {\n                        ...context,\n                    })\n                ),\n            {}\n        );\n    }\n);\nconfig.addProcessorToMap(OP_FILTER, 'OP_FILTER', false, (\n    left,\n    right,\n    prefix /*, context*/\n) => {\n    if (left == null) return null;\n\n    if (typeof left !== 'object') {\n        throw new InvalidArgument(MSG.VALUE_NOT_COLLECTION('OP_FILTER'));\n    }\n\n    return _filter(left, (value, key) =>\n        test(value, 'OP_MATCH', right, MSG.formatPrefix(key, prefix))\n    );\n});\nconfig.addProcessorToMap(OP_REMAP, 'OP_REMAP', false, (\n    left,\n    right /*, prefix, context*/\n) => {\n    if (left == null) return null;\n\n    if (typeof left !== 'object') {\n        throw new InvalidArgument(MSG.VALUE_NOT_COLLECTION('OP_REMAP'));\n    }\n\n    if (Array.isArray(right)) {\n        if (right.length !== 2) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE('OP_REMAP'));\n        }\n\n        return remap(left, right[0], right[1]);\n    }\n\n    if (!isPlainObject(right)) {\n        throw new InvalidArgument(MSG.OPERAND_NOT_OBJECT('OP_REMAP'));\n    }\n\n    return remap(left, right);\n});\nconfig.addProcessorToMap(\n    OP_IF,\n    'OP_IF',\n    false,\n    (left, right, prefix, context) => {\n        if (!Array.isArray(right)) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_ARRAY('OP_IF'));\n        }\n\n        if (right.length < 2 || right.length > 3) {\n            throw new InvalidArgument(MSG.OPERAND_NOT_TUPLE_2_OR_3('OP_IF'));\n        }\n\n        const condition = evaluateExpr(\n            undefined,\n            right[0],\n            prefix,\n            context,\n            true\n        );\n\n        if (test(left, 'OP_MATCH', condition, prefix)) {\n            return evaluateExpr(left, right[1], prefix, context);\n        } else if (right.length > 2) {\n            const ret = evaluateExpr(left, right[2], prefix, context);\n            return ret;\n        }\n\n        return left;\n    }\n);\n//embeded validators in processing pipeline\nconfig.addProcessorToMap(OP_MATCH, 'OP_MATCH', false, (left, right, prefix) => {\n    return test(left, 'OP_MATCH', right, prefix);\n});\n\nconfig.addProcessorToMap(OP_TO_JSON, 'OP_TO_JSON', true, (left) =>\n    left == null ? left : JSON.stringify(left)\n);\nconfig.addProcessorToMap(OP_TO_OBJ, 'OP_TO_OBJ', true, (left) =>\n    left == null ? left : JSON.parse(left)\n);\n\nfunction getUnmatchedExplanation(\n    op,\n    name,\n    leftValue,\n    rightValue,\n    prefix,\n    context\n) {\n    if (context && context.$$ERROR) return context.$$ERROR;\n\n    const getter = MSG.validationErrors[op] || MSG.validationErrors.OP_MATCH;\n    return getter(name, leftValue, rightValue, prefix);\n}\n\nfunction test(value, tag, opValue, prefix, context) {\n    const handler = config.getValidator(tag);\n\n    if (!handler) {\n        throw new InvalidArgument(MSG.INVALID_VALIDATOR_HANDLER(tag));\n    }\n\n    return handler(value, opValue, prefix, context);\n}\n\nfunction evaluate(value, tag, opValue, prefix, context) {\n    const handler = config.getProcessor(tag);\n\n    if (!handler) {\n        throw new InvalidArgument(MSG.INVALID_PROCESSOR_HANDLER(tag));\n    }\n\n    return handler(value, opValue, prefix, context);\n}\n\nfunction evaluateUnary(value, tag, prefix, context) {\n    const handler = config.getProcessor(tag);\n\n    if (!handler) {\n        throw new InvalidArgument(MSG.INVALID_PROCESSOR_HANDLER(tag));\n    }\n\n    return handler(value, prefix, context);\n}\n\nfunction evaluateByOpMeta(currentValue, rightValue, opMeta, prefix, context) {\n    if (opMeta[1]) {\n        return rightValue\n            ? evaluateUnary(currentValue, opMeta[0], prefix)\n            : currentValue;\n    }\n\n    return evaluate(currentValue, opMeta[0], rightValue, prefix, context);\n}\n\nfunction validateCollection(\n    actual,\n    collectionOp,\n    op,\n    expectedFieldValue,\n    prefix\n) {\n    const context = {};\n\n    switch (collectionOp) {\n        case PFX_FOR_EACH: {\n            const unmatchedKey = _findIndex(\n                actual,\n                (item) => !test(item, op, expectedFieldValue, prefix, context)\n            );\n\n            if (unmatchedKey !== -1) {\n                return [\n                    false,\n                    getUnmatchedExplanation(\n                        op,\n                        unmatchedKey,\n                        actual[unmatchedKey],\n                        expectedFieldValue,\n                        prefix,\n                        context\n                    ),\n                ];\n            }\n            break;\n        }\n\n        case PFX_WITH_ANY: {\n            const matched = _find(actual, (item) =>\n                test(item, op, expectedFieldValue, prefix, context)\n            );\n\n            if (!matched) {\n                return [\n                    false,\n                    getUnmatchedExplanation(\n                        op,\n                        null,\n                        actual,\n                        expectedFieldValue,\n                        prefix,\n                        context\n                    ),\n                ];\n            }\n            break;\n        }\n\n        default:\n            throw new InvalidArgument(MSG.INVALID_COLLECTION_OP(collectionOp));\n    }\n\n    return undefined;\n}\n\nfunction evaluateCollection(\n    currentValue,\n    collectionOp,\n    opMeta,\n    expectedFieldValue,\n    prefix,\n    context\n) {\n    switch (collectionOp) {\n        case PFX_FOR_EACH:\n            return (Array.isArray(currentValue)\n                ? _map\n                : _mapValues)(currentValue, (item, i) =>\n                evaluateByOpMeta(\n                    item,\n                    expectedFieldValue,\n                    opMeta,\n                    MSG.formatPrefix(i, prefix),\n                    { ...context, $$PARENT: currentValue, $$CURRENT: item }\n                )\n            );\n\n        default:\n            throw new InvalidArgument(MSG.INVALID_COLLECTION_OP(collectionOp));\n    }\n}\n\n/**\n * Validate the given object with JSON Expression Syntax (JES)\n * @param {*} actual - The object to match\n * @param {*} expected - Expected state in JSON Expression Syntax\n * @param {*} prefix - Tracking path\n *\n * { key: { $match } }\n */\nfunction match(actual, expected, prefix) {\n    let passObjectCheck = false;\n\n    if (!isPlainObject(expected)) {\n        if (!test(actual, 'OP_EQUAL', expected, prefix)) {\n            return [\n                false,\n                MSG.validationErrors.OP_EQUAL(null, actual, expected, prefix),\n            ];\n        }\n\n        return [true];\n    }\n\n    for (let fieldName in expected) {\n        let expectedFieldValue = expected[fieldName];\n\n        const l = fieldName.length;\n\n        if (l > 1) {\n            if (l > 3 && fieldName[0] === '|' && fieldName[2] === '$') {\n                //validators\n                const collectionOp = fieldName.substr(0, 2);\n                fieldName = fieldName.substr(2);\n\n                const op = config.getValidatorTag(fieldName);\n                if (!op) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_VALIDATION_OP(fieldName)\n                    );\n                }\n\n                const matchResult = validateCollection(\n                    actual,\n                    collectionOp,\n                    op,\n                    expectedFieldValue,\n                    prefix\n                );\n                if (matchResult) return matchResult;\n                continue;\n            }\n\n            if (fieldName[0] === '$') {\n                //validator\n                const op = config.getValidatorTag(fieldName);\n                if (!op) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_VALIDATION_OP(fieldName)\n                    );\n                }\n\n                const context = {};\n\n                if (!test(actual, op, expectedFieldValue, prefix, context)) {\n                    return [\n                        false,\n                        getUnmatchedExplanation(\n                            op,\n                            null,\n                            actual,\n                            expectedFieldValue,\n                            prefix,\n                            context\n                        ),\n                    ];\n                }\n\n                continue;\n            }\n        }\n\n        if (!passObjectCheck) {\n            if (actual == null)\n                return [\n                    false,\n                    MSG.validationErrors.OP_EXISTS(null, null, true, prefix),\n                ];\n\n            const actualType = typeof actual;\n\n            if (actualType !== 'object')\n                return [\n                    false,\n                    MSG.validationErrors.OP_TYPE(\n                        null,\n                        actualType,\n                        'object',\n                        prefix\n                    ),\n                ];\n        }\n\n        passObjectCheck = true;\n\n        let actualFieldValue = _get(actual, fieldName);\n\n        if (\n            expectedFieldValue != null &&\n            typeof expectedFieldValue === 'object'\n        ) {\n            const [ok, reason] = match(\n                actualFieldValue,\n                expectedFieldValue,\n                MSG.formatPrefix(fieldName, prefix)\n            );\n            if (!ok) {\n                return [false, reason];\n            }\n        } else {\n            if (\n                !test(actualFieldValue, 'OP_EQUAL', expectedFieldValue, prefix)\n            ) {\n                return [\n                    false,\n                    MSG.validationErrors.OP_EQUAL(\n                        fieldName,\n                        actualFieldValue,\n                        expectedFieldValue,\n                        prefix\n                    ),\n                ];\n            }\n        }\n    }\n\n    return [true];\n}\n\n/**\n * If $ operator used, only one a time is allowed\n * e.g.\n * {\n *    $groupBy: 'key'\n * }\n *\n *\n * @param {*} currentValue\n * @param {*} expr\n * @param {*} prefix\n * @param {*} context\n * @param {boolean} setOp - Whether the expression is a setOp\n */\nfunction evaluateExpr(currentValue, expr, prefix, context, setOp) {\n    if (Array.isArray(expr)) {\n        if (setOp) {\n            return expr.map((item) =>\n                evaluateExpr(undefined, item, prefix, { ...context }, true)\n            );\n        }\n\n        return expr.reduce(\n            (result, exprItem) =>\n                evaluateExpr(result, exprItem, prefix, { ...context }),\n            currentValue\n        );\n    }\n\n    const typeExpr = typeof expr;\n\n    if (typeExpr === 'boolean') {\n        if (setOp) return expr;\n        return expr ? currentValue : undefined;\n    }\n\n    if (typeExpr === 'number' || typeExpr === 'bigint') {\n        if (setOp) return expr;\n\n        throw new InvalidArgument(MSG.SYNTAX_NUMBER_AS_EXPR);\n    }\n\n    if (typeExpr === 'string') {\n        if (expr.startsWith('$$')) {\n            //get from context\n            const pos = expr.indexOf('.');\n            if (pos === -1) {\n                return context[expr];\n            }\n\n            return _get(context[expr.substr(0, pos)], expr.substr(pos + 1));\n        }\n\n        if (setOp) {\n            return expr;\n        }\n\n        const opMeta = config.getProcessorTagAndType(expr);\n        if (!opMeta) {\n            throw new InvalidArgument(MSG.INVALID_PROCESSING_OP(expr));\n        }\n\n        if (!opMeta[1]) {\n            throw new InvalidArgument(MSG.REQUIRE_RIGHT_OPERAND(expr));\n        }\n\n        return evaluateUnary(currentValue, opMeta[0], prefix);\n    }\n\n    if (typeExpr !== 'object') {\n        throw new InvalidArgument(MSG.SYNTAX_INVALID_EXPR);\n    }\n\n    if (setOp) {\n        return _mapValues(expr, (item) =>\n            evaluateExpr(undefined, item, prefix, context, true)\n        );\n    }\n\n    if (context == null) {\n        context = {\n            $$ROOT: currentValue,\n            $$PARENT: null,\n            $$CURRENT: currentValue,\n        };\n    }\n\n    let result,\n        hasOperator = false;\n\n    for (let fieldName in expr) {\n        let expectedFieldValue = expr[fieldName];\n\n        const l = fieldName.length;\n\n        if (l > 1) {\n            if (fieldName[0] === '$') {\n                if (result) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                const opMeta = config.getProcessorTagAndType(fieldName);\n                if (!opMeta) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_PROCESSING_OP(fieldName)\n                    );\n                }\n\n                if (hasOperator) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                result = evaluateByOpMeta(\n                    currentValue,\n                    expectedFieldValue,\n                    opMeta,\n                    prefix,\n                    context\n                );\n                hasOperator = true;\n                continue;\n            }\n\n            if (l > 3 && fieldName[0] === '|' && fieldName[2] === '$') {\n                if (result) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                const collectionOp = fieldName.substr(0, 2);\n                fieldName = fieldName.substr(2);\n\n                const opMeta = config.getProcessorTagAndType(fieldName);\n                if (!opMeta) {\n                    throw new InvalidArgument(\n                        MSG.INVALID_PROCESSING_OP(fieldName)\n                    );\n                }\n\n                if (hasOperator) {\n                    throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                result = evaluateCollection(\n                    currentValue,\n                    collectionOp,\n                    opMeta,\n                    expectedFieldValue,\n                    prefix,\n                    context\n                );\n                hasOperator = true;\n                continue;\n            }\n        }\n\n        if (hasOperator) {\n            throw new InvalidArgument(MSG.SYNTAX_OP_NOT_ALONE);\n        }\n\n        let compleyKey = fieldName.indexOf('.') !== -1;\n\n        //pick a field and then apply manipulation\n        let actualFieldValue =\n            currentValue != null\n                ? compleyKey\n                    ? _get(currentValue, fieldName)\n                    : currentValue[fieldName]\n                : undefined;\n\n        const childFieldValue = evaluateExpr(\n            actualFieldValue,\n            expectedFieldValue,\n            MSG.formatPrefix(fieldName, prefix),\n            context\n        );\n\n        if (typeof childFieldValue !== 'undefined') {\n            result == null && (result = {});\n            if (compleyKey) {\n                _set(result, fieldName, childFieldValue);\n            } else {\n                result[fieldName] = childFieldValue;\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * JSON Expression Syntax Object\n * @class\n */\nclass JES {\n    static config = config;\n    static match = match;\n    static evaluate = evaluateExpr;\n\n    /**\n     * @param {object} value\n     */\n    constructor(value) {\n        this.value = value;\n    }\n\n    /**\n     * Match the value with expected conditions in JSON expression\n     * @param {object} expected - JSON match expression\n     * @throws ValidationError\n     * @returns {JES}\n     */\n    match(expected) {\n        const result = match(this.value, expected);\n        if (result[0]) return this;\n\n        throw new ValidationError(result[1], {\n            actual: this.value,\n            expected,\n        });\n    }\n\n    /**\n     * Evaluate a JSON expression against the value\n     * @param {object} - JSON operation expression\n     */\n    evaluate(expr) {\n        return evaluateExpr(this.value, expr);\n    }\n\n    /**\n     * Evaluate a JSON expression against the value and update the value\n     * @param {object} - JSON operation expression\n     * @returns {JES}\n     */\n    update(expr) {\n        this.value = evaluateExpr(this.value, expr);\n        return this;\n    }\n}\n\nmodule.exports = JES;\n"]}