{"version":3,"sources":["msg.en-US.js"],"names":["exports","OPERATOR_NOT_ALONE","NOT_A_UNARY_QUERY","INVALID_EXPR_SYNTAX","INVALID_QUERY_OPERATOR","op","INVALID_TEST_OPERATOR","INVALID_QUERY_HANDLER","INVALID_TEST_HANLDER","INVALID_COLLECTION_OP","PRX_OP_NOT_FOR_EVAL","OPERAND_NOT_TUPLE","OPERAND_NOT_TUPLE_2_OR_3","OPERAND_NOT_ARRAY","OPERAND_NOT_BOOL","OPERAND_NOT_STRING","VALUE_NOT_COLLECTION","REQUIRE_RIGHT_OPERAND","validationErrors","OP_EQUAL","name","left","right","prefix","formatName","JSON","stringify","OP_NOT_EQUAL","OP_NOT","OP_GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","OP_LESS_THAN","OP_LESS_THAN_OR_EQUAL","OP_IN","OP_NOT_IN","OP_EXISTS","OP_TYPE","OP_MATCH","OP_MATCH_ANY","OP_HAS_KEYS","join","OP_START_WITH","OP_END_WITH"],"mappings":"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","sourcesContent":["//Exception messages\nexports.OPERATOR_NOT_ALONE =\n    'Query operator can only be used alone in a stage.';\nexports.NOT_A_UNARY_QUERY =\n    'Only unary query operator is allowed to be used directly in a matching.';\nexports.INVALID_EXPR_SYNTAX = 'Invalid expression syntax.';\n\nexports.INVALID_QUERY_OPERATOR = (op) => `Invalid JES query operator \"${op}\".`;\nexports.INVALID_TEST_OPERATOR = (op) => `Invalid JES test operator \"${op}\".`;\nexports.INVALID_QUERY_HANDLER = (op) =>\n    `JES query operator \"${op}\" handler not found.`;\nexports.INVALID_TEST_HANLDER = (op) =>\n    `JES test operator \"${op}\" handler not found.`;\n\nexports.INVALID_COLLECTION_OP = (op) => `Invalid collection operator \"${op}\".`;\nexports.PRX_OP_NOT_FOR_EVAL = (op) =>\n    `Operator prefix \"${op}\" cannot be used in evaluation.`;\n\nexports.OPERAND_NOT_TUPLE = (op) =>\n    `The operand of a collection operator ${\n        op ? '\"' + op + '\" ' : ''\n    }must be a two-tuple.`;\nexports.OPERAND_NOT_TUPLE_2_OR_3 = (op) =>\n    `The operand of a \"${op}\" operator must be either a 2-tuple or a 3-tuple.`;\nexports.OPERAND_NOT_ARRAY = (op) =>\n    `The operand of a \"${op}\" operator must be an array.`;\nexports.OPERAND_NOT_BOOL = (op) =>\n    `The operand of a \"${op}\" operator must be a boolean value.`;\nexports.OPERAND_NOT_STRING = (op) =>\n    `The operand of a \"${op}\" operator must be a string.`;\n\nexports.VALUE_NOT_COLLECTION = (op) =>\n    `The value using a \"${op}\" operator must be either an object or an array.`;\n\nexports.REQUIRE_RIGHT_OPERAND = (op) =>\n    `Binary query operator \"${op}\" requires the right operand.`;\n\nexports.validationErrors = {\n    OP_EQUAL: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should be ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT_EQUAL: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not be ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not match ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_GREATER_THAN: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be greater than ${right}, but ${JSON.stringify(left)} given.`,\n    OP_GREATER_THAN_OR_EQUAL: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be greater than or equal to ${right}, but ${JSON.stringify(\n            left\n        )} given.`,\n    OP_LESS_THAN: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be less than ${right}, but ${JSON.stringify(left)} given.`,\n    OP_LESS_THAN_OR_EQUAL: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should be less than or equal to ${right}, but ${JSON.stringify(\n            left\n        )} given.`,\n    OP_IN: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should be one of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_NOT_IN: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should not be any one of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_EXISTS: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should${right ? ' not ' : ' '}be NULL.`,\n    OP_TYPE: (name, left, right, prefix) =>\n        `The type of ${formatName(\n            name,\n            prefix\n        )} should be \"${right}\", but ${JSON.stringify(left)} given.`,\n    OP_MATCH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should match ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_MATCH_ANY: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should match any of ${JSON.stringify(\n            right\n        )}, but ${JSON.stringify(left)} given.`,\n    OP_HAS_KEYS: (name, left, right, prefix) =>\n        `${formatName(\n            name,\n            prefix\n        )} should have all of these keys [${right.join(', ')}].`,\n    OP_START_WITH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should start with \"${right}\".`,\n    OP_END_WITH: (name, left, right, prefix) =>\n        `${formatName(name, prefix)} should end with \"${right}\".`,\n};\n"]}