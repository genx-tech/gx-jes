{"version":3,"sources":["array.js"],"names":["_find","ValidationError","messages","validate","invalidType","name","alias","value","itemSchema","options","useFieldPath","abortEarly","throwError","context","Array","isArray","errors","fieldValue","i","path","makePath","reason","$$PARENT","$$CURRENT","push","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AAEA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,QAAP,IAAmBC,WAAnB,QAAsC,aAAtC;AAEA,eAAe;AACXC,EAAAA,IAAI,EAAE,OADK;AAGXC,EAAAA,KAAK,EAAE,CAAC,MAAD,CAHI;;AAKX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIH,EAAAA,QAAQ,EAAE,UACNI,KADM,EAENC,UAFM,EAKL;AAAA,QAFDC,OAEC,uEAFS;AAAEC,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,UAAU,EAAE,IAAlC;AAAwCC,MAAAA,UAAU,EAAE;AAApD,KAET;AAAA,QADDC,OACC,uEADS,EACT;AACD,UAAM;AAAEF,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA6BH,OAAnC;;AAEA,QAAIF,KAAK,IAAI,IAAT,IAAiB,CAACO,KAAK,CAACC,OAAN,CAAcR,KAAd,CAAtB,EAA4C;AACxC,aAAOH,WAAW,CAACG,KAAD,EAAQ,OAAR,EAAiBE,OAAjB,EAA0BI,OAA1B,CAAlB;AACH;;AAED,QAAI,OAAOL,UAAP,KAAsB,UAA1B,EAAsC;AAClC;AACAA,MAAAA,UAAU,GAAGA,UAAU,EAAvB;AACH;;AAED,QAAID,KAAJ,EAAW;AACP,YAAMS,MAAM,GAAG,EAAf;;AAEAhB,MAAAA,KAAK,CAACO,KAAD,EAAQ,CAACU,UAAD,EAAaC,CAAb,KAAmB;AAC5B,cAAMC,IAAI,GAAGjB,QAAQ,CAACkB,QAAT,CAAkBF,CAAlB,EAAqBL,OAAO,CAACM,IAA7B,CAAb;AACA,cAAME,MAAM,GAAGlB,QAAQ,CAACc,UAAD,EAAaT,UAAb,EAAyBC,OAAzB,EAAkC;AACrDJ,UAAAA,IAAI,EAAE,IAD+C;AAErDc,UAAAA,IAFqD;AAGrDG,UAAAA,QAAQ,EAAEf,KAH2C;AAIrDgB,UAAAA,SAAS,EAAEN;AAJ0C,SAAlC,CAAvB;;AAOA,YAAII,MAAM,KAAK,IAAf,EAAqB;AACjB,cAAIV,UAAJ,EAAgB;AACZ,gBAAIC,UAAJ,EAAgB;AACZ,oBAAM,IAAIX,eAAJ,CAAoBoB,MAApB,EAA4BJ,UAA5B,EAAwCE,IAAxC,CAAN;AACH;;AAED,mBAAOE,MAAP;AACH;;AAEDL,UAAAA,MAAM,CAACQ,IAAP,CAAY,GAAGH,MAAf;AACH;AACJ,OApBI,CAAL;;AAsBA,UAAIL,MAAM,CAACS,MAAP,GAAgB,CAApB,EAAuB;AACnB,YAAIb,UAAJ,EAAgB;AACZ,gBAAM,IAAIX,eAAJ,CAAoBe,MAApB,EAA4BT,KAA5B,EAAmCM,OAAO,CAACM,IAA3C,CAAN;AACH;;AAED,eAAOH,MAAP;AACH;AACJ;;AAED,WAAO,IAAP;AACH;AAjEU,CAAf","sourcesContent":["import _find from 'lodash/find';\n\nimport ValidationError from '../ValidationError';\nimport { messages } from '../config';\nimport validate, { invalidType } from '../validate';\n\nexport default {\n    name: 'array',\n\n    alias: ['list'],\n\n    /**\n     *\n     * @param {*} value\n     * @param {*} itemSchema\n     * @param {*} options\n     * @param {*} context\n     * @returns {true|ValidationError}\n     */\n    validate: (\n        value,\n        itemSchema,\n        options = { useFieldPath: true, abortEarly: true, throwError: true },\n        context = {}\n    ) => {\n        const { abortEarly, throwError } = options;\n\n        if (value != null && !Array.isArray(value)) {\n            return invalidType(value, 'array', options, context);\n        }\n\n        if (typeof itemSchema === 'function') {\n            // use deferred activation of schema to avoid circullar reference\n            itemSchema = itemSchema();\n        }\n\n        if (value) {\n            const errors = [];\n\n            _find(value, (fieldValue, i) => {\n                const path = messages.makePath(i, context.path);\n                const reason = validate(fieldValue, itemSchema, options, {\n                    name: null,\n                    path,\n                    $$PARENT: value,\n                    $$CURRENT: fieldValue,\n                });\n\n                if (reason !== true) {\n                    if (abortEarly) {\n                        if (throwError) {\n                            throw new ValidationError(reason, fieldValue, path);\n                        }\n\n                        return reason;\n                    }\n\n                    errors.push(...reason);\n                }\n            });\n\n            if (errors.length > 0) {\n                if (throwError) {\n                    throw new ValidationError(errors, value, context.path);\n                }\n\n                return errors;\n            }\n        }\n\n        return true;\n    },\n};\n"]}