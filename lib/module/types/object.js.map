{"version":3,"sources":["object.js"],"names":["_find","get","_get","ValidationError","messages","validate","invalidType","validateBySchema","value","schema","options","useFieldPath","abortEarly","throwError","context","mapOfNames","errors","_options","validationObject","fieldName","fieldValue","reason","path","makePath","$$PARENT","$$CURRENT","push","length","name","alias"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,YAA5B;AAEA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAOC,QAAP,IAAmBC,WAAnB,QAAsC,aAAtC;AAEA,OAAO,SAASC,gBAAT,CACHC,KADG,EAEHC,MAFG,EAKL;AAAA,MAFEC,OAEF,uEAFY;AAAEC,IAAAA,YAAY,EAAE,IAAhB;AAAsBC,IAAAA,UAAU,EAAE,IAAlC;AAAwCC,IAAAA,UAAU,EAAE;AAApD,GAEZ;AAAA,MADEC,OACF,uEADY,EACZ;AACE,QAAM;AAAEH,IAAAA,YAAF;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA,UAA5B;AAAwCE,IAAAA;AAAxC,MAAuDL,OAA7D;;AAEA,MAAIF,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,QAAtC,EAAgD;AAC5C,WAAOF,WAAW,CAACE,KAAD,EAAQ,QAAR,EAAkBE,OAAlB,EAA2BI,OAA3B,CAAlB;AACH;;AAED,MAAI,OAAOL,MAAP,KAAkB,UAAtB,EAAkC;AAC9B;AACAA,IAAAA,MAAM,GAAGA,MAAM,EAAf;AACH;;AAED,QAAMO,MAAM,GAAG,EAAf;;AACA,QAAMC,QAAQ,GAAG,CAACL,UAAD,IAAeC,UAAf,GAA4B,EAAE,GAAGH,OAAL;AAAcG,IAAAA,UAAU,EAAE;AAA1B,GAA5B,GAAgEH,OAAjF;;AAEAV,EAAAA,KAAK,CAACS,MAAD,EAAS,CAACS,gBAAD,EAAmBC,SAAnB,KAAiC;AAAA;;AAC3C,UAAMC,UAAU,GAAGT,YAAY,GAAGT,IAAI,CAACM,KAAD,EAAQW,SAAR,CAAP,GAA4BX,KAA5B,aAA4BA,KAA5B,uBAA4BA,KAAK,CAAGW,SAAH,CAAhE;AACA,UAAME,MAAM,GAAGhB,QAAQ,CAACe,UAAD,EAAaF,gBAAb,EAA+BD,QAA/B,EAAyC;AAC5DK,MAAAA,IAAI,EAAElB,QAAQ,CAACmB,QAAT,0BAAkBR,UAAlB,aAAkBA,UAAlB,uBAAkBA,UAAU,CAAGI,SAAH,CAA5B,yEAA6CA,SAA7C,EAAwDL,OAAO,CAACQ,IAAhE,CADsD;AAE5DE,MAAAA,QAAQ,EAAEhB,KAFkD;AAG5DiB,MAAAA,SAAS,EAAEL;AAHiD,KAAzC,CAAvB;;AAMA,QAAIC,MAAM,KAAK,IAAf,EAAqB;AACjB,UAAIT,UAAU,IAAIC,UAAlB,EAA8B;AAC1B,cAAM,IAAIV,eAAJ,CAAoBkB,MAApB,EAA4BD,UAA5B,EAAwCD,SAAxC,CAAN;AACH;;AAEDH,MAAAA,MAAM,CAACU,IAAP,CAAY,GAAGL,MAAf;AACA,aAAOT,UAAP;AACH;;AAED,WAAO,KAAP;AACH,GAlBI,CAAL;;AAoBA,MAAII,MAAM,CAACW,MAAP,GAAgB,CAApB,EAAuB;AACnB,QAAId,UAAJ,EAAgB;AACZ,YAAM,IAAIV,eAAJ,CAAoBa,MAApB,EAA4BR,KAA5B,EAAmCM,OAAO,CAACQ,IAA3C,CAAN;AACH;;AAED,WAAON,MAAP;AACH;;AAED,SAAO,IAAP;AACH;AAED,eAAe;AACXY,EAAAA,IAAI,EAAE,QADK;AAGXC,EAAAA,KAAK,EAAE,CAAC,MAAD,CAHI;AAKXxB,EAAAA,QAAQ,EAAEE;AALC,CAAf","sourcesContent":["import _find from 'lodash/find';\nimport { get as _get } from '@genx/july';\n\nimport ValidationError from '../ValidationError';\nimport { messages } from '../config';\nimport validate, { invalidType } from '../validate';\n\nexport function validateBySchema(\n    value,\n    schema,\n    options = { useFieldPath: true, abortEarly: true, throwError: true },\n    context = {}\n) {\n    const { useFieldPath, abortEarly, throwError, mapOfNames } = options;\n\n    if (value != null && typeof value !== 'object') {\n        return invalidType(value, 'object', options, context);\n    }\n\n    if (typeof schema === 'function') {\n        // use deferred activation of schema to avoid circullar reference\n        schema = schema();\n    }\n\n    const errors = [];\n    const _options = !abortEarly && throwError ? { ...options, throwError: false } : options;\n\n    _find(schema, (validationObject, fieldName) => {\n        const fieldValue = useFieldPath ? _get(value, fieldName) : value?.[fieldName];\n        const reason = validate(fieldValue, validationObject, _options, {\n            path: messages.makePath(mapOfNames?.[fieldName] ?? fieldName, context.path),\n            $$PARENT: value,\n            $$CURRENT: fieldValue,\n        });\n\n        if (reason !== true) {\n            if (abortEarly && throwError) {\n                throw new ValidationError(reason, fieldValue, fieldName);\n            }\n\n            errors.push(...reason);\n            return abortEarly;\n        }\n\n        return false;\n    });\n\n    if (errors.length > 0) {\n        if (throwError) {\n            throw new ValidationError(errors, value, context.path);\n        }\n\n        return errors;\n    }\n\n    return true;\n}\n\nexport default {\n    name: 'object',\n\n    alias: ['json'],\n\n    validate: validateBySchema,\n};\n"]}