{"version":3,"file":"transform.js","names":["_isEmpty2","_interopRequireDefault","require","_reduce2","_map2","_mapValues2","_july","_config","_interopRequireWildcard","_transformerOperators","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","MSG","config","messages","PFX_MAP","PFX_REDUCE","applyBinaryOperator","value","op","opValue","context","handler","getTransformer","Error","INVALID_TRANSFORMER_HANDLER","applyUnaryOperator","tag","applyOperator","currentValue","rightValue","isUnary","_isEmpty","RIGHT_OPERAND_NOT_EMPTY","transformCollection","collectionOp","opMeta","expectedFieldValue","Array","isArray","_map","_mapValues","item","getChildContext","length","INVALID_COLLECTION_OP_EXPR","ops","REDUCE","_reduce","result","INVALID_COLLECTION_OP","transform","expr","replaceLeft","path","$$ROOT","$$PARENT","$$CURRENT","$$KEY","map","undefined","reduce","exprItem","typeExpr","SYNTAX_NUMBER_AS_EXPR","startsWith","pos","indexOf","_get","substr","getTransformerTagAndType","INVALID_TRANSFORMER_OP","REQUIRE_RIGHT_OPERAND","SYNTAX_INVALID_EXPR","hasOperator","fieldName","l","SYNTAX_OP_NOT_ALONE","substring","complexKey","actualFieldValue","childFieldValue","_set","_default","exports","module"],"sources":["../src/transform.js"],"sourcesContent":["// JSON Expression Syntax (JES)\nimport _isEmpty from 'lodash/isEmpty';\nimport _reduce from 'lodash/reduce';\nimport _map from 'lodash/map';\nimport _mapValues from 'lodash/mapValues';\n\nimport { get as _get, set as _set } from '@genx/july';\n\nimport config, { getChildContext } from './config';\nimport ops from './transformerOperators';\n\nconst MSG = config.messages;\n\nconst PFX_MAP = '|>'; // map\nconst PFX_REDUCE = '|+'; // reduce 1. intermediate = result op [key, value] 2. result = result op intermediate\n\n/**\n * Apply a bianry operator to a value\n * @param {*} value\n * @param {*} op\n * @param {*} opValue\n * @param {*} context\n * @returns {*}\n */\nfunction applyBinaryOperator(value, op, opValue, context) {\n    const handler = config.getTransformer(op);\n\n    if (!handler) {\n        throw new Error(MSG.INVALID_TRANSFORMER_HANDLER(op));\n    }\n\n    return handler(value, opValue, context);\n}\n\n/**\n * Apply an unary operator to a value\n * @param {*} value\n * @param {*} tag\n * @param {*} context\n * @returns {*}\n */\nfunction applyUnaryOperator(value, tag, context) {\n    const handler = config.getTransformer(tag);\n\n    if (!handler) {\n        throw new Error(MSG.INVALID_TRANSFORMER_HANDLER(tag));\n    }\n\n    return handler(value, context);\n}\n\n/**\n * Apply an operator to a value with operator meta\n * @param {*} currentValue\n * @param {*} rightValue\n * @param {*} opMeta\n * @param {*} context\n * @returns {*}\n */\nfunction applyOperator(currentValue, rightValue, [op, isUnary], context) {\n    if (isUnary) {\n        if (!_isEmpty(rightValue)) {\n            throw new Error(MSG.RIGHT_OPERAND_NOT_EMPTY(op));\n        }\n        return applyUnaryOperator(currentValue, op, context);\n    }\n\n    return applyBinaryOperator(currentValue, op, rightValue, context);\n}\n\n/**\n * Apply an collection iteration operator with operator meta\n * @param {*} currentValue\n * @param {*} collectionOp\n * @param {*} opMeta\n * @param {*} expectedFieldValue\n * @param {*} context\n * @returns {*}\n */\nfunction transformCollection(currentValue, collectionOp, opMeta, expectedFieldValue, context) {\n    const isUnary = opMeta[1];\n\n    switch (collectionOp) {\n        case PFX_MAP:\n            return (Array.isArray(currentValue) ? _map : _mapValues)(currentValue, (item, key) =>\n                applyOperator(item, expectedFieldValue, opMeta, getChildContext(context, currentValue, key, item))\n            );\n\n        case PFX_REDUCE:\n            if (\n                !Array.isArray(expectedFieldValue) ||\n                (isUnary && expectedFieldValue.length !== 1) ||\n                (!isUnary && expectedFieldValue.length !== 2)\n            ) {\n                throw new Error(MSG.INVALID_COLLECTION_OP_EXPR(ops.REDUCE, opMeta[0], expectedFieldValue));\n            }\n\n            return _reduce(\n                currentValue,\n                (result, item, key) =>\n                    applyOperator(\n                        result,\n                        expectedFieldValue[1],\n                        opMeta,\n                        getChildContext(context, currentValue, key, item)\n                    ),\n                expectedFieldValue[0]\n            );\n\n        default:\n            throw new Error(MSG.INVALID_COLLECTION_OP(collectionOp));\n    }\n}\n\n/**\n * If $ operator used, only one a time is allowed\n * e.g.\n * {\n *    $groupBy: 'key'\n * }\n *\n *\n * @param {*} currentValue\n * @param {*} expr\n * @param {*} context\n * @param {boolean} replaceLeft - Whether the expression will replace the left value chain, like a setOp\n * @return {*}\n */\nfunction transform(currentValue, expr, context, replaceLeft) {\n    if (expr == null) {\n        return replaceLeft ? expr : currentValue;\n    }\n\n    if (context == null) {\n        context = {\n            path: null,\n            $$ROOT: currentValue,\n            $$PARENT: null,\n            $$CURRENT: currentValue,\n            $$KEY: null,\n        };\n    }\n\n    if (Array.isArray(expr)) {\n        if (replaceLeft) {\n            return expr.map((item) => transform(undefined, item, { ...context }, true));\n        }\n\n        return expr.reduce((result, exprItem) => transform(result, exprItem, { ...context }), currentValue);\n    }\n\n    const typeExpr = typeof expr;\n\n    if (typeExpr === 'boolean') {\n        if (replaceLeft) {\n            return expr;\n        }\n\n        return expr ? currentValue : undefined;\n    }\n\n    if (typeExpr === 'number' || typeExpr === 'bigint') {\n        if (replaceLeft) {\n            return expr;\n        }\n\n        throw new Error(MSG.SYNTAX_NUMBER_AS_EXPR);\n    }\n\n    if (typeExpr === 'string') {\n        if (expr.startsWith('$$')) {\n            //get from context\n            const pos = expr.indexOf('.');\n            if (pos === -1) {\n                return context[expr];\n            }\n\n            return _get(context[expr.substr(0, pos)], expr.substr(pos + 1));\n        }\n\n        if (replaceLeft) {\n            return expr;\n        }\n\n        const opMeta = config.getTransformerTagAndType(expr);\n        if (!opMeta) {\n            throw new Error(MSG.INVALID_TRANSFORMER_OP(expr));\n        }\n\n        if (!opMeta[1]) {\n            throw new Error(MSG.REQUIRE_RIGHT_OPERAND(expr));\n        }\n\n        return applyUnaryOperator(currentValue, opMeta[0], context);\n    }\n\n    if (typeExpr !== 'object') {\n        throw new Error(MSG.SYNTAX_INVALID_EXPR(expr));\n    }\n\n    if (replaceLeft) {\n        return _mapValues(expr, (item) => transform(undefined, item, context, true));\n    }\n\n    let result,\n        hasOperator = false;\n\n    for (let fieldName in expr) {\n        let expectedFieldValue = expr[fieldName];\n\n        const l = fieldName.length;\n\n        if (l > 1) {\n            if (fieldName[0] === '$') {\n                if (result) {\n                    throw new Error(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                const opMeta = config.getTransformerTagAndType(fieldName);\n                if (!opMeta) {\n                    throw new Error(MSG.INVALID_TRANSFORMER_OP(fieldName));\n                }\n\n                if (hasOperator) {\n                    throw new Error(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                result = applyOperator(currentValue, expectedFieldValue, opMeta, context);\n                hasOperator = true;\n                continue;\n            }\n\n            if (l > 3 && fieldName[0] === '|' && fieldName[2] === '$') {\n                if (result) {\n                    throw new Error(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                const collectionOp = fieldName.substring(0, 2);\n                fieldName = fieldName.substring(2);\n\n                const opMeta = config.getTransformerTagAndType(fieldName);\n                if (!opMeta) {\n                    throw new Error(MSG.INVALID_TRANSFORMER_OP(fieldName));\n                }\n\n                if (hasOperator) {\n                    throw new Error(MSG.SYNTAX_OP_NOT_ALONE);\n                }\n\n                result = transformCollection(currentValue, collectionOp, opMeta, expectedFieldValue, context);\n                hasOperator = true;\n                continue;\n            }\n        }\n\n        if (hasOperator) {\n            throw new Error(MSG.SYNTAX_OP_NOT_ALONE);\n        }\n\n        let complexKey = fieldName.indexOf('.') !== -1;\n\n        //pick a field and then apply manipulation\n        let actualFieldValue =\n            currentValue != null ? (complexKey ? _get(currentValue, fieldName) : currentValue[fieldName]) : undefined;\n\n        const childFieldValue = transform(\n            actualFieldValue,\n            expectedFieldValue,\n            getChildContext(context, currentValue, fieldName, actualFieldValue)\n        );\n\n        if (typeof childFieldValue !== 'undefined') {\n            result == null && (result = {});\n            if (complexKey) {\n                _set(result, fieldName, childFieldValue);\n            } else {\n                result[fieldName] = childFieldValue;\n            }\n        }\n    }\n\n    return result;\n}\n\nexport default transform;\n"],"mappings":"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"}